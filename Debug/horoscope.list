
horoscope.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063fc  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  080065f4  080065f4  000165f4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006688  08006688  00016688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006690  08006690  00016690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006694  08006694  00016694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001c4  20000000  08006698  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000f5c  200001c4  0800685c  000201c4  2**2
                  ALLOC
  8 ._user_heap_stack 00004000  20001120  0800685c  00021120  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201c4  2**0
                  CONTENTS, READONLY
 10 .debug_info   000347ed  00000000  00000000  000201f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005fbd  00000000  00000000  000549df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    00012d5c  00000000  00000000  0005a99c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000011b8  00000000  00000000  0006d6f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00001ac8  00000000  00000000  0006e8b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00035404  00000000  00000000  00070378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00025cda  00000000  00000000  000a577c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00127a8d  00000000  00000000  000cb456  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  001f2ee3  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000034b8  00000000  00000000  001f2f38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	200001c4 	.word	0x200001c4
 8000214:	00000000 	.word	0x00000000
 8000218:	080065dc 	.word	0x080065dc

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	200001c8 	.word	0x200001c8
 8000234:	080065dc 	.word	0x080065dc

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96e 	b.w	800052c <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468c      	mov	ip, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	f040 8083 	bne.w	800037e <__udivmoddi4+0x116>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d947      	bls.n	800030e <__udivmoddi4+0xa6>
 800027e:	fab2 f282 	clz	r2, r2
 8000282:	b142      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000284:	f1c2 0020 	rsb	r0, r2, #32
 8000288:	fa24 f000 	lsr.w	r0, r4, r0
 800028c:	4091      	lsls	r1, r2
 800028e:	4097      	lsls	r7, r2
 8000290:	ea40 0c01 	orr.w	ip, r0, r1
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbbc f6f8 	udiv	r6, ip, r8
 80002a0:	fa1f fe87 	uxth.w	lr, r7
 80002a4:	fb08 c116 	mls	r1, r8, r6, ip
 80002a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ac:	fb06 f10e 	mul.w	r1, r6, lr
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18fb      	adds	r3, r7, r3
 80002b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ba:	f080 8119 	bcs.w	80004f0 <__udivmoddi4+0x288>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8116 	bls.w	80004f0 <__udivmoddi4+0x288>
 80002c4:	3e02      	subs	r6, #2
 80002c6:	443b      	add	r3, r7
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d0:	fb08 3310 	mls	r3, r8, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002dc:	45a6      	cmp	lr, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	193c      	adds	r4, r7, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8105 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002ea:	45a6      	cmp	lr, r4
 80002ec:	f240 8102 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002f0:	3802      	subs	r0, #2
 80002f2:	443c      	add	r4, r7
 80002f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f8:	eba4 040e 	sub.w	r4, r4, lr
 80002fc:	2600      	movs	r6, #0
 80002fe:	b11d      	cbz	r5, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c5 4300 	strd	r4, r3, [r5]
 8000308:	4631      	mov	r1, r6
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xaa>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	2a00      	cmp	r2, #0
 8000318:	d150      	bne.n	80003bc <__udivmoddi4+0x154>
 800031a:	1bcb      	subs	r3, r1, r7
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	fa1f f887 	uxth.w	r8, r7
 8000324:	2601      	movs	r6, #1
 8000326:	fbb3 fcfe 	udiv	ip, r3, lr
 800032a:	0c21      	lsrs	r1, r4, #16
 800032c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000330:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000334:	fb08 f30c 	mul.w	r3, r8, ip
 8000338:	428b      	cmp	r3, r1
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0xe4>
 800033c:	1879      	adds	r1, r7, r1
 800033e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0xe2>
 8000344:	428b      	cmp	r3, r1
 8000346:	f200 80e9 	bhi.w	800051c <__udivmoddi4+0x2b4>
 800034a:	4684      	mov	ip, r0
 800034c:	1ac9      	subs	r1, r1, r3
 800034e:	b2a3      	uxth	r3, r4
 8000350:	fbb1 f0fe 	udiv	r0, r1, lr
 8000354:	fb0e 1110 	mls	r1, lr, r0, r1
 8000358:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800035c:	fb08 f800 	mul.w	r8, r8, r0
 8000360:	45a0      	cmp	r8, r4
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x10c>
 8000364:	193c      	adds	r4, r7, r4
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x10a>
 800036c:	45a0      	cmp	r8, r4
 800036e:	f200 80d9 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 8000372:	4618      	mov	r0, r3
 8000374:	eba4 0408 	sub.w	r4, r4, r8
 8000378:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800037c:	e7bf      	b.n	80002fe <__udivmoddi4+0x96>
 800037e:	428b      	cmp	r3, r1
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x12e>
 8000382:	2d00      	cmp	r5, #0
 8000384:	f000 80b1 	beq.w	80004ea <__udivmoddi4+0x282>
 8000388:	2600      	movs	r6, #0
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	4630      	mov	r0, r6
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f683 	clz	r6, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d14a      	bne.n	8000434 <__udivmoddi4+0x1cc>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0x140>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 80b8 	bhi.w	8000518 <__udivmoddi4+0x2b0>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb61 0103 	sbc.w	r1, r1, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	468c      	mov	ip, r1
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0a8      	beq.n	8000308 <__udivmoddi4+0xa0>
 80003b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0xa0>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f603 	lsr.w	r6, r0, r3
 80003c4:	4097      	lsls	r7, r2
 80003c6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ce:	40d9      	lsrs	r1, r3
 80003d0:	4330      	orrs	r0, r6
 80003d2:	0c03      	lsrs	r3, r0, #16
 80003d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e4:	fb06 f108 	mul.w	r1, r6, r8
 80003e8:	4299      	cmp	r1, r3
 80003ea:	fa04 f402 	lsl.w	r4, r4, r2
 80003ee:	d909      	bls.n	8000404 <__udivmoddi4+0x19c>
 80003f0:	18fb      	adds	r3, r7, r3
 80003f2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003f6:	f080 808d 	bcs.w	8000514 <__udivmoddi4+0x2ac>
 80003fa:	4299      	cmp	r1, r3
 80003fc:	f240 808a 	bls.w	8000514 <__udivmoddi4+0x2ac>
 8000400:	3e02      	subs	r6, #2
 8000402:	443b      	add	r3, r7
 8000404:	1a5b      	subs	r3, r3, r1
 8000406:	b281      	uxth	r1, r0
 8000408:	fbb3 f0fe 	udiv	r0, r3, lr
 800040c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000410:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000414:	fb00 f308 	mul.w	r3, r0, r8
 8000418:	428b      	cmp	r3, r1
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x1c4>
 800041c:	1879      	adds	r1, r7, r1
 800041e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000422:	d273      	bcs.n	800050c <__udivmoddi4+0x2a4>
 8000424:	428b      	cmp	r3, r1
 8000426:	d971      	bls.n	800050c <__udivmoddi4+0x2a4>
 8000428:	3802      	subs	r0, #2
 800042a:	4439      	add	r1, r7
 800042c:	1acb      	subs	r3, r1, r3
 800042e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000432:	e778      	b.n	8000326 <__udivmoddi4+0xbe>
 8000434:	f1c6 0c20 	rsb	ip, r6, #32
 8000438:	fa03 f406 	lsl.w	r4, r3, r6
 800043c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000440:	431c      	orrs	r4, r3
 8000442:	fa20 f70c 	lsr.w	r7, r0, ip
 8000446:	fa01 f306 	lsl.w	r3, r1, r6
 800044a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800044e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000452:	431f      	orrs	r7, r3
 8000454:	0c3b      	lsrs	r3, r7, #16
 8000456:	fbb1 f9fe 	udiv	r9, r1, lr
 800045a:	fa1f f884 	uxth.w	r8, r4
 800045e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000462:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000466:	fb09 fa08 	mul.w	sl, r9, r8
 800046a:	458a      	cmp	sl, r1
 800046c:	fa02 f206 	lsl.w	r2, r2, r6
 8000470:	fa00 f306 	lsl.w	r3, r0, r6
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x220>
 8000476:	1861      	adds	r1, r4, r1
 8000478:	f109 30ff 	add.w	r0, r9, #4294967295
 800047c:	d248      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 800047e:	458a      	cmp	sl, r1
 8000480:	d946      	bls.n	8000510 <__udivmoddi4+0x2a8>
 8000482:	f1a9 0902 	sub.w	r9, r9, #2
 8000486:	4421      	add	r1, r4
 8000488:	eba1 010a 	sub.w	r1, r1, sl
 800048c:	b2bf      	uxth	r7, r7
 800048e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000492:	fb0e 1110 	mls	r1, lr, r0, r1
 8000496:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800049a:	fb00 f808 	mul.w	r8, r0, r8
 800049e:	45b8      	cmp	r8, r7
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x24a>
 80004a2:	19e7      	adds	r7, r4, r7
 80004a4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004a8:	d22e      	bcs.n	8000508 <__udivmoddi4+0x2a0>
 80004aa:	45b8      	cmp	r8, r7
 80004ac:	d92c      	bls.n	8000508 <__udivmoddi4+0x2a0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4427      	add	r7, r4
 80004b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b6:	eba7 0708 	sub.w	r7, r7, r8
 80004ba:	fba0 8902 	umull	r8, r9, r0, r2
 80004be:	454f      	cmp	r7, r9
 80004c0:	46c6      	mov	lr, r8
 80004c2:	4649      	mov	r1, r9
 80004c4:	d31a      	bcc.n	80004fc <__udivmoddi4+0x294>
 80004c6:	d017      	beq.n	80004f8 <__udivmoddi4+0x290>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x27a>
 80004ca:	ebb3 020e 	subs.w	r2, r3, lr
 80004ce:	eb67 0701 	sbc.w	r7, r7, r1
 80004d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004d6:	40f2      	lsrs	r2, r6
 80004d8:	ea4c 0202 	orr.w	r2, ip, r2
 80004dc:	40f7      	lsrs	r7, r6
 80004de:	e9c5 2700 	strd	r2, r7, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	462e      	mov	r6, r5
 80004ec:	4628      	mov	r0, r5
 80004ee:	e70b      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f0:	4606      	mov	r6, r0
 80004f2:	e6e9      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f4:	4618      	mov	r0, r3
 80004f6:	e6fd      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004f8:	4543      	cmp	r3, r8
 80004fa:	d2e5      	bcs.n	80004c8 <__udivmoddi4+0x260>
 80004fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000500:	eb69 0104 	sbc.w	r1, r9, r4
 8000504:	3801      	subs	r0, #1
 8000506:	e7df      	b.n	80004c8 <__udivmoddi4+0x260>
 8000508:	4608      	mov	r0, r1
 800050a:	e7d2      	b.n	80004b2 <__udivmoddi4+0x24a>
 800050c:	4660      	mov	r0, ip
 800050e:	e78d      	b.n	800042c <__udivmoddi4+0x1c4>
 8000510:	4681      	mov	r9, r0
 8000512:	e7b9      	b.n	8000488 <__udivmoddi4+0x220>
 8000514:	4666      	mov	r6, ip
 8000516:	e775      	b.n	8000404 <__udivmoddi4+0x19c>
 8000518:	4630      	mov	r0, r6
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14a>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	4439      	add	r1, r7
 8000522:	e713      	b.n	800034c <__udivmoddi4+0xe4>
 8000524:	3802      	subs	r0, #2
 8000526:	443c      	add	r4, r7
 8000528:	e724      	b.n	8000374 <__udivmoddi4+0x10c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <USBD_AUDIO_GetCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_AUDIO_GetCfgDesc (uint16_t *length)
{
  *length = USBD_AUDIO_CfgDescSize;
 8000530:	4b02      	ldr	r3, [pc, #8]	; (800053c <USBD_AUDIO_GetCfgDesc+0xc>)
 8000532:	881a      	ldrh	r2, [r3, #0]
 8000534:	8002      	strh	r2, [r0, #0]
  return USBD_AUDIO_CfgDesc;
}
 8000536:	6858      	ldr	r0, [r3, #4]
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	200001e0 	.word	0x200001e0

08000540 <USBD_AUDIO_EP0_TxReady>:
  */
static uint8_t  USBD_AUDIO_EP0_TxReady (USBD_HandleTypeDef *pdev)
{
  /* Only OUT control data are processed */
  return USBD_OK;
}
 8000540:	2000      	movs	r0, #0
 8000542:	4770      	bx	lr

08000544 <USBD_AUDIO_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_AUDIO_SOF (USBD_HandleTypeDef *pdev)
{
 8000544:	b570      	push	{r4, r5, r6, lr}
    USBD_AUDIO_HandleTypeDef   *haudio;
  
 
  haudio = (USBD_AUDIO_HandleTypeDef*) pdev->pClassData; 
 8000546:	f8d0 6290 	ldr.w	r6, [r0, #656]	; 0x290
  
  for(int i=0;i<haudio->aud_function.as_interfaces_count;i++)
 800054a:	2500      	movs	r5, #0
 800054c:	4634      	mov	r4, r6
 800054e:	7873      	ldrb	r3, [r6, #1]
 8000550:	42ab      	cmp	r3, r5
 8000552:	dc01      	bgt.n	8000558 <USBD_AUDIO_SOF+0x14>
          haudio->aud_function.as_interfaces[i].SofReceived(haudio->aud_function.as_interfaces[i].private_data);
        }
      }
  }
  return USBD_OK;
}
 8000554:	2000      	movs	r0, #0
 8000556:	bd70      	pop	{r4, r5, r6, pc}
      if(haudio->aud_function.as_interfaces[i].alternate!=0)
 8000558:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 800055c:	b11b      	cbz	r3, 8000566 <USBD_AUDIO_SOF+0x22>
        if(haudio->aud_function.as_interfaces[i].SofReceived)
 800055e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8000560:	b10b      	cbz	r3, 8000566 <USBD_AUDIO_SOF+0x22>
          haudio->aud_function.as_interfaces[i].SofReceived(haudio->aud_function.as_interfaces[i].private_data);
 8000562:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8000564:	4798      	blx	r3
  for(int i=0;i<haudio->aud_function.as_interfaces_count;i++)
 8000566:	3501      	adds	r5, #1
 8000568:	3448      	adds	r4, #72	; 0x48
 800056a:	e7f0      	b.n	800054e <USBD_AUDIO_SOF+0xa>

0800056c <USBD_AUDIO_IsoOutIncomplete>:
  */
static uint8_t  USBD_AUDIO_IsoOutIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{

  return USBD_OK;
}
 800056c:	2000      	movs	r0, #0
 800056e:	4770      	bx	lr

08000570 <USBD_AUDIO_GetDeviceQualifierDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_AUDIO_GetDeviceQualifierDesc (uint16_t *length)
{
  *length = sizeof (USBD_AUDIO_DeviceQualifierDesc);
 8000570:	230a      	movs	r3, #10
 8000572:	8003      	strh	r3, [r0, #0]
  return USBD_AUDIO_DeviceQualifierDesc;
}
 8000574:	4800      	ldr	r0, [pc, #0]	; (8000578 <USBD_AUDIO_GetDeviceQualifierDesc+0x8>)
 8000576:	4770      	bx	lr
 8000578:	20000000 	.word	0x20000000

0800057c <USBD_AUDIO_IsoINIncomplete>:
{
 800057c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8000580:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290
 8000584:	4605      	mov	r5, r0
    current_sof = USB_SOF_NUMBER();
 8000586:	4f25      	ldr	r7, [pc, #148]	; (800061c <USBD_AUDIO_IsoINIncomplete+0xa0>)
  for(int i = 1; i<USBD_AUDIO_MAX_IN_EP; i++)
 8000588:	2601      	movs	r6, #1
 800058a:	34c0      	adds	r4, #192	; 0xc0
 800058c:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8000624 <USBD_AUDIO_IsoINIncomplete+0xa8>
 8000590:	46b9      	mov	r9, r7
    if((ep->open) && IS_ISO_IN_INCOMPLETE_EP(i,current_sof, ep->tx_rx_soffn))
 8000592:	7963      	ldrb	r3, [r4, #5]
    current_sof = USB_SOF_NUMBER();
 8000594:	68ba      	ldr	r2, [r7, #8]
    if((ep->open) && IS_ISO_IN_INCOMPLETE_EP(i,current_sof, ep->tx_rx_soffn))
 8000596:	b38b      	cbz	r3, 80005fc <USBD_AUDIO_IsoINIncomplete+0x80>
 8000598:	0173      	lsls	r3, r6, #5
 800059a:	f853 1008 	ldr.w	r1, [r3, r8]
 800059e:	2900      	cmp	r1, #0
 80005a0:	da2c      	bge.n	80005fc <USBD_AUDIO_IsoINIncomplete+0x80>
    current_sof = USB_SOF_NUMBER();
 80005a2:	f3c2 220d 	ubfx	r2, r2, #8, #14
    if((ep->open) && IS_ISO_IN_INCOMPLETE_EP(i,current_sof, ep->tx_rx_soffn))
 80005a6:	f853 3008 	ldr.w	r3, [r3, r8]
 80005aa:	ea82 4313 	eor.w	r3, r2, r3, lsr #16
 80005ae:	07db      	lsls	r3, r3, #31
 80005b0:	d505      	bpl.n	80005be <USBD_AUDIO_IsoINIncomplete+0x42>
 80005b2:	8923      	ldrh	r3, [r4, #8]
 80005b4:	3302      	adds	r3, #2
 80005b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80005ba:	429a      	cmp	r2, r3
 80005bc:	d11e      	bne.n	80005fc <USBD_AUDIO_IsoINIncomplete+0x80>
      epnum = i|0x80;
 80005be:	f066 037f 	orn	r3, r6, #127	; 0x7f
      USBD_LL_FlushEP(pdev, epnum);
 80005c2:	4628      	mov	r0, r5
      epnum = i|0x80;
 80005c4:	b2d9      	uxtb	r1, r3
      USB_CLEAR_INCOMPLETE_IN_EP(epnum);
 80005c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80005ca:	4b15      	ldr	r3, [pc, #84]	; (8000620 <USBD_AUDIO_IsoINIncomplete+0xa4>)
      USBD_LL_FlushEP(pdev, epnum);
 80005cc:	9101      	str	r1, [sp, #4]
      USB_CLEAR_INCOMPLETE_IN_EP(epnum);
 80005ce:	4413      	add	r3, r2
 80005d0:	015b      	lsls	r3, r3, #5
 80005d2:	681a      	ldr	r2, [r3, #0]
 80005d4:	f042 4290 	orr.w	r2, r2, #1207959552	; 0x48000000
 80005d8:	601a      	str	r2, [r3, #0]
      USBD_LL_FlushEP(pdev, epnum);
 80005da:	f002 f951 	bl	8002880 <USBD_LL_FlushEP>
      ep->tx_rx_soffn = USB_SOF_NUMBER();
 80005de:	f8d9 3008 	ldr.w	r3, [r9, #8]
     if(ep->ep_type==USBD_AUDIO_FEEDBACK_EP)
 80005e2:	9901      	ldr	r1, [sp, #4]
      ep->tx_rx_soffn = USB_SOF_NUMBER();
 80005e4:	f3c3 230d 	ubfx	r3, r3, #8, #14
 80005e8:	8123      	strh	r3, [r4, #8]
     if(ep->ep_type==USBD_AUDIO_FEEDBACK_EP)
 80005ea:	7923      	ldrb	r3, [r4, #4]
 80005ec:	2b01      	cmp	r3, #1
 80005ee:	d10d      	bne.n	800060c <USBD_AUDIO_IsoINIncomplete+0x90>
                         ep->ep_description.sync_ep->feedback_data,
 80005f0:	6822      	ldr	r2, [r4, #0]
        USBD_LL_Transmit(pdev, 
 80005f2:	88e3      	ldrh	r3, [r4, #6]
 80005f4:	3201      	adds	r2, #1
        USBD_LL_Transmit(pdev, 
 80005f6:	4628      	mov	r0, r5
 80005f8:	f002 f971 	bl	80028de <USBD_LL_Transmit>
  for(int i = 1; i<USBD_AUDIO_MAX_IN_EP; i++)
 80005fc:	3601      	adds	r6, #1
 80005fe:	340c      	adds	r4, #12
 8000600:	2e05      	cmp	r6, #5
 8000602:	d1c6      	bne.n	8000592 <USBD_AUDIO_IsoINIncomplete+0x16>
}
 8000604:	2000      	movs	r0, #0
 8000606:	b003      	add	sp, #12
 8000608:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     if(ep->ep_type==USBD_AUDIO_DATA_EP)
 800060c:	b91b      	cbnz	r3, 8000616 <USBD_AUDIO_IsoINIncomplete+0x9a>
                      ep->ep_description.data_ep->buf,
 800060e:	6822      	ldr	r2, [r4, #0]
        USBD_LL_Transmit(pdev, 
 8000610:	8993      	ldrh	r3, [r2, #12]
 8000612:	6892      	ldr	r2, [r2, #8]
 8000614:	e7ef      	b.n	80005f6 <USBD_AUDIO_IsoINIncomplete+0x7a>
       USBD_error_handler();
 8000616:	f001 ff50 	bl	80024ba <USBD_error_handler>
 800061a:	e7ef      	b.n	80005fc <USBD_AUDIO_IsoINIncomplete+0x80>
 800061c:	40040800 	.word	0x40040800
 8000620:	02002048 	.word	0x02002048
 8000624:	40040900 	.word	0x40040900

08000628 <USBD_AUDIO_EP0_RxReady>:
{
 8000628:	b538      	push	{r3, r4, r5, lr}
  haudio = (USBD_AUDIO_HandleTypeDef*) pdev->pClassData; 
 800062a:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290
  if(haudio->last_control.req == 0x00)
 800062e:	f893 417a 	ldrb.w	r4, [r3, #378]	; 0x17a
 8000632:	b1d4      	cbz	r4, 800066a <USBD_AUDIO_EP0_RxReady+0x42>
  if(haudio->last_control.request_target == AUDIO_UNIT_CONTROL_REQUEST)
 8000634:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 8000638:	2a01      	cmp	r2, #1
 800063a:	d116      	bne.n	800066a <USBD_AUDIO_EP0_RxReady+0x42>
    ctl=haudio->last_control.entity.controller;
 800063c:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
    switch(ctl->type)
 8000640:	7851      	ldrb	r1, [r2, #1]
 8000642:	2906      	cmp	r1, #6
 8000644:	d107      	bne.n	8000656 <USBD_AUDIO_EP0_RxReady+0x2e>
            uint16_t selector = HIBYTE(haudio->last_control.wValue);
 8000646:	f8b3 0178 	ldrh.w	r0, [r3, #376]	; 0x178
            USBD_AUDIO_FeatureControlCallbacksTypeDef* feature_control = ctl->Callbacks.feature_control;
 800064a:	6891      	ldr	r1, [r2, #8]
            uint16_t selector = HIBYTE(haudio->last_control.wValue);
 800064c:	0a05      	lsrs	r5, r0, #8
          switch(selector)
 800064e:	2d01      	cmp	r5, #1
 8000650:	d004      	beq.n	800065c <USBD_AUDIO_EP0_RxReady+0x34>
 8000652:	2d02      	cmp	r5, #2
 8000654:	d00b      	beq.n	800066e <USBD_AUDIO_EP0_RxReady+0x46>
                                USBD_error_handler();
 8000656:	f001 ff30 	bl	80024ba <USBD_error_handler>
 800065a:	e006      	b.n	800066a <USBD_AUDIO_EP0_RxReady+0x42>
                      if(feature_control->SetMute)
 800065c:	684c      	ldr	r4, [r1, #4]
 800065e:	b124      	cbz	r4, 800066a <USBD_AUDIO_EP0_RxReady+0x42>
                        feature_control->SetMute(LOBYTE(haudio->last_control.wValue),
 8000660:	68d2      	ldr	r2, [r2, #12]
 8000662:	b2c0      	uxtb	r0, r0
 8000664:	f893 1131 	ldrb.w	r1, [r3, #305]	; 0x131
 8000668:	47a0      	blx	r4
}
 800066a:	2000      	movs	r0, #0
 800066c:	bd38      	pop	{r3, r4, r5, pc}
                       switch(haudio->last_control.req)
 800066e:	2c01      	cmp	r4, #1
 8000670:	d1f1      	bne.n	8000656 <USBD_AUDIO_EP0_RxReady+0x2e>
                              if(feature_control->SetCurVolume)
 8000672:	688c      	ldr	r4, [r1, #8]
 8000674:	2c00      	cmp	r4, #0
 8000676:	d0f8      	beq.n	800066a <USBD_AUDIO_EP0_RxReady+0x42>
                                  feature_control->SetCurVolume(LOBYTE(haudio->last_control.wValue),
 8000678:	68d2      	ldr	r2, [r2, #12]
 800067a:	b2c0      	uxtb	r0, r0
 800067c:	f8b3 1131 	ldrh.w	r1, [r3, #305]	; 0x131
 8000680:	47a0      	blx	r4
 8000682:	e7f2      	b.n	800066a <USBD_AUDIO_EP0_RxReady+0x42>

08000684 <USBD_AUDIO_DataOut>:
{
 8000684:	b573      	push	{r0, r1, r4, r5, r6, lr}
  ep=&((USBD_AUDIO_HandleTypeDef*) pdev->pClassData)->ep_out[epnum];
 8000686:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290
  if(ep->open)
 800068a:	240c      	movs	r4, #12
{
 800068c:	4605      	mov	r5, r0
 800068e:	460e      	mov	r6, r1
  if(ep->open)
 8000690:	fb04 3401 	mla	r4, r4, r1, r3
 8000694:	f894 30f5 	ldrb.w	r3, [r4, #245]	; 0xf5
 8000698:	b1d3      	cbz	r3, 80006d0 <USBD_AUDIO_DataOut+0x4c>
    packet_length = USBD_LL_GetRxDataSize(pdev, epnum);
 800069a:	f002 f92e 	bl	80028fa <USBD_LL_GetRxDataSize>
    ep->ep_description.data_ep->DataReceived(packet_length,ep->ep_description.data_ep->private_data);
 800069e:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
    packet_length = USBD_LL_GetRxDataSize(pdev, epnum);
 80006a2:	b280      	uxth	r0, r0
    ep->ep_description.data_ep->DataReceived(packet_length,ep->ep_description.data_ep->private_data);
 80006a4:	691a      	ldr	r2, [r3, #16]
 80006a6:	6a19      	ldr	r1, [r3, #32]
    packet_length = USBD_LL_GetRxDataSize(pdev, epnum);
 80006a8:	f8ad 0006 	strh.w	r0, [sp, #6]
    ep->ep_description.data_ep->DataReceived(packet_length,ep->ep_description.data_ep->private_data);
 80006ac:	4790      	blx	r2
    pbuf=  ep->ep_description.data_ep->GetBuffer(ep->ep_description.data_ep->private_data,&packet_length);                               
 80006ae:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
 80006b2:	f10d 0106 	add.w	r1, sp, #6
 80006b6:	695a      	ldr	r2, [r3, #20]
 80006b8:	6a18      	ldr	r0, [r3, #32]
 80006ba:	4790      	blx	r2
     USBD_LL_PrepareReceive(pdev,
 80006bc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    pbuf=  ep->ep_description.data_ep->GetBuffer(ep->ep_description.data_ep->private_data,&packet_length);                               
 80006c0:	4602      	mov	r2, r0
     USBD_LL_PrepareReceive(pdev,
 80006c2:	4631      	mov	r1, r6
 80006c4:	4628      	mov	r0, r5
 80006c6:	f002 f911 	bl	80028ec <USBD_LL_PrepareReceive>
}
 80006ca:	2000      	movs	r0, #0
 80006cc:	b002      	add	sp, #8
 80006ce:	bd70      	pop	{r4, r5, r6, pc}
      USBD_error_handler();
 80006d0:	f001 fef3 	bl	80024ba <USBD_error_handler>
 80006d4:	e7f9      	b.n	80006ca <USBD_AUDIO_DataOut+0x46>
	...

080006d8 <USBD_AUDIO_Setup>:
{
 80006d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80006dc:	780b      	ldrb	r3, [r1, #0]
{
 80006de:	4606      	mov	r6, r0
  haudio = (USBD_AUDIO_HandleTypeDef*) pdev->pClassData;
 80006e0:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80006e4:	f013 0760 	ands.w	r7, r3, #96	; 0x60
 80006e8:	f000 8087 	beq.w	80007fa <USBD_AUDIO_Setup+0x122>
 80006ec:	2f20      	cmp	r7, #32
 80006ee:	d127      	bne.n	8000740 <USBD_AUDIO_Setup+0x68>
    if((req->bmRequest & USB_REQ_RECIPIENT_MASK) == USB_REQ_RECIPIENT_INTERFACE)
 80006f0:	f003 0303 	and.w	r3, r3, #3
 80006f4:	2b01      	cmp	r3, #1
 80006f6:	f040 80a8 	bne.w	800084a <USBD_AUDIO_Setup+0x172>
      switch (req->bRequest)
 80006fa:	784f      	ldrb	r7, [r1, #1]
 80006fc:	2f01      	cmp	r7, #1
 80006fe:	d005      	beq.n	800070c <USBD_AUDIO_Setup+0x34>
 8000700:	f107 037f 	add.w	r3, r7, #127	; 0x7f
 8000704:	b2db      	uxtb	r3, r3
 8000706:	2b03      	cmp	r3, #3
 8000708:	f200 809f 	bhi.w	800084a <USBD_AUDIO_Setup+0x172>
  haudio->last_control.req = 0x00;
 800070c:	2000      	movs	r0, #0
  for (int i = 0;i < haudio->aud_function.control_count; i++)
 800070e:	4625      	mov	r5, r4
  haudio->last_control.req = 0x00;
 8000710:	f884 017a 	strb.w	r0, [r4, #378]	; 0x17a
  unit_id = HIBYTE(req->wIndex);
 8000714:	888a      	ldrh	r2, [r1, #4]
  for (int i = 0;i < haudio->aud_function.control_count; i++)
 8000716:	f815 cb04 	ldrb.w	ip, [r5], #4
  unit_id = HIBYTE(req->wIndex);
 800071a:	0a12      	lsrs	r2, r2, #8
  for (int i = 0;i < haudio->aud_function.control_count; i++)
 800071c:	4560      	cmp	r0, ip
 800071e:	da0c      	bge.n	800073a <USBD_AUDIO_Setup+0x62>
    if(unit_id == haudio->aud_function.controls[i].id)
 8000720:	0103      	lsls	r3, r0, #4
 8000722:	f815 e003 	ldrb.w	lr, [r5, r3]
 8000726:	4596      	cmp	lr, r2
 8000728:	d10c      	bne.n	8000744 <USBD_AUDIO_Setup+0x6c>
  control_selector = HIBYTE(req->wValue);
 800072a:	18e5      	adds	r5, r4, r3
 800072c:	8848      	ldrh	r0, [r1, #2]
  if((ctl->control_selector_map & control_selector) == 0)
 800072e:	f8b5 c008 	ldrh.w	ip, [r5, #8]
  control_selector = HIBYTE(req->wValue);
 8000732:	0a02      	lsrs	r2, r0, #8
  if((ctl->control_selector_map & control_selector) == 0)
 8000734:	ea1c 2c10 	ands.w	ip, ip, r0, lsr #8
 8000738:	d106      	bne.n	8000748 <USBD_AUDIO_Setup+0x70>
    USBD_CtlError (pdev, req);
 800073a:	4630      	mov	r0, r6
 800073c:	f005 fdc6 	bl	80062cc <USBD_CtlError>
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8000740:	2700      	movs	r7, #0
 8000742:	e086      	b.n	8000852 <USBD_AUDIO_Setup+0x17a>
  for (int i = 0;i < haudio->aud_function.control_count; i++)
 8000744:	3001      	adds	r0, #1
 8000746:	e7e9      	b.n	800071c <USBD_AUDIO_Setup+0x44>
  if(!(req->bRequest&0x80))
 8000748:	f017 0f80 	tst.w	r7, #128	; 0x80
 800074c:	d113      	bne.n	8000776 <USBD_AUDIO_Setup+0x9e>
      ctl = &haudio->aud_function.controls[i];
 800074e:	3304      	adds	r3, #4
     haudio->last_control.wValue  = req->wValue;
 8000750:	f8a4 0178 	strh.w	r0, [r4, #376]	; 0x178
     USBD_CtlPrepareRx (pdev,
 8000754:	4630      	mov	r0, r6
      ctl = &haudio->aud_function.controls[i];
 8000756:	4423      	add	r3, r4
     haudio->last_control.entity.controller= ctl;
 8000758:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
     haudio->last_control.request_target = AUDIO_UNIT_CONTROL_REQUEST;
 800075c:	2301      	movs	r3, #1
 800075e:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
     haudio->last_control.len = req->wLength;
 8000762:	88ca      	ldrh	r2, [r1, #6]
     USBD_CtlPrepareRx (pdev,
 8000764:	f204 1131 	addw	r1, r4, #305	; 0x131
     haudio->last_control.req = req->bRequest;
 8000768:	f884 717a 	strb.w	r7, [r4, #378]	; 0x17a
     haudio->last_control.len = req->wLength;
 800076c:	f8c4 2174 	str.w	r2, [r4, #372]	; 0x174
     USBD_CtlPrepareRx (pdev,
 8000770:	f005 fde8 	bl	8006344 <USBD_CtlPrepareRx>
      return USBD_OK;   
 8000774:	e7e4      	b.n	8000740 <USBD_AUDIO_Setup+0x68>
  switch(ctl->type)
 8000776:	7969      	ldrb	r1, [r5, #5]
 8000778:	2906      	cmp	r1, #6
 800077a:	d107      	bne.n	800078c <USBD_AUDIO_Setup+0xb4>
           USBD_AUDIO_FeatureControlCallbacksTypeDef* feature_control = ctl->Callbacks.feature_control;
 800077c:	2a01      	cmp	r2, #1
 800077e:	68e9      	ldr	r1, [r5, #12]
  control_selector = HIBYTE(req->wValue);
 8000780:	fa5f fc82 	uxtb.w	ip, r2
 8000784:	d005      	beq.n	8000792 <USBD_AUDIO_Setup+0xba>
 8000786:	f1bc 0f02 	cmp.w	ip, #2
 800078a:	d013      	beq.n	80007b4 <USBD_AUDIO_Setup+0xdc>
                          USBD_error_handler();
 800078c:	f001 fe95 	bl	80024ba <USBD_error_handler>
 8000790:	e7d6      	b.n	8000740 <USBD_AUDIO_Setup+0x68>
                      haudio->last_control.data[0] = 0;
 8000792:	2300      	movs	r3, #0
 8000794:	f884 3131 	strb.w	r3, [r4, #305]	; 0x131
                      if(feature_control->GetMute)
 8000798:	680b      	ldr	r3, [r1, #0]
 800079a:	f204 1131 	addw	r1, r4, #305	; 0x131
 800079e:	b123      	cbz	r3, 80007aa <USBD_AUDIO_Setup+0xd2>
                        feature_control->GetMute(LOBYTE(req->wValue),
 80007a0:	692a      	ldr	r2, [r5, #16]
 80007a2:	b2c0      	uxtb	r0, r0
 80007a4:	9101      	str	r1, [sp, #4]
 80007a6:	4798      	blx	r3
 80007a8:	9901      	ldr	r1, [sp, #4]
                      USBD_CtlSendData (pdev, haudio->last_control.data,1);
 80007aa:	2201      	movs	r2, #1
                                USBD_CtlSendData (pdev, (uint8_t*) tmpdata,2);
 80007ac:	4630      	mov	r0, r6
 80007ae:	f005 fdb4 	bl	800631a <USBD_CtlSendData>
                         break;
 80007b2:	e7c5      	b.n	8000740 <USBD_AUDIO_Setup+0x68>
                       tmpdata =  (uint16_t*) &(haudio->last_control.data);
 80007b4:	f1a7 0281 	sub.w	r2, r7, #129	; 0x81
 80007b8:	f204 1531 	addw	r5, r4, #305	; 0x131
                        switch(req->bRequest)
 80007bc:	2a03      	cmp	r2, #3
 80007be:	d817      	bhi.n	80007f0 <USBD_AUDIO_Setup+0x118>
 80007c0:	e8df f002 	tbb	[pc, r2]
 80007c4:	13100d02 	.word	0x13100d02
                              if(feature_control->GetCurVolume)
 80007c8:	68cf      	ldr	r7, [r1, #12]
 80007ca:	b1a7      	cbz	r7, 80007f6 <USBD_AUDIO_Setup+0x11e>
                                  feature_control->GetCurVolume(LOBYTE(req->wValue),
 80007cc:	441c      	add	r4, r3
 80007ce:	4629      	mov	r1, r5
                              tmpdata = 0;
 80007d0:	2500      	movs	r5, #0
                                  feature_control->GetCurVolume(LOBYTE(req->wValue),
 80007d2:	b2c0      	uxtb	r0, r0
 80007d4:	6922      	ldr	r2, [r4, #16]
 80007d6:	47b8      	blx	r7
                                USBD_CtlSendData (pdev, (uint8_t*) tmpdata,2);
 80007d8:	2202      	movs	r2, #2
 80007da:	4629      	mov	r1, r5
 80007dc:	e7e6      	b.n	80007ac <USBD_AUDIO_Setup+0xd4>
                              tmpdata = (uint16_t*) &(feature_control->MinVolume);
 80007de:	f101 0512 	add.w	r5, r1, #18
                              break;
 80007e2:	e7f9      	b.n	80007d8 <USBD_AUDIO_Setup+0x100>
                             tmpdata = (uint16_t*) &(feature_control->MaxVolume);
 80007e4:	f101 0510 	add.w	r5, r1, #16
                              break;
 80007e8:	e7f6      	b.n	80007d8 <USBD_AUDIO_Setup+0x100>
                              tmpdata = (uint16_t*) &(feature_control->ResVolume);
 80007ea:	f101 0514 	add.w	r5, r1, #20
                              break;
 80007ee:	e7f3      	b.n	80007d8 <USBD_AUDIO_Setup+0x100>
                                USBD_error_handler();
 80007f0:	f001 fe63 	bl	80024ba <USBD_error_handler>
 80007f4:	e7f0      	b.n	80007d8 <USBD_AUDIO_Setup+0x100>
                              tmpdata = 0;
 80007f6:	463d      	mov	r5, r7
 80007f8:	e7ee      	b.n	80007d8 <USBD_AUDIO_Setup+0x100>
    switch (req->bRequest)
 80007fa:	784b      	ldrb	r3, [r1, #1]
 80007fc:	2b0a      	cmp	r3, #10
 80007fe:	d01d      	beq.n	800083c <USBD_AUDIO_Setup+0x164>
 8000800:	2b0b      	cmp	r3, #11
 8000802:	d00f      	beq.n	8000824 <USBD_AUDIO_Setup+0x14c>
 8000804:	2b06      	cmp	r3, #6
 8000806:	d120      	bne.n	800084a <USBD_AUDIO_Setup+0x172>
      if( (req->wValue >> 8) == USBD_AUDIO_DESC_TYPE_CS_DEVICE)
 8000808:	884b      	ldrh	r3, [r1, #2]
 800080a:	0a1b      	lsrs	r3, r3, #8
 800080c:	2b21      	cmp	r3, #33	; 0x21
 800080e:	d120      	bne.n	8000852 <USBD_AUDIO_Setup+0x17a>
        len = MIN(USBD_AUDIO_DESC_SIZ , req->wLength);
 8000810:	88ca      	ldrh	r2, [r1, #6]
        pbuf = USBD_AUDIO_CfgDesc + 18;
 8000812:	4b83      	ldr	r3, [pc, #524]	; (8000a20 <USBD_AUDIO_Setup+0x348>)
        USBD_CtlSendData (pdev, 
 8000814:	2a09      	cmp	r2, #9
        pbuf = USBD_AUDIO_CfgDesc + 18;
 8000816:	6859      	ldr	r1, [r3, #4]
        USBD_CtlSendData (pdev, 
 8000818:	bf28      	it	cs
 800081a:	2209      	movcs	r2, #9
 800081c:	3112      	adds	r1, #18
              USBD_CtlSendData (pdev,
 800081e:	f005 fd7c 	bl	800631a <USBD_CtlSendData>
              return USBD_OK;
 8000822:	e016      	b.n	8000852 <USBD_AUDIO_Setup+0x17a>
        for(int i=0;i<haudio->aud_function.as_interfaces_count;i++)
 8000824:	7862      	ldrb	r2, [r4, #1]
 8000826:	46b8      	mov	r8, r7
 8000828:	790b      	ldrb	r3, [r1, #4]
 800082a:	2048      	movs	r0, #72	; 0x48
            if((uint8_t)(req->wIndex)==haudio->aud_function.as_interfaces[i].interface_num)
 800082c:	f104 0524 	add.w	r5, r4, #36	; 0x24
        for(int i=0;i<haudio->aud_function.as_interfaces_count;i++)
 8000830:	4542      	cmp	r2, r8
 8000832:	dc22      	bgt.n	800087a <USBD_AUDIO_Setup+0x1a2>
        if(((uint8_t)(req->wIndex) ==0)&&((uint8_t)(req->wValue))==0)
 8000834:	b94b      	cbnz	r3, 800084a <USBD_AUDIO_Setup+0x172>
 8000836:	788b      	ldrb	r3, [r1, #2]
 8000838:	b93b      	cbnz	r3, 800084a <USBD_AUDIO_Setup+0x172>
 800083a:	e00a      	b.n	8000852 <USBD_AUDIO_Setup+0x17a>
        for(int i=0;i<haudio->aud_function.as_interfaces_count;i++)
 800083c:	7860      	ldrb	r0, [r4, #1]
 800083e:	463b      	mov	r3, r7
 8000840:	2548      	movs	r5, #72	; 0x48
            if((uint8_t)(req->wIndex)==haudio->aud_function.as_interfaces[i].interface_num)
 8000842:	f104 0c24 	add.w	ip, r4, #36	; 0x24
        for(int i=0;i<haudio->aud_function.as_interfaces_count;i++)
 8000846:	4298      	cmp	r0, r3
 8000848:	dc07      	bgt.n	800085a <USBD_AUDIO_Setup+0x182>
        ret = USBD_FAIL;
 800084a:	2702      	movs	r7, #2
     USBD_CtlError (pdev, req);
 800084c:	4630      	mov	r0, r6
 800084e:	f005 fd3d 	bl	80062cc <USBD_CtlError>
}
 8000852:	4638      	mov	r0, r7
 8000854:	b003      	add	sp, #12
 8000856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if((uint8_t)(req->wIndex)==haudio->aud_function.as_interfaces[i].interface_num)
 800085a:	fb05 f203 	mul.w	r2, r5, r3
 800085e:	f891 e004 	ldrb.w	lr, [r1, #4]
 8000862:	f81c 8002 	ldrb.w	r8, [ip, r2]
 8000866:	45f0      	cmp	r8, lr
 8000868:	d105      	bne.n	8000876 <USBD_AUDIO_Setup+0x19e>
              USBD_CtlSendData (pdev,
 800086a:	f102 0126 	add.w	r1, r2, #38	; 0x26
 800086e:	4630      	mov	r0, r6
 8000870:	2201      	movs	r2, #1
 8000872:	4421      	add	r1, r4
 8000874:	e7d3      	b.n	800081e <USBD_AUDIO_Setup+0x146>
        for(int i=0;i<haudio->aud_function.as_interfaces_count;i++)
 8000876:	3301      	adds	r3, #1
 8000878:	e7e5      	b.n	8000846 <USBD_AUDIO_Setup+0x16e>
            if((uint8_t)(req->wIndex)==haudio->aud_function.as_interfaces[i].interface_num)
 800087a:	fb00 fa08 	mul.w	sl, r0, r8
 800087e:	f815 c00a 	ldrb.w	ip, [r5, sl]
 8000882:	459c      	cmp	ip, r3
 8000884:	f040 80c8 	bne.w	8000a18 <USBD_AUDIO_Setup+0x340>
              if((uint8_t)(req->wValue)==haudio->aud_function.as_interfaces[i].alternate)
 8000888:	eb04 090a 	add.w	r9, r4, sl
 800088c:	f891 b002 	ldrb.w	fp, [r1, #2]
 8000890:	f899 3026 	ldrb.w	r3, [r9, #38]	; 0x26
 8000894:	459b      	cmp	fp, r3
 8000896:	d0dc      	beq.n	8000852 <USBD_AUDIO_Setup+0x17a>
  ep = (pas_interface->data_ep.ep_num&0x80)?&haudio->ep_in[pas_interface->data_ep.ep_num&0x0F]:
 8000898:	f999 2028 	ldrsb.w	r2, [r9, #40]	; 0x28
 800089c:	f899 5028 	ldrb.w	r5, [r9, #40]	; 0x28
 80008a0:	2a00      	cmp	r2, #0
 80008a2:	f04f 020c 	mov.w	r2, #12
 80008a6:	bfb5      	itete	lt
 80008a8:	f005 050f 	andlt.w	r5, r5, #15
 80008ac:	fb02 4505 	mlage	r5, r2, r5, r4
 80008b0:	fb02 4505 	mlalt	r5, r2, r5, r4
 80008b4:	35f0      	addge	r5, #240	; 0xf0
 80008b6:	bfb8      	it	lt
 80008b8:	35b4      	addlt	r5, #180	; 0xb4
  if(new_alt==0)
 80008ba:	f1bb 0f00 	cmp.w	fp, #0
 80008be:	d12c      	bne.n	800091a <USBD_AUDIO_Setup+0x242>
    if (pas_interface->alternate!=0)
 80008c0:	b1f3      	cbz	r3, 8000900 <USBD_AUDIO_Setup+0x228>
      if(ep->open)
 80008c2:	796b      	ldrb	r3, [r5, #5]
 80008c4:	b133      	cbz	r3, 80008d4 <USBD_AUDIO_Setup+0x1fc>
        USBD_LL_CloseEP(pdev, ep->ep_description.data_ep->ep_num);
 80008c6:	682b      	ldr	r3, [r5, #0]
 80008c8:	4630      	mov	r0, r6
 80008ca:	7819      	ldrb	r1, [r3, #0]
 80008cc:	f001 ffc0 	bl	8002850 <USBD_LL_CloseEP>
        ep->open=0;
 80008d0:	f885 b005 	strb.w	fp, [r5, #5]
      if(pas_interface->synch_enabled)
 80008d4:	f899 304c 	ldrb.w	r3, [r9, #76]	; 0x4c
 80008d8:	b193      	cbz	r3, 8000900 <USBD_AUDIO_Setup+0x228>
          ep=&haudio->ep_in[pas_interface->synch_ep.ep_num&0x0F];
 80008da:	f899 5050 	ldrb.w	r5, [r9, #80]	; 0x50
          if(ep->open)
 80008de:	230c      	movs	r3, #12
          ep=&haudio->ep_in[pas_interface->synch_ep.ep_num&0x0F];
 80008e0:	f005 050f 	and.w	r5, r5, #15
          if(ep->open)
 80008e4:	fb03 4505 	mla	r5, r3, r5, r4
 80008e8:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
 80008ec:	b143      	cbz	r3, 8000900 <USBD_AUDIO_Setup+0x228>
            USBD_LL_CloseEP(pdev, ep->ep_description.sync_ep->ep_num);
 80008ee:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
 80008f2:	4630      	mov	r0, r6
 80008f4:	7819      	ldrb	r1, [r3, #0]
 80008f6:	f001 ffab 	bl	8002850 <USBD_LL_CloseEP>
            ep->open = 0;
 80008fa:	2300      	movs	r3, #0
 80008fc:	f885 30b9 	strb.w	r3, [r5, #185]	; 0xb9
    pas_interface->SetAS_Alternate(new_alt,pas_interface->private_data);
 8000900:	2148      	movs	r1, #72	; 0x48
    pas_interface->alternate=0;
 8000902:	2700      	movs	r7, #0
    pas_interface->SetAS_Alternate(new_alt,pas_interface->private_data);
 8000904:	2000      	movs	r0, #0
 8000906:	fb01 4808 	mla	r8, r1, r8, r4
 800090a:	f8d8 3060 	ldr.w	r3, [r8, #96]	; 0x60
 800090e:	f8d8 1068 	ldr.w	r1, [r8, #104]	; 0x68
 8000912:	4798      	blx	r3
    pas_interface->alternate=0;
 8000914:	f888 7026 	strb.w	r7, [r8, #38]	; 0x26
 8000918:	e79b      	b.n	8000852 <USBD_AUDIO_Setup+0x17a>
    ep->ep_description.data_ep=&pas_interface->data_ep;
 800091a:	f10a 0328 	add.w	r3, sl, #40	; 0x28
    pas_interface->SetAS_Alternate(new_alt,pas_interface->private_data);
 800091e:	4658      	mov	r0, fp
    ep->ep_description.data_ep=&pas_interface->data_ep;
 8000920:	4423      	add	r3, r4
 8000922:	602b      	str	r3, [r5, #0]
    pas_interface->SetAS_Alternate(new_alt,pas_interface->private_data);
 8000924:	2348      	movs	r3, #72	; 0x48
 8000926:	fb03 4808 	mla	r8, r3, r8, r4
 800092a:	f8d8 1068 	ldr.w	r1, [r8, #104]	; 0x68
 800092e:	f8d8 3060 	ldr.w	r3, [r8, #96]	; 0x60
 8000932:	4798      	blx	r3
    ep->max_packet_length=ep->ep_description.data_ep->GetMaxPacketLength(ep->ep_description.data_ep->private_data);
 8000934:	682b      	ldr	r3, [r5, #0]
    pas_interface->alternate=new_alt;
 8000936:	f888 b026 	strb.w	fp, [r8, #38]	; 0x26
     ep->open = 1;
 800093a:	f04f 0b01 	mov.w	fp, #1
    ep->max_packet_length=ep->ep_description.data_ep->GetMaxPacketLength(ep->ep_description.data_ep->private_data);
 800093e:	699a      	ldr	r2, [r3, #24]
 8000940:	6a18      	ldr	r0, [r3, #32]
 8000942:	4790      	blx	r2
    USBD_LL_OpenEP(pdev,
 8000944:	6829      	ldr	r1, [r5, #0]
    ep->max_packet_length=ep->ep_description.data_ep->GetMaxPacketLength(ep->ep_description.data_ep->private_data);
 8000946:	4603      	mov	r3, r0
 8000948:	80e8      	strh	r0, [r5, #6]
    USBD_LL_OpenEP(pdev,
 800094a:	2201      	movs	r2, #1
 800094c:	7809      	ldrb	r1, [r1, #0]
 800094e:	4630      	mov	r0, r6
 8000950:	f001 ff73 	bl	800283a <USBD_LL_OpenEP>
    ep->ep_description.data_ep->buf= ep->ep_description.data_ep->GetBuffer(ep->ep_description.data_ep->private_data,
 8000954:	682b      	ldr	r3, [r5, #0]
     ep->open = 1;
 8000956:	f885 b005 	strb.w	fp, [r5, #5]
    ep->ep_description.data_ep->buf= ep->ep_description.data_ep->GetBuffer(ep->ep_description.data_ep->private_data,
 800095a:	f103 010c 	add.w	r1, r3, #12
 800095e:	695a      	ldr	r2, [r3, #20]
 8000960:	6a18      	ldr	r0, [r3, #32]
 8000962:	9301      	str	r3, [sp, #4]
 8000964:	4790      	blx	r2
 8000966:	9b01      	ldr	r3, [sp, #4]
    if(ep->ep_description.data_ep->ep_num&0x80)  /* IN EP */
 8000968:	682a      	ldr	r2, [r5, #0]
    ep->ep_description.data_ep->buf= ep->ep_description.data_ep->GetBuffer(ep->ep_description.data_ep->private_data,
 800096a:	6098      	str	r0, [r3, #8]
    if(ep->ep_description.data_ep->ep_num&0x80)  /* IN EP */
 800096c:	f992 3000 	ldrsb.w	r3, [r2]
 8000970:	7811      	ldrb	r1, [r2, #0]
 8000972:	2b00      	cmp	r3, #0
 8000974:	da0f      	bge.n	8000996 <USBD_AUDIO_Setup+0x2be>
      USBD_LL_FlushEP(pdev, ep->ep_description.data_ep->ep_num);
 8000976:	4630      	mov	r0, r6
 8000978:	f001 ff82 	bl	8002880 <USBD_LL_FlushEP>
      ep->tx_rx_soffn = USB_SOF_NUMBER();
 800097c:	4b29      	ldr	r3, [pc, #164]	; (8000a24 <USBD_AUDIO_Setup+0x34c>)
                        ep->ep_description.data_ep->ep_num,
 800097e:	6829      	ldr	r1, [r5, #0]
      ep->tx_rx_soffn = USB_SOF_NUMBER();
 8000980:	689b      	ldr	r3, [r3, #8]
      USBD_LL_Transmit(pdev, 
 8000982:	688a      	ldr	r2, [r1, #8]
      ep->tx_rx_soffn = USB_SOF_NUMBER();
 8000984:	f3c3 230d 	ubfx	r3, r3, #8, #14
 8000988:	812b      	strh	r3, [r5, #8]
      USBD_LL_Transmit(pdev, 
 800098a:	898b      	ldrh	r3, [r1, #12]
 800098c:	7809      	ldrb	r1, [r1, #0]
            USBD_LL_Transmit(pdev, sync_ep->ep_num,
 800098e:	4630      	mov	r0, r6
 8000990:	f001 ffa5 	bl	80028de <USBD_LL_Transmit>
 8000994:	e75d      	b.n	8000852 <USBD_AUDIO_Setup+0x17a>
    USBD_LL_PrepareReceive(pdev,
 8000996:	88eb      	ldrh	r3, [r5, #6]
 8000998:	4630      	mov	r0, r6
 800099a:	6892      	ldr	r2, [r2, #8]
 800099c:	f001 ffa6 	bl	80028ec <USBD_LL_PrepareReceive>
    if(pas_interface->synch_enabled)
 80009a0:	f899 304c 	ldrb.w	r3, [r9, #76]	; 0x4c
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	f43f af54 	beq.w	8000852 <USBD_AUDIO_Setup+0x17a>
           ep = &haudio->ep_in[pas_interface->synch_ep.ep_num&0x0F];
 80009aa:	f899 1050 	ldrb.w	r1, [r9, #80]	; 0x50
           ep->ep_description.sync_ep = sync_ep;
 80009ae:	230c      	movs	r3, #12
           USBD_LL_OpenEP(pdev, sync_ep->ep_num,
 80009b0:	465a      	mov	r2, fp
 80009b2:	4630      	mov	r0, r6
           ep = &haudio->ep_in[pas_interface->synch_ep.ep_num&0x0F];
 80009b4:	f001 050f 	and.w	r5, r1, #15
           ep->ep_description.sync_ep = sync_ep;
 80009b8:	fb03 4505 	mla	r5, r3, r5, r4
           sync_ep = &pas_interface->synch_ep;
 80009bc:	f10a 0350 	add.w	r3, sl, #80	; 0x50
            get_usb_full_speed_rate(rate,sync_ep->feedback_data);
 80009c0:	f10a 0a51 	add.w	sl, sl, #81	; 0x51
           sync_ep = &pas_interface->synch_ep;
 80009c4:	4423      	add	r3, r4
           ep->ep_type = USBD_AUDIO_FEEDBACK_EP;
 80009c6:	f885 b0b8 	strb.w	fp, [r5, #184]	; 0xb8
           ep->ep_description.sync_ep = sync_ep;
 80009ca:	f8c5 30b4 	str.w	r3, [r5, #180]	; 0xb4
           ep->max_packet_length = AUDIO_FEEDBACK_EP_PACKET_SIZE;
 80009ce:	2303      	movs	r3, #3
 80009d0:	f8a5 30ba 	strh.w	r3, [r5, #186]	; 0xba
           USBD_LL_OpenEP(pdev, sync_ep->ep_num,
 80009d4:	f001 ff31 	bl	800283a <USBD_LL_OpenEP>
            rate = sync_ep->GetFeedback(sync_ep->private_data);
 80009d8:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
 80009dc:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
            ep->open = 1;
 80009e0:	f885 b0b9 	strb.w	fp, [r5, #185]	; 0xb9
            rate = sync_ep->GetFeedback(sync_ep->private_data);
 80009e4:	4798      	blx	r3
        uint32_t freq =  ((rate << 13) + 62) / 125;
 80009e6:	237d      	movs	r3, #125	; 0x7d
 80009e8:	0340      	lsls	r0, r0, #13
            get_usb_full_speed_rate(rate,sync_ep->feedback_data);
 80009ea:	eb04 020a 	add.w	r2, r4, sl
        uint32_t freq =  ((rate << 13) + 62) / 125;
 80009ee:	303e      	adds	r0, #62	; 0x3e
 80009f0:	fbb0 f0f3 	udiv	r0, r0, r3
        buf[0] =    freq>> 2;
 80009f4:	0883      	lsrs	r3, r0, #2
 80009f6:	f804 300a 	strb.w	r3, [r4, sl]
        buf[1] =    freq>> 10;
 80009fa:	0a83      	lsrs	r3, r0, #10
        buf[2] =    freq>> 18;
 80009fc:	0c80      	lsrs	r0, r0, #18
        buf[1] =    freq>> 10;
 80009fe:	7053      	strb	r3, [r2, #1]
            ep->tx_rx_soffn = USB_SOF_NUMBER();
 8000a00:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <USBD_AUDIO_Setup+0x34c>)
        buf[2] =    freq>> 18;
 8000a02:	7090      	strb	r0, [r2, #2]
            ep->tx_rx_soffn = USB_SOF_NUMBER();
 8000a04:	689b      	ldr	r3, [r3, #8]
            USBD_LL_Transmit(pdev, sync_ep->ep_num,
 8000a06:	f899 1050 	ldrb.w	r1, [r9, #80]	; 0x50
            ep->tx_rx_soffn = USB_SOF_NUMBER();
 8000a0a:	f3c3 230d 	ubfx	r3, r3, #8, #14
 8000a0e:	f8a5 30bc 	strh.w	r3, [r5, #188]	; 0xbc
            USBD_LL_Transmit(pdev, sync_ep->ep_num,
 8000a12:	f8b5 30ba 	ldrh.w	r3, [r5, #186]	; 0xba
 8000a16:	e7ba      	b.n	800098e <USBD_AUDIO_Setup+0x2b6>
        for(int i=0;i<haudio->aud_function.as_interfaces_count;i++)
 8000a18:	f108 0801 	add.w	r8, r8, #1
 8000a1c:	e708      	b.n	8000830 <USBD_AUDIO_Setup+0x158>
 8000a1e:	bf00      	nop
 8000a20:	200001e0 	.word	0x200001e0
 8000a24:	40040800 	.word	0x40040800

08000a28 <USBD_AUDIO_DeInit>:
{
 8000a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    aud_if_cbks =  (USBD_AUDIO_InterfaceCallbacksfTypeDef *)pdev->pUserData;
 8000a2c:	e9d0 59a4 	ldrd	r5, r9, [r0, #656]	; 0x290
{
 8000a30:	4604      	mov	r4, r0
    for(int i=1;i < USBD_AUDIO_MAX_IN_EP; i++)
 8000a32:	2601      	movs	r6, #1
 8000a34:	462f      	mov	r7, r5
    aud_if_cbks =  (USBD_AUDIO_InterfaceCallbacksfTypeDef *)pdev->pUserData;
 8000a36:	46a8      	mov	r8, r5
        haudio->ep_in[i].open = 0;
 8000a38:	f04f 0a00 	mov.w	sl, #0
      if(haudio->ep_in[i].open)
 8000a3c:	f898 30c5 	ldrb.w	r3, [r8, #197]	; 0xc5
 8000a40:	b13b      	cbz	r3, 8000a52 <USBD_AUDIO_DeInit+0x2a>
        USBD_LL_CloseEP(pdev, i|0x80);
 8000a42:	f066 017f 	orn	r1, r6, #127	; 0x7f
 8000a46:	4620      	mov	r0, r4
 8000a48:	b2c9      	uxtb	r1, r1
 8000a4a:	f001 ff01 	bl	8002850 <USBD_LL_CloseEP>
        haudio->ep_in[i].open = 0;
 8000a4e:	f888 a0c5 	strb.w	sl, [r8, #197]	; 0xc5
    for(int i=1;i < USBD_AUDIO_MAX_IN_EP; i++)
 8000a52:	3601      	adds	r6, #1
 8000a54:	f108 080c 	add.w	r8, r8, #12
 8000a58:	2e05      	cmp	r6, #5
 8000a5a:	d1ef      	bne.n	8000a3c <USBD_AUDIO_DeInit+0x14>
    for(int i=1;i < USBD_AUDIO_MAX_OUT_EP; i++)
 8000a5c:	2601      	movs	r6, #1
        haudio->ep_out[i].open = 0;
 8000a5e:	f04f 0800 	mov.w	r8, #0
      if(haudio->ep_out[i].open)
 8000a62:	f897 3101 	ldrb.w	r3, [r7, #257]	; 0x101
 8000a66:	b12b      	cbz	r3, 8000a74 <USBD_AUDIO_DeInit+0x4c>
        USBD_LL_CloseEP(pdev, i);
 8000a68:	b2f1      	uxtb	r1, r6
 8000a6a:	4620      	mov	r0, r4
 8000a6c:	f001 fef0 	bl	8002850 <USBD_LL_CloseEP>
        haudio->ep_out[i].open = 0;
 8000a70:	f887 8101 	strb.w	r8, [r7, #257]	; 0x101
    for(int i=1;i < USBD_AUDIO_MAX_OUT_EP; i++)
 8000a74:	3601      	adds	r6, #1
 8000a76:	370c      	adds	r7, #12
 8000a78:	2e05      	cmp	r6, #5
 8000a7a:	d1f2      	bne.n	8000a62 <USBD_AUDIO_DeInit+0x3a>
   aud_if_cbks->DeInit(&haudio->aud_function,aud_if_cbks->private_data);
 8000a7c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000a80:	4628      	mov	r0, r5
 8000a82:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8000a86:	4798      	blx	r3
    USBD_free(haudio);
 8000a88:	4628      	mov	r0, r5
 8000a8a:	f005 fcb3 	bl	80063f4 <free>
    pdev->pClassData = NULL;
 8000a8e:	2000      	movs	r0, #0
 8000a90:	f8c4 0290 	str.w	r0, [r4, #656]	; 0x290
}
 8000a94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08000a98 <USBD_AUDIO_Init>:
{
 8000a98:	b538      	push	{r3, r4, r5, lr}
 8000a9a:	4604      	mov	r4, r0
  haudio = USBD_malloc(sizeof (USBD_AUDIO_HandleTypeDef));
 8000a9c:	f44f 70be 	mov.w	r0, #380	; 0x17c
 8000aa0:	f005 fca0 	bl	80063e4 <malloc>
  if(haudio == NULL)
 8000aa4:	4605      	mov	r5, r0
 8000aa6:	b190      	cbz	r0, 8000ace <USBD_AUDIO_Init+0x36>
    memset(haudio, 0, sizeof(USBD_AUDIO_HandleTypeDef));
 8000aa8:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8000aac:	2100      	movs	r1, #0
 8000aae:	f005 fcb7 	bl	8006420 <memset>
    aud_if_cbks = (USBD_AUDIO_InterfaceCallbacksfTypeDef *)pdev->pUserData;
 8000ab2:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
    if (aud_if_cbks->Init(&haudio->aud_function,aud_if_cbks->private_data)!= USBD_OK)
 8000ab6:	4628      	mov	r0, r5
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	6919      	ldr	r1, [r3, #16]
 8000abc:	4790      	blx	r2
 8000abe:	b140      	cbz	r0, 8000ad2 <USBD_AUDIO_Init+0x3a>
      USBD_free(pdev->pClassData);
 8000ac0:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
 8000ac4:	f005 fc96 	bl	80063f4 <free>
      pdev->pClassData = 0;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	f8c4 3290 	str.w	r3, [r4, #656]	; 0x290
    return USBD_FAIL; 
 8000ace:	2002      	movs	r0, #2
 8000ad0:	e001      	b.n	8000ad6 <USBD_AUDIO_Init+0x3e>
  pdev->pClassData = haudio;
 8000ad2:	f8c4 5290 	str.w	r5, [r4, #656]	; 0x290
}
 8000ad6:	bd38      	pop	{r3, r4, r5, pc}

08000ad8 <USBD_AUDIO_DataIn>:
{
 8000ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   if(ep->open)
 8000ada:	220c      	movs	r2, #12
   ep = &((USBD_AUDIO_HandleTypeDef*) pdev->pClassData)->ep_in[epnum&0x7F];
 8000adc:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290
 8000ae0:	f001 047f 	and.w	r4, r1, #127	; 0x7f
{
 8000ae4:	4605      	mov	r5, r0
 8000ae6:	460e      	mov	r6, r1
   if(ep->open)
 8000ae8:	fb02 3404 	mla	r4, r2, r4, r3
 8000aec:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d035      	beq.n	8000b60 <USBD_AUDIO_DataIn+0x88>
      if(ep->ep_type==USBD_AUDIO_DATA_EP)
 8000af4:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
 8000af8:	b9bb      	cbnz	r3, 8000b2a <USBD_AUDIO_DataIn+0x52>
          ep->ep_description.data_ep->buf = ep->ep_description.data_ep->GetBuffer(ep->ep_description.data_ep->private_data,
 8000afa:	f8d4 70b4 	ldr.w	r7, [r4, #180]	; 0xb4
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	18b9      	adds	r1, r7, r2
 8000b02:	6a38      	ldr	r0, [r7, #32]
 8000b04:	4798      	blx	r3
          ep->tx_rx_soffn = USB_SOF_NUMBER();
 8000b06:	4b18      	ldr	r3, [pc, #96]	; (8000b68 <USBD_AUDIO_DataIn+0x90>)
                      ep->ep_description.data_ep->buf,
 8000b08:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
          ep->tx_rx_soffn = USB_SOF_NUMBER();
 8000b0c:	689b      	ldr	r3, [r3, #8]
          ep->ep_description.data_ep->buf = ep->ep_description.data_ep->GetBuffer(ep->ep_description.data_ep->private_data,
 8000b0e:	60b8      	str	r0, [r7, #8]
          ep->tx_rx_soffn = USB_SOF_NUMBER();
 8000b10:	f3c3 230d 	ubfx	r3, r3, #8, #14
 8000b14:	f8a4 30bc 	strh.w	r3, [r4, #188]	; 0xbc
          USBD_LL_Transmit(pdev, 
 8000b18:	8993      	ldrh	r3, [r2, #12]
 8000b1a:	6892      	ldr	r2, [r2, #8]
       USBD_LL_Transmit(pdev, 
 8000b1c:	f046 0180 	orr.w	r1, r6, #128	; 0x80
 8000b20:	4628      	mov	r0, r5
 8000b22:	f001 fedc 	bl	80028de <USBD_LL_Transmit>
}
 8000b26:	2000      	movs	r0, #0
 8000b28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     if(ep->ep_type==USBD_AUDIO_FEEDBACK_EP)
 8000b2a:	2b01      	cmp	r3, #1
 8000b2c:	d1fb      	bne.n	8000b26 <USBD_AUDIO_DataIn+0x4e>
       USBD_AUDIO_EP_SynchTypeDef* sync_ep=ep->ep_description.sync_ep;
 8000b2e:	f8d4 70b4 	ldr.w	r7, [r4, #180]	; 0xb4
       rate = sync_ep->GetFeedback(sync_ep->private_data);
 8000b32:	e9d7 3001 	ldrd	r3, r0, [r7, #4]
 8000b36:	4798      	blx	r3
        uint32_t freq =  ((rate << 13) + 62) / 125;
 8000b38:	0343      	lsls	r3, r0, #13
 8000b3a:	207d      	movs	r0, #125	; 0x7d
 8000b3c:	333e      	adds	r3, #62	; 0x3e
 8000b3e:	fbb3 f3f0 	udiv	r3, r3, r0
        buf[0] =    freq>> 2;
 8000b42:	089a      	lsrs	r2, r3, #2
 8000b44:	707a      	strb	r2, [r7, #1]
        buf[1] =    freq>> 10;
 8000b46:	0a9a      	lsrs	r2, r3, #10
        buf[2] =    freq>> 18;
 8000b48:	0c9b      	lsrs	r3, r3, #18
        buf[1] =    freq>> 10;
 8000b4a:	70ba      	strb	r2, [r7, #2]
       USBD_LL_Transmit(pdev, 
 8000b4c:	1c7a      	adds	r2, r7, #1
        buf[2] =    freq>> 18;
 8000b4e:	70fb      	strb	r3, [r7, #3]
       ep->tx_rx_soffn = USB_SOF_NUMBER();
 8000b50:	4b05      	ldr	r3, [pc, #20]	; (8000b68 <USBD_AUDIO_DataIn+0x90>)
 8000b52:	689b      	ldr	r3, [r3, #8]
 8000b54:	f3c3 230d 	ubfx	r3, r3, #8, #14
 8000b58:	f8a4 30bc 	strh.w	r3, [r4, #188]	; 0xbc
       USBD_LL_Transmit(pdev, 
 8000b5c:	2303      	movs	r3, #3
 8000b5e:	e7dd      	b.n	8000b1c <USBD_AUDIO_DataIn+0x44>
     USBD_error_handler();
 8000b60:	f001 fcab 	bl	80024ba <USBD_error_handler>
 8000b64:	e7df      	b.n	8000b26 <USBD_AUDIO_DataIn+0x4e>
 8000b66:	bf00      	nop
 8000b68:	40040800 	.word	0x40040800

08000b6c <USBD_AUDIO_RegisterInterface>:
* @param  fops: Audio interface callback
* @retval status
*/
uint8_t  USBD_AUDIO_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                        USBD_AUDIO_InterfaceCallbacksfTypeDef *aifc)
{
 8000b6c:	b508      	push	{r3, lr}
  if(aifc != NULL)
 8000b6e:	b131      	cbz	r1, 8000b7e <USBD_AUDIO_RegisterInterface+0x12>
  {
    pdev->pUserData= aifc;
 8000b70:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
    aifc->GetConfigDesc(&USBD_AUDIO_CfgDesc, &USBD_AUDIO_CfgDescSize, aifc->private_data);
 8000b74:	688b      	ldr	r3, [r1, #8]
 8000b76:	690a      	ldr	r2, [r1, #16]
 8000b78:	4902      	ldr	r1, [pc, #8]	; (8000b84 <USBD_AUDIO_RegisterInterface+0x18>)
 8000b7a:	1d08      	adds	r0, r1, #4
 8000b7c:	4798      	blx	r3
    
  }
  return 0;
}
 8000b7e:	2000      	movs	r0, #0
 8000b80:	bd08      	pop	{r3, pc}
 8000b82:	bf00      	nop
 8000b84:	200001e0 	.word	0x200001e0

08000b88 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8000b88:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8000b8a:	b180      	cbz	r0, 8000bae <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8000b8c:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8000b90:	b113      	cbz	r3, 8000b98 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	f8c0 328c 	str.w	r3, [r0, #652]	; 0x28c
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8000b98:	b109      	cbz	r1, 8000b9e <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8000b9a:	f8c0 1288 	str.w	r1, [r0, #648]	; 0x288
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8000b9e:	2301      	movs	r3, #1
  pdev->id = id;
 8000ba0:	7002      	strb	r2, [r0, #0]
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8000ba2:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8000ba6:	f001 fe01 	bl	80027ac <USBD_LL_Init>
  
  return USBD_OK; 
 8000baa:	2000      	movs	r0, #0
}
 8000bac:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 8000bae:	2002      	movs	r0, #2
 8000bb0:	e7fc      	b.n	8000bac <USBD_Init+0x24>

08000bb2 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8000bb2:	b119      	cbz	r1, 8000bbc <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8000bb4:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
    status = USBD_OK;
 8000bb8:	2000      	movs	r0, #0
 8000bba:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8000bbc:	2002      	movs	r0, #2
  }
  
  return status;
}
 8000bbe:	4770      	bx	lr

08000bc0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8000bc0:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8000bc2:	f001 fe33 	bl	800282c <USBD_LL_Start>
  
  return USBD_OK;  
}
 8000bc6:	2000      	movs	r0, #0
 8000bc8:	bd08      	pop	{r3, pc}

08000bca <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8000bca:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 8000bcc:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8000bd0:	b90b      	cbnz	r3, 8000bd6 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8000bd2:	2002      	movs	r0, #2
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 8000bd4:	bd08      	pop	{r3, pc}
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4798      	blx	r3
 8000bda:	2800      	cmp	r0, #0
 8000bdc:	d0fa      	beq.n	8000bd4 <USBD_SetClassConfig+0xa>
 8000bde:	e7f8      	b.n	8000bd2 <USBD_SetClassConfig+0x8>

08000be0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8000be0:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8000be2:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	4798      	blx	r3
  return USBD_OK;
}
 8000bea:	2000      	movs	r0, #0
 8000bec:	bd08      	pop	{r3, pc}

08000bee <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8000bee:	b538      	push	{r3, r4, r5, lr}

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8000bf0:	f500 7520 	add.w	r5, r0, #640	; 0x280
{
 8000bf4:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8000bf6:	4628      	mov	r0, r5
 8000bf8:	f005 fb54 	bl	80062a4 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8000bfc:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 8000bfe:	f894 1280 	ldrb.w	r1, [r4, #640]	; 0x280
  pdev->ep0_state = USBD_EP0_SETUP;
 8000c02:	f8c4 326c 	str.w	r3, [r4, #620]	; 0x26c
  pdev->ep0_data_len = pdev->request.wLength;
 8000c06:	f8b4 3286 	ldrh.w	r3, [r4, #646]	; 0x286
 8000c0a:	f8c4 3270 	str.w	r3, [r4, #624]	; 0x270
  switch (pdev->request.bmRequest & 0x1F) 
 8000c0e:	f001 031f 	and.w	r3, r1, #31
 8000c12:	2b01      	cmp	r3, #1
 8000c14:	d008      	beq.n	8000c28 <USBD_LL_SetupStage+0x3a>
 8000c16:	2b02      	cmp	r3, #2
 8000c18:	d00b      	beq.n	8000c32 <USBD_LL_SetupStage+0x44>
 8000c1a:	b97b      	cbnz	r3, 8000c3c <USBD_LL_SetupStage+0x4e>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 8000c1c:	4629      	mov	r1, r5
 8000c1e:	4620      	mov	r0, r4
 8000c20:	f005 f974 	bl	8005f0c <USBD_StdDevReq>
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
    break;
  }  
  return USBD_OK;  
}
 8000c24:	2000      	movs	r0, #0
 8000c26:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 8000c28:	4629      	mov	r1, r5
 8000c2a:	4620      	mov	r0, r4
 8000c2c:	f005 fa8c 	bl	8006148 <USBD_StdItfReq>
    break;
 8000c30:	e7f8      	b.n	8000c24 <USBD_LL_SetupStage+0x36>
    USBD_StdEPReq(pdev, &pdev->request);   
 8000c32:	4629      	mov	r1, r5
 8000c34:	4620      	mov	r0, r4
 8000c36:	f005 faab 	bl	8006190 <USBD_StdEPReq>
    break;
 8000c3a:	e7f3      	b.n	8000c24 <USBD_LL_SetupStage+0x36>
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8000c3c:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8000c40:	4620      	mov	r0, r4
 8000c42:	f001 fe24 	bl	800288e <USBD_LL_StallEP>
    break;
 8000c46:	e7ed      	b.n	8000c24 <USBD_LL_SetupStage+0x36>

08000c48 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8000c48:	b538      	push	{r3, r4, r5, lr}
 8000c4a:	4604      	mov	r4, r0
 8000c4c:	4615      	mov	r5, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8000c4e:	bb01      	cbnz	r1, 8000c92 <USBD_LL_DataOutStage+0x4a>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8000c50:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 8000c54:	2b03      	cmp	r3, #3
 8000c56:	d10d      	bne.n	8000c74 <USBD_LL_DataOutStage+0x2c>
    {
      if(pep->rem_length > pep->maxpacket)
 8000c58:	e9d0 1353 	ldrd	r1, r3, [r0, #332]	; 0x14c
 8000c5c:	4299      	cmp	r1, r3
 8000c5e:	d90b      	bls.n	8000c78 <USBD_LL_DataOutStage+0x30>
      {
        pep->rem_length -=  pep->maxpacket;
 8000c60:	1ac9      	subs	r1, r1, r3
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 8000c62:	428b      	cmp	r3, r1
        pep->rem_length -=  pep->maxpacket;
 8000c64:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
                            MIN(pep->rem_length ,pep->maxpacket));
 8000c68:	bf28      	it	cs
 8000c6a:	460b      	movcs	r3, r1
        USBD_CtlContinueRx (pdev, 
 8000c6c:	4629      	mov	r1, r5
 8000c6e:	b29a      	uxth	r2, r3
 8000c70:	f005 fb75 	bl	800635e <USBD_CtlContinueRx>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 8000c74:	2000      	movs	r0, #0
 8000c76:	bd38      	pop	{r3, r4, r5, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8000c78:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8000c7c:	691b      	ldr	r3, [r3, #16]
 8000c7e:	b123      	cbz	r3, 8000c8a <USBD_LL_DataOutStage+0x42>
 8000c80:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8000c84:	2a03      	cmp	r2, #3
 8000c86:	d100      	bne.n	8000c8a <USBD_LL_DataOutStage+0x42>
          pdev->pClass->EP0_RxReady(pdev); 
 8000c88:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8000c8a:	4620      	mov	r0, r4
 8000c8c:	f005 fb6f 	bl	800636e <USBD_CtlSendStatus>
 8000c90:	e7f0      	b.n	8000c74 <USBD_LL_DataOutStage+0x2c>
  else if((pdev->pClass->DataOut != NULL)&&
 8000c92:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d0eb      	beq.n	8000c74 <USBD_LL_DataOutStage+0x2c>
 8000c9c:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8000ca0:	2a03      	cmp	r2, #3
 8000ca2:	d1e7      	bne.n	8000c74 <USBD_LL_DataOutStage+0x2c>
    pdev->pClass->DataOut(pdev, epnum); 
 8000ca4:	4798      	blx	r3
 8000ca6:	e7e5      	b.n	8000c74 <USBD_LL_DataOutStage+0x2c>

08000ca8 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8000ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000caa:	4604      	mov	r4, r0
 8000cac:	4613      	mov	r3, r2
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8000cae:	460f      	mov	r7, r1
 8000cb0:	2900      	cmp	r1, #0
 8000cb2:	d13d      	bne.n	8000d30 <USBD_LL_DataInStage+0x88>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8000cb4:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 8000cb8:	2a02      	cmp	r2, #2
 8000cba:	d10f      	bne.n	8000cdc <USBD_LL_DataInStage+0x34>
    {
      if(pep->rem_length > pep->maxpacket)
 8000cbc:	e9d0 5608 	ldrd	r5, r6, [r0, #32]
 8000cc0:	42b5      	cmp	r5, r6
 8000cc2:	d914      	bls.n	8000cee <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -=  pep->maxpacket;
 8000cc4:	1bae      	subs	r6, r5, r6
        
        USBD_CtlContinueSendData (pdev, 
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	b2b2      	uxth	r2, r6
        pep->rem_length -=  pep->maxpacket;
 8000cca:	6206      	str	r6, [r0, #32]
        USBD_CtlContinueSendData (pdev, 
 8000ccc:	f005 fb32 	bl	8006334 <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8000cd0:	463b      	mov	r3, r7
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
          pdev->ep0_data_len = 0;
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4620      	mov	r0, r4
 8000cd8:	f001 fe08 	bl	80028ec <USBD_LL_PrepareReceive>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8000cdc:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d102      	bne.n	8000cea <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	f884 3278 	strb.w	r3, [r4, #632]	; 0x278
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 8000cea:	2000      	movs	r0, #0
 8000cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((pep->total_length % pep->maxpacket == 0) &&
 8000cee:	69c3      	ldr	r3, [r0, #28]
 8000cf0:	fbb3 f5f6 	udiv	r5, r3, r6
 8000cf4:	fb06 3515 	mls	r5, r6, r5, r3
 8000cf8:	b965      	cbnz	r5, 8000d14 <USBD_LL_DataInStage+0x6c>
 8000cfa:	429e      	cmp	r6, r3
 8000cfc:	d80a      	bhi.n	8000d14 <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 8000cfe:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d206      	bcs.n	8000d14 <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8000d06:	462a      	mov	r2, r5
 8000d08:	f005 fb14 	bl	8006334 <USBD_CtlContinueSendData>
        USBD_LL_PrepareReceive (pdev,
 8000d0c:	462b      	mov	r3, r5
          pdev->ep0_data_len = 0;
 8000d0e:	f8c4 5270 	str.w	r5, [r4, #624]	; 0x270
        USBD_LL_PrepareReceive (pdev,
 8000d12:	e7de      	b.n	8000cd2 <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8000d14:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8000d18:	68db      	ldr	r3, [r3, #12]
 8000d1a:	b12b      	cbz	r3, 8000d28 <USBD_LL_DataInStage+0x80>
 8000d1c:	f894 2274 	ldrb.w	r2, [r4, #628]	; 0x274
 8000d20:	2a03      	cmp	r2, #3
 8000d22:	d101      	bne.n	8000d28 <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev); 
 8000d24:	4620      	mov	r0, r4
 8000d26:	4798      	blx	r3
          USBD_CtlReceiveStatus(pdev);
 8000d28:	4620      	mov	r0, r4
 8000d2a:	f005 fb2b 	bl	8006384 <USBD_CtlReceiveStatus>
 8000d2e:	e7d5      	b.n	8000cdc <USBD_LL_DataInStage+0x34>
  else if((pdev->pClass->DataIn != NULL)&& 
 8000d30:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8000d34:	695b      	ldr	r3, [r3, #20]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d0d7      	beq.n	8000cea <USBD_LL_DataInStage+0x42>
 8000d3a:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8000d3e:	2a03      	cmp	r2, #3
 8000d40:	d1d3      	bne.n	8000cea <USBD_LL_DataInStage+0x42>
    pdev->pClass->DataIn(pdev, epnum); 
 8000d42:	4798      	blx	r3
 8000d44:	e7d1      	b.n	8000cea <USBD_LL_DataInStage+0x42>

08000d46 <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8000d46:	2200      	movs	r2, #0
{
 8000d48:	b538      	push	{r3, r4, r5, lr}
 8000d4a:	4604      	mov	r4, r0
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8000d4c:	2540      	movs	r5, #64	; 0x40
  USBD_LL_OpenEP(pdev,
 8000d4e:	4611      	mov	r1, r2
 8000d50:	2340      	movs	r3, #64	; 0x40
 8000d52:	f001 fd72 	bl	800283a <USBD_LL_OpenEP>
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8000d56:	462b      	mov	r3, r5
 8000d58:	2200      	movs	r2, #0
 8000d5a:	2180      	movs	r1, #128	; 0x80
 8000d5c:	4620      	mov	r0, r4
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8000d5e:	f8c4 5150 	str.w	r5, [r4, #336]	; 0x150
  USBD_LL_OpenEP(pdev,
 8000d62:	f001 fd6a 	bl	800283a <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8000d66:	2301      	movs	r3, #1
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8000d68:	6265      	str	r5, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 8000d6a:	f884 3274 	strb.w	r3, [r4, #628]	; 0x274
  
  if (pdev->pClassData) 
 8000d6e:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
 8000d72:	b12b      	cbz	r3, 8000d80 <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8000d74:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8000d78:	4620      	mov	r0, r4
 8000d7a:	7921      	ldrb	r1, [r4, #4]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	4798      	blx	r3
 
  
  return USBD_OK;
}
 8000d80:	2000      	movs	r0, #0
 8000d82:	bd38      	pop	{r3, r4, r5, pc}

08000d84 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8000d84:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 8000d86:	2000      	movs	r0, #0
 8000d88:	4770      	bx	lr

08000d8a <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8000d8a:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8000d8e:	f880 3275 	strb.w	r3, [r0, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8000d92:	2304      	movs	r3, #4
 8000d94:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 8000d98:	2000      	movs	r0, #0
 8000d9a:	4770      	bx	lr

08000d9c <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 8000d9c:	f890 3275 	ldrb.w	r3, [r0, #629]	; 0x275
 8000da0:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 8000da4:	2000      	movs	r0, #0
 8000da6:	4770      	bx	lr

08000da8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8000da8:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8000daa:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8000dae:	2a03      	cmp	r2, #3
 8000db0:	d104      	bne.n	8000dbc <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 8000db2:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8000db6:	69db      	ldr	r3, [r3, #28]
 8000db8:	b103      	cbz	r3, 8000dbc <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8000dba:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8000dbc:	2000      	movs	r0, #0
 8000dbe:	bd08      	pop	{r3, pc}

08000dc0 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8000dc0:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8000dc2:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8000dc6:	2a03      	cmp	r2, #3
 8000dc8:	d104      	bne.n	8000dd4 <USBD_LL_IsoINIncomplete+0x14>
  {
    if(pdev->pClass->IsoINIncomplete != NULL)
 8000dca:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8000dce:	6a1b      	ldr	r3, [r3, #32]
 8000dd0:	b103      	cbz	r3, 8000dd4 <USBD_LL_IsoINIncomplete+0x14>
    {
      pdev->pClass->IsoINIncomplete(pdev,epnum);
 8000dd2:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8000dd4:	2000      	movs	r0, #0
 8000dd6:	bd08      	pop	{r3, pc}

08000dd8 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8000dd8:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8000dda:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8000dde:	2a03      	cmp	r2, #3
 8000de0:	d104      	bne.n	8000dec <USBD_LL_IsoOUTIncomplete+0x14>
  {
    if(pdev->pClass->IsoOUTIncomplete != NULL)
 8000de2:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8000de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000de8:	b103      	cbz	r3, 8000dec <USBD_LL_IsoOUTIncomplete+0x14>
    {
      pdev->pClass->IsoOUTIncomplete(pdev,epnum);
 8000dea:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8000dec:	2000      	movs	r0, #0
 8000dee:	bd08      	pop	{r3, pc}

08000df0 <USBD_LL_DevConnected>:
 8000df0:	2000      	movs	r0, #0
 8000df2:	4770      	bx	lr

08000df4 <USBD_LL_DevDisconnected>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8000df4:	2201      	movs	r2, #1
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8000df6:	7901      	ldrb	r1, [r0, #4]
{
 8000df8:	b508      	push	{r3, lr}
  pdev->dev_state = USBD_STATE_DEFAULT;
 8000dfa:	f880 2274 	strb.w	r2, [r0, #628]	; 0x274
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8000dfe:	f8d0 228c 	ldr.w	r2, [r0, #652]	; 0x28c
 8000e02:	6852      	ldr	r2, [r2, #4]
 8000e04:	4790      	blx	r2
   
  return USBD_OK;
}
 8000e06:	2000      	movs	r0, #0
 8000e08:	bd08      	pop	{r3, pc}

08000e0a <USB_AudioStreamingInputOutputDeInit>:
  * @param  node_handle(IN): the node handle, node must be allocated
  * @retval  0 for no error
  */
 static int8_t  USB_AudioStreamingInputOutputDeInit(uint32_t node_handle)
{
  ((AUDIO_USBInputOutputNode_t *)node_handle)->node.state = AUDIO_NODE_OFF;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	7003      	strb	r3, [r0, #0]
  return 0;
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	4770      	bx	lr

08000e12 <USB_AudioStreamingInputOutputStart>:
static int8_t  USB_AudioStreamingInputOutputStart( AUDIO_CircularBuffer_t* buffer, uint16_t threshold ,uint32_t node_handle)
{
  AUDIO_USBInputOutputNode_t * io_node;

  io_node = (AUDIO_USBInputOutputNode_t *)node_handle;
  if((io_node->node.state == AUDIO_NODE_INITIALIZED ) ||(io_node->node.state == AUDIO_NODE_STOPPED))
 8000e12:	7813      	ldrb	r3, [r2, #0]
 8000e14:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d108      	bne.n	8000e2e <USB_AudioStreamingInputOutputStart+0x1c>
  {
     io_node->node.state = AUDIO_NODE_STARTED;
 8000e1c:	2302      	movs	r3, #2
     io_node->buf = buffer;
 8000e1e:	6190      	str	r0, [r2, #24]
     io_node->node.state = AUDIO_NODE_STARTED;
 8000e20:	7013      	strb	r3, [r2, #0]
     io_node->buf->rd_ptr = io_node->buf->wr_ptr=0;
 8000e22:	2300      	movs	r3, #0
 8000e24:	6043      	str	r3, [r0, #4]
     io_node->flags = 0;
 8000e26:	7513      	strb	r3, [r2, #20]
     if(io_node->node.type == AUDIO_INPUT)
 8000e28:	7a13      	ldrb	r3, [r2, #8]
 8000e2a:	b903      	cbnz	r3, 8000e2e <USB_AudioStreamingInputOutputStart+0x1c>
     {
       io_node->specific.input.threshold = threshold;
 8000e2c:	8611      	strh	r1, [r2, #48]	; 0x30
       }
#endif /* USB_AUDIO_CONFIG_RECORD_USE_FREQ_44_1_K */
     }
  }
  return 0;
}
 8000e2e:	2000      	movs	r0, #0
 8000e30:	4770      	bx	lr

08000e32 <USB_AudioStreamingInputOutputStop>:
  */
static int8_t  USB_AudioStreamingInputOutputStop( uint32_t node_handle)
{
  AUDIO_USBInputOutputNode_t * io_node;
  io_node = (AUDIO_USBInputOutputNode_t *)node_handle;
  io_node->node.state = AUDIO_NODE_STOPPED;
 8000e32:	2303      	movs	r3, #3
 8000e34:	7003      	strb	r3, [r0, #0]
  return 0;
}
 8000e36:	2000      	movs	r0, #0
 8000e38:	4770      	bx	lr

08000e3a <USB_AudioStreamingInputOutputRestart>:
  */
static int8_t  USB_AudioStreamingInputOutputRestart( uint32_t node_handle)
{
  AUDIO_USBInputOutputNode_t * io_node;
  io_node = (AUDIO_USBInputOutputNode_t *)node_handle;
  if(io_node->node.state == AUDIO_NODE_STARTED)
 8000e3a:	7803      	ldrb	r3, [r0, #0]
 8000e3c:	2b02      	cmp	r3, #2
  {
    io_node->flags = AUDIO_IO_RESTART_REQUIRED;   /* this flag to stop node when next time USB Audio class calls the node via callback*/
 8000e3e:	bf04      	itt	eq
 8000e40:	2340      	moveq	r3, #64	; 0x40
 8000e42:	7503      	strbeq	r3, [r0, #20]
    return 0;
  }
  return 0;
}
 8000e44:	2000      	movs	r0, #0
 8000e46:	4770      	bx	lr

08000e48 <USB_AudioStreamingInputOutputGetMaxPacketLength>:
*/
static uint16_t  USB_AudioStreamingInputOutputGetMaxPacketLength(uint32_t node_handle)
{
  
  return ((AUDIO_USBInputOutputNode_t *)node_handle)->max_packet_length;
}
 8000e48:	8b80      	ldrh	r0, [r0, #28]
 8000e4a:	4770      	bx	lr

08000e4c <USB_AudioStreamingInputOutputGetState>:
  * @retval  0
*/
static int8_t  USB_AudioStreamingInputOutputGetState(uint32_t node_handle)
{
  return 0;
}
 8000e4c:	2000      	movs	r0, #0
 8000e4e:	4770      	bx	lr

08000e50 <USB_AudioStreamingFeatureUnitDInit>:
  * @param  node_handle: the node handle, node must be Initialized
  * @retval  0 for no error
  */
static int8_t USB_AudioStreamingFeatureUnitDInit(uint32_t node_handle)
{
  ((AUDIO_USB_CF_NodeTypeDef*)node_handle)->node.state = AUDIO_NODE_OFF;
 8000e50:	2300      	movs	r3, #0
 8000e52:	7003      	strb	r3, [r0, #0]
  return 0;
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	4770      	bx	lr

08000e58 <USB_AudioStreamingFeatureUnitStart>:
  * @param  commands(IN): list of callback to execute controls like setvolume and mute. this function depends on codec and microphone.
  * @param  node_handle(IN): the node handle, node must be allocated
  * @retval  0 for no error
  */
static int8_t USB_AudioStreamingFeatureUnitStart(AUDIO_USBFeatureUnitCommands_t* commands, uint32_t node_handle)
{
 8000e58:	460b      	mov	r3, r1
 8000e5a:	b510      	push	{r4, lr}
  AUDIO_USB_CF_NodeTypeDef *cf;
  
  cf = (AUDIO_USB_CF_NodeTypeDef*)node_handle;
  cf->control_cbks = *commands;
 8000e5c:	f101 0434 	add.w	r4, r1, #52	; 0x34
 8000e60:	c807      	ldmia	r0, {r0, r1, r2}
 8000e62:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  cf->node.state = AUDIO_NODE_STARTED;
 8000e66:	2202      	movs	r2, #2
  
  if(cf->control_cbks.SetCurrentVolume)
 8000e68:	6b9c      	ldr	r4, [r3, #56]	; 0x38
  cf->node.state = AUDIO_NODE_STARTED;
 8000e6a:	701a      	strb	r2, [r3, #0]
  if(cf->control_cbks.SetCurrentVolume)
 8000e6c:	b124      	cbz	r4, 8000e78 <USB_AudioStreamingFeatureUnitStart+0x20>
  {
    cf->control_cbks.SetCurrentVolume(0, 
 8000e6e:	6859      	ldr	r1, [r3, #4]
 8000e70:	2000      	movs	r0, #0
 8000e72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e74:	68c9      	ldr	r1, [r1, #12]
 8000e76:	47a0      	blx	r4
                                      cf->node.audio_description->audio_volume_db_256,
                                      cf->control_cbks.private_data);
  }
  return 0;
}
 8000e78:	2000      	movs	r0, #0
 8000e7a:	bd10      	pop	{r4, pc}

08000e7c <USB_AudioStreamingFeatureUnitStop>:
{
  /* @TODO develop feature */
  AUDIO_USB_CF_NodeTypeDef * cf;
  
  cf = (AUDIO_USB_CF_NodeTypeDef*)node_handle;
  cf->node.state = AUDIO_NODE_STOPPED;
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	7003      	strb	r3, [r0, #0]
  return 0;
}
 8000e80:	2000      	movs	r0, #0
 8000e82:	4770      	bx	lr

08000e84 <USB_AudioStreamingFeatureUnitGetMute>:
  * @retval  0 for no error
  */
static int8_t USB_AudioStreamingFeatureUnitGetMute(uint16_t channel, uint8_t* mute, uint32_t node_handle)
{
  /**@TODO add channel management  */
  *mute = ((AUDIO_USB_CF_NodeTypeDef*)node_handle)->node.audio_description->audio_mute; 
 8000e84:	6853      	ldr	r3, [r2, #4]
  return 0; 
}
 8000e86:	2000      	movs	r0, #0
  *mute = ((AUDIO_USB_CF_NodeTypeDef*)node_handle)->node.audio_description->audio_mute; 
 8000e88:	7c1b      	ldrb	r3, [r3, #16]
 8000e8a:	700b      	strb	r3, [r1, #0]
}
 8000e8c:	4770      	bx	lr

08000e8e <USB_AudioStreamingFeatureUnitSetMute>:
  * @param  mute:  mute value
  * @param  node_handle: the Feature node handle, node must be initialized
  * @retval  0 for no error
  */
static int8_t USB_AudioStreamingFeatureUnitSetMute(uint16_t channel, uint8_t mute, uint32_t node_handle)
{
 8000e8e:	b508      	push	{r3, lr}
  AUDIO_USB_CF_NodeTypeDef * cf;
  
  cf = (AUDIO_USB_CF_NodeTypeDef*)node_handle;
  /**@TODO add channel management  */
  
  cf->node.audio_description->audio_mute = mute;
 8000e90:	6853      	ldr	r3, [r2, #4]
 8000e92:	7419      	strb	r1, [r3, #16]
  if((cf->node.state == AUDIO_NODE_STARTED)&&(cf->control_cbks.SetMute))
 8000e94:	7813      	ldrb	r3, [r2, #0]
 8000e96:	2b02      	cmp	r3, #2
 8000e98:	d103      	bne.n	8000ea2 <USB_AudioStreamingFeatureUnitSetMute+0x14>
 8000e9a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8000e9c:	b10b      	cbz	r3, 8000ea2 <USB_AudioStreamingFeatureUnitSetMute+0x14>
  {
      cf->control_cbks.SetMute(channel, mute, cf->control_cbks.private_data);
 8000e9e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8000ea0:	4798      	blx	r3
  }
  return 0;
}
 8000ea2:	2000      	movs	r0, #0
 8000ea4:	bd08      	pop	{r3, pc}

08000ea6 <USB_AudioStreamingFeatureUnitGetCurVolume>:
  * @retval  0 for no error
  */
static int8_t USB_AudioStreamingFeatureUnitGetCurVolume(uint16_t channel, uint16_t* volume, uint32_t node_handle)
{
  /**@TODO add channel management  */
  VOLUME_DB_256_TO_USB(*volume, ((AUDIO_Node_t*)node_handle)->audio_description->audio_volume_db_256);
 8000ea6:	6853      	ldr	r3, [r2, #4]
  return 0; 
}
 8000ea8:	2000      	movs	r0, #0
  VOLUME_DB_256_TO_USB(*volume, ((AUDIO_Node_t*)node_handle)->audio_description->audio_volume_db_256);
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	800b      	strh	r3, [r1, #0]
}
 8000eae:	4770      	bx	lr

08000eb0 <USB_AudioStreamingFeatureUnitSetCurVolume>:
  * @param  volume:             volume value
  * @param  node_handle:        the Feature node handle, node must be initialized
  * @retval  0 for no error
  */
static int8_t USB_AudioStreamingFeatureUnitSetCurVolume(uint16_t channel, uint16_t volume, uint32_t node_handle)
{
 8000eb0:	b508      	push	{r3, lr}
  AUDIO_USB_CF_NodeTypeDef* cf;
  
  cf = (AUDIO_USB_CF_NodeTypeDef*)node_handle;
  /**@TODO add channel management  */
  
  VOLUME_USB_TO_DB_256(cf->node.audio_description->audio_volume_db_256, volume);
 8000eb2:	040b      	lsls	r3, r1, #16
 8000eb4:	6853      	ldr	r3, [r2, #4]
 8000eb6:	bf48      	it	mi
 8000eb8:	f5a1 3180 	submi.w	r1, r1, #65536	; 0x10000
 8000ebc:	60d9      	str	r1, [r3, #12]
  if((cf->node.state == AUDIO_NODE_STARTED)&&(cf->control_cbks.SetCurrentVolume))
 8000ebe:	7813      	ldrb	r3, [r2, #0]
 8000ec0:	2b02      	cmp	r3, #2
 8000ec2:	d103      	bne.n	8000ecc <USB_AudioStreamingFeatureUnitSetCurVolume+0x1c>
 8000ec4:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8000ec6:	b10b      	cbz	r3, 8000ecc <USB_AudioStreamingFeatureUnitSetCurVolume+0x1c>
  {
    cf->control_cbks.SetCurrentVolume(channel, 
 8000ec8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8000eca:	4798      	blx	r3
                                      cf->node.audio_description->audio_volume_db_256,
                                      cf->control_cbks.private_data);
  }
  return 0;
}
 8000ecc:	2000      	movs	r0, #0
 8000ece:	bd08      	pop	{r3, pc}

08000ed0 <USB_AudioStreamingInputGetBuffer>:
{
 8000ed0:	b510      	push	{r4, lr}
 8000ed2:	4604      	mov	r4, r0
  *max_packet_length = input_node->max_packet_length;
 8000ed4:	8b80      	ldrh	r0, [r0, #28]
 8000ed6:	8008      	strh	r0, [r1, #0]
  if( input_node->node.state == AUDIO_NODE_STARTED)
 8000ed8:	7823      	ldrb	r3, [r4, #0]
 8000eda:	2b02      	cmp	r3, #2
 8000edc:	d11a      	bne.n	8000f14 <USB_AudioStreamingInputGetBuffer+0x44>
    buffer_free_size  = AUDIO_BUFFER_FREE_SIZE(input_node->buf);
 8000ede:	69a1      	ldr	r1, [r4, #24]
 8000ee0:	888b      	ldrh	r3, [r1, #4]
 8000ee2:	88ca      	ldrh	r2, [r1, #6]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	bf24      	itt	cs
 8000ee8:	8909      	ldrhcs	r1, [r1, #8]
 8000eea:	185b      	addcs	r3, r3, r1
 8000eec:	1a9b      	subs	r3, r3, r2
 8000eee:	b29b      	uxth	r3, r3
    if(buffer_free_size < input_node->max_packet_length)
 8000ef0:	4298      	cmp	r0, r3
 8000ef2:	d904      	bls.n	8000efe <USB_AudioStreamingInputGetBuffer+0x2e>
      input_node->node.session_handle->SessionCallback(AUDIO_OVERRUN, (AUDIO_Node_t*)input_node,
 8000ef4:	68e2      	ldr	r2, [r4, #12]
 8000ef6:	4621      	mov	r1, r4
 8000ef8:	2004      	movs	r0, #4
 8000efa:	6893      	ldr	r3, [r2, #8]
 8000efc:	4798      	blx	r3
    if(input_node->flags&AUDIO_IO_RESTART_REQUIRED)
 8000efe:	7d22      	ldrb	r2, [r4, #20]
 8000f00:	69a3      	ldr	r3, [r4, #24]
 8000f02:	0652      	lsls	r2, r2, #25
     input_node->flags = 0;
 8000f04:	bf42      	ittt	mi
 8000f06:	2200      	movmi	r2, #0
 8000f08:	7522      	strbmi	r2, [r4, #20]
     input_node->buf->rd_ptr = input_node->buf->wr_ptr = 0;
 8000f0a:	605a      	strmi	r2, [r3, #4]
    return input_node->buf->data+input_node->buf->wr_ptr;
 8000f0c:	6818      	ldr	r0, [r3, #0]
 8000f0e:	88da      	ldrh	r2, [r3, #6]
 8000f10:	4410      	add	r0, r2
}
 8000f12:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000f14:	f001 fad0 	bl	80024b8 <Error_Handler>
    return 0; /* return statement non reachable */
 8000f18:	2000      	movs	r0, #0
 8000f1a:	e7fa      	b.n	8000f12 <USB_AudioStreamingInputGetBuffer+0x42>

08000f1c <USB_AudioStreamingInputDataReceived>:
 {
 8000f1c:	b538      	push	{r3, r4, r5, lr}
   if(input_node->node.state == AUDIO_NODE_STARTED)
 8000f1e:	780b      	ldrb	r3, [r1, #0]
 {
 8000f20:	460c      	mov	r4, r1
   if(input_node->node.state == AUDIO_NODE_STARTED)
 8000f22:	2b02      	cmp	r3, #2
 8000f24:	d142      	bne.n	8000fac <USB_AudioStreamingInputDataReceived+0x90>
     if(input_node->flags&AUDIO_IO_RESTART_REQUIRED)
 8000f26:	7d0b      	ldrb	r3, [r1, #20]
 8000f28:	698d      	ldr	r5, [r1, #24]
 8000f2a:	065a      	lsls	r2, r3, #25
 8000f2c:	d504      	bpl.n	8000f38 <USB_AudioStreamingInputDataReceived+0x1c>
       input_node->flags = 0;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	750b      	strb	r3, [r1, #20]
       input_node->buf->rd_ptr=input_node->buf->wr_ptr = 0;
 8000f32:	606b      	str	r3, [r5, #4]
 }
 8000f34:	2000      	movs	r0, #0
 8000f36:	bd38      	pop	{r3, r4, r5, pc}
     buf->wr_ptr += data_len;/* increment buffer */
 8000f38:	88ea      	ldrh	r2, [r5, #6]
     if((input_node->flags&AUDIO_IO_BEGIN_OF_STREAM) == 0)
 8000f3a:	07db      	lsls	r3, r3, #31
     buf->wr_ptr += data_len;/* increment buffer */
 8000f3c:	4402      	add	r2, r0
 8000f3e:	b292      	uxth	r2, r2
 8000f40:	80ea      	strh	r2, [r5, #6]
     if((input_node->flags&AUDIO_IO_BEGIN_OF_STREAM) == 0)
 8000f42:	d408      	bmi.n	8000f56 <USB_AudioStreamingInputDataReceived+0x3a>
       input_node->node.session_handle->SessionCallback(AUDIO_BEGIN_OF_STREAM,(AUDIO_Node_t*)input_node,
 8000f44:	68ca      	ldr	r2, [r1, #12]
 8000f46:	2001      	movs	r0, #1
 8000f48:	6893      	ldr	r3, [r2, #8]
 8000f4a:	4798      	blx	r3
       input_node->flags |= AUDIO_IO_BEGIN_OF_STREAM;
 8000f4c:	7d23      	ldrb	r3, [r4, #20]
 8000f4e:	f043 0301 	orr.w	r3, r3, #1
          input_node->flags |= AUDIO_IO_THRESHOLD_REACHED ;
 8000f52:	7523      	strb	r3, [r4, #20]
 8000f54:	e7ee      	b.n	8000f34 <USB_AudioStreamingInputDataReceived+0x18>
        if(buf->wr_ptr > buf->size)
 8000f56:	8929      	ldrh	r1, [r5, #8]
 8000f58:	428a      	cmp	r2, r1
 8000f5a:	d906      	bls.n	8000f6a <USB_AudioStreamingInputDataReceived+0x4e>
          buf->wr_ptr -= buf->size;
 8000f5c:	1a52      	subs	r2, r2, r1
          memcpy(buf->data, buf->data+buf->size, buf->wr_ptr);
 8000f5e:	6828      	ldr	r0, [r5, #0]
          buf->wr_ptr -= buf->size;
 8000f60:	b292      	uxth	r2, r2
          memcpy(buf->data, buf->data+buf->size, buf->wr_ptr);
 8000f62:	4401      	add	r1, r0
          buf->wr_ptr -= buf->size;
 8000f64:	80ea      	strh	r2, [r5, #6]
          memcpy(buf->data, buf->data+buf->size, buf->wr_ptr);
 8000f66:	f005 fa4d 	bl	8006404 <memcpy>
      buffer_data_count = AUDIO_BUFFER_FILLED_SIZE(buf); 
 8000f6a:	88aa      	ldrh	r2, [r5, #4]
 8000f6c:	88e9      	ldrh	r1, [r5, #6]
 8000f6e:	8928      	ldrh	r0, [r5, #8]
 8000f70:	4291      	cmp	r1, r2
 8000f72:	bf36      	itet	cc
 8000f74:	180b      	addcc	r3, r1, r0
 8000f76:	1a8b      	subcs	r3, r1, r2
 8000f78:	1a9b      	subcc	r3, r3, r2
      if(buf->wr_ptr == buf->size)
 8000f7a:	4281      	cmp	r1, r0
        buf->wr_ptr = 0;
 8000f7c:	bf08      	it	eq
 8000f7e:	2200      	moveq	r2, #0
      buffer_data_count = AUDIO_BUFFER_FILLED_SIZE(buf); 
 8000f80:	b29b      	uxth	r3, r3
        buf->wr_ptr = 0;
 8000f82:	bf08      	it	eq
 8000f84:	80ea      	strheq	r2, [r5, #6]
      if(((input_node->flags&AUDIO_IO_THRESHOLD_REACHED) == 0)&&
 8000f86:	7d20      	ldrb	r0, [r4, #20]
 8000f88:	68e2      	ldr	r2, [r4, #12]
 8000f8a:	f010 0008 	ands.w	r0, r0, #8
 8000f8e:	6895      	ldr	r5, [r2, #8]
 8000f90:	d108      	bne.n	8000fa4 <USB_AudioStreamingInputDataReceived+0x88>
 8000f92:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 8000f94:	4299      	cmp	r1, r3
 8000f96:	d805      	bhi.n	8000fa4 <USB_AudioStreamingInputDataReceived+0x88>
         input_node->node.session_handle->SessionCallback(AUDIO_THRESHOLD_REACHED, (AUDIO_Node_t*)input_node,
 8000f98:	4621      	mov	r1, r4
 8000f9a:	47a8      	blx	r5
          input_node->flags |= AUDIO_IO_THRESHOLD_REACHED ;
 8000f9c:	7d23      	ldrb	r3, [r4, #20]
 8000f9e:	f043 0308 	orr.w	r3, r3, #8
 8000fa2:	e7d6      	b.n	8000f52 <USB_AudioStreamingInputDataReceived+0x36>
        input_node->node.session_handle->SessionCallback(AUDIO_PACKET_RECEIVED, (AUDIO_Node_t*)input_node,
 8000fa4:	4621      	mov	r1, r4
 8000fa6:	2002      	movs	r0, #2
 8000fa8:	47a8      	blx	r5
 8000faa:	e7c3      	b.n	8000f34 <USB_AudioStreamingInputDataReceived+0x18>
     Error_Handler();
 8000fac:	f001 fa84 	bl	80024b8 <Error_Handler>
 8000fb0:	e7c0      	b.n	8000f34 <USB_AudioStreamingInputDataReceived+0x18>
	...

08000fb4 <USB_AudioStreamingFeatureUnitInit>:
{
 8000fb4:	b570      	push	{r4, r5, r6, lr}
 8000fb6:	4604      	mov	r4, r0
 8000fb8:	460d      	mov	r5, r1
 8000fba:	4616      	mov	r6, r2
  memset(cf,0,sizeof(AUDIO_USB_CF_NodeTypeDef));
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	2254      	movs	r2, #84	; 0x54
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f005 fa2d 	bl	8006420 <memset>
  cf->node.state = AUDIO_NODE_INITIALIZED;
 8000fc6:	2201      	movs	r2, #1
  cf->usb_control_callbacks.GetStatus = USB_AudioStreamingFeatureUnitGetStatus;
 8000fc8:	4915      	ldr	r1, [pc, #84]	; (8001020 <USB_AudioStreamingFeatureUnitInit+0x6c>)
  memset(cf,0,sizeof(AUDIO_USB_CF_NodeTypeDef));
 8000fca:	4603      	mov	r3, r0
  cf->node.state = AUDIO_NODE_INITIALIZED;
 8000fcc:	7002      	strb	r2, [r0, #0]
  cf->node.type = AUDIO_CONTROL;
 8000fce:	2202      	movs	r2, #2
  cf->usb_control_callbacks.GetStatus = USB_AudioStreamingFeatureUnitGetStatus;
 8000fd0:	6301      	str	r1, [r0, #48]	; 0x30
  cf->node.type = AUDIO_CONTROL;
 8000fd2:	7202      	strb	r2, [r0, #8]
  cf->CFInit = USB_AudioStreamingFeatureUnitInit;
 8000fd4:	4a13      	ldr	r2, [pc, #76]	; (8001024 <USB_AudioStreamingFeatureUnitInit+0x70>)
  cf->usb_control_callbacks.GetMute = USB_AudioStreamingFeatureUnitGetMute;
 8000fd6:	4914      	ldr	r1, [pc, #80]	; (8001028 <USB_AudioStreamingFeatureUnitInit+0x74>)
  cf->CFInit = USB_AudioStreamingFeatureUnitInit;
 8000fd8:	6402      	str	r2, [r0, #64]	; 0x40
  cf->CFDeInit = USB_AudioStreamingFeatureUnitDInit;
 8000fda:	4a14      	ldr	r2, [pc, #80]	; (800102c <USB_AudioStreamingFeatureUnitInit+0x78>)
  cf->unit_id = unit_id;
 8000fdc:	7506      	strb	r6, [r0, #20]
  cf->CFDeInit = USB_AudioStreamingFeatureUnitDInit;
 8000fde:	6442      	str	r2, [r0, #68]	; 0x44
  cf->CFStart = USB_AudioStreamingFeatureUnitStart;
 8000fe0:	4a13      	ldr	r2, [pc, #76]	; (8001030 <USB_AudioStreamingFeatureUnitInit+0x7c>)
 8000fe2:	6482      	str	r2, [r0, #72]	; 0x48
  cf->CFStop = USB_AudioStreamingFeatureUnitStop;
 8000fe4:	4a13      	ldr	r2, [pc, #76]	; (8001034 <USB_AudioStreamingFeatureUnitInit+0x80>)
 8000fe6:	64c2      	str	r2, [r0, #76]	; 0x4c
  cf->CFSetMute = USB_AudioStreamingFeatureUnitSetMute;
 8000fe8:	4a13      	ldr	r2, [pc, #76]	; (8001038 <USB_AudioStreamingFeatureUnitInit+0x84>)
 8000fea:	6502      	str	r2, [r0, #80]	; 0x50
  cf->usb_control_callbacks.SetMute = USB_AudioStreamingFeatureUnitSetMute;
 8000fec:	e9c0 1206 	strd	r1, r2, [r0, #24]
  cf->usb_control_callbacks.GetCurVolume = USB_AudioStreamingFeatureUnitGetCurVolume;
 8000ff0:	4a12      	ldr	r2, [pc, #72]	; (800103c <USB_AudioStreamingFeatureUnitInit+0x88>)
 8000ff2:	6242      	str	r2, [r0, #36]	; 0x24
  cf->usb_control_callbacks.SetCurVolume = USB_AudioStreamingFeatureUnitSetCurVolume;
 8000ff4:	4a12      	ldr	r2, [pc, #72]	; (8001040 <USB_AudioStreamingFeatureUnitInit+0x8c>)
 8000ff6:	6202      	str	r2, [r0, #32]
  VOLUME_DB_256_TO_USB(cf->usb_control_callbacks.MaxVolume, audio_defaults->max_volume);
 8000ff8:	682a      	ldr	r2, [r5, #0]
 8000ffa:	8502      	strh	r2, [r0, #40]	; 0x28
  VOLUME_DB_256_TO_USB(cf->usb_control_callbacks.MinVolume, audio_defaults->min_volume);
 8000ffc:	686a      	ldr	r2, [r5, #4]
 8000ffe:	8542      	strh	r2, [r0, #42]	; 0x2a
  cf->usb_control_callbacks.ResVolume = audio_defaults->res_volume;
 8001000:	68aa      	ldr	r2, [r5, #8]
 8001002:	8582      	strh	r2, [r0, #44]	; 0x2c
  cf->node.audio_description=audio_defaults->audio_description;
 8001004:	68ea      	ldr	r2, [r5, #12]
 8001006:	6042      	str	r2, [r0, #4]
  usb_control_feature->control_selector_map = USBD_AUDIO_FU_MUTE_CONTROL|USBD_AUDIO_FU_VOLUME_CONTROL;
 8001008:	2203      	movs	r2, #3
  usb_control_feature->control_req_map = 0;  
 800100a:	2000      	movs	r0, #0
  usb_control_feature->id = unit_id;
 800100c:	7026      	strb	r6, [r4, #0]
  usb_control_feature->control_selector_map = USBD_AUDIO_FU_MUTE_CONTROL|USBD_AUDIO_FU_VOLUME_CONTROL;
 800100e:	80a2      	strh	r2, [r4, #4]
  usb_control_feature->type = USBD_AUDIO_CS_AC_SUBTYPE_FEATURE_UNIT;
 8001010:	2206      	movs	r2, #6
  usb_control_feature->control_req_map = 0;  
 8001012:	8060      	strh	r0, [r4, #2]
  usb_control_feature->type = USBD_AUDIO_CS_AC_SUBTYPE_FEATURE_UNIT;
 8001014:	7062      	strb	r2, [r4, #1]
  usb_control_feature->Callbacks.feature_control = &cf->usb_control_callbacks;
 8001016:	f103 0218 	add.w	r2, r3, #24
  usb_control_feature->private_data = node_handle;
 800101a:	e9c4 2302 	strd	r2, r3, [r4, #8]
}
 800101e:	bd70      	pop	{r4, r5, r6, pc}
 8001020:	08001045 	.word	0x08001045
 8001024:	08000fb5 	.word	0x08000fb5
 8001028:	08000e85 	.word	0x08000e85
 800102c:	08000e51 	.word	0x08000e51
 8001030:	08000e59 	.word	0x08000e59
 8001034:	08000e7d 	.word	0x08000e7d
 8001038:	08000e8f 	.word	0x08000e8f
 800103c:	08000ea7 	.word	0x08000ea7
 8001040:	08000eb1 	.word	0x08000eb1

08001044 <USB_AudioStreamingFeatureUnitGetStatus>:
 8001044:	2000      	movs	r0, #0
 8001046:	4770      	bx	lr

08001048 <USB_AudioStreamingInputInit>:
{
 8001048:	b5f0      	push	{r4, r5, r6, r7, lr}
  input_node->node.session_handle = session_handle;
 800104a:	60da      	str	r2, [r3, #12]
  input_node->flags = 0;
 800104c:	2400      	movs	r4, #0
  input_node->IODeInit = USB_AudioStreamingInputOutputDeInit;
 800104e:	4a16      	ldr	r2, [pc, #88]	; (80010a8 <USB_AudioStreamingInputInit+0x60>)
  input_node->node.state = AUDIO_NODE_INITIALIZED;
 8001050:	2601      	movs	r6, #1
  input_node->flags = 0;
 8001052:	751c      	strb	r4, [r3, #20]
  input_node->packet_length = AUDIO_USB_PACKET_SIZE_FROM_AUD_DESC(audio_desc);
 8001054:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
  input_node->IODeInit = USB_AudioStreamingInputOutputDeInit;
 8001058:	621a      	str	r2, [r3, #32]
  input_node->IOStart = USB_AudioStreamingInputOutputStart;
 800105a:	4a14      	ldr	r2, [pc, #80]	; (80010ac <USB_AudioStreamingInputInit+0x64>)
  input_node->node.state = AUDIO_NODE_INITIALIZED;
 800105c:	701e      	strb	r6, [r3, #0]
  input_node->IOStart = USB_AudioStreamingInputOutputStart;
 800105e:	625a      	str	r2, [r3, #36]	; 0x24
  input_node->IORestart = USB_AudioStreamingInputOutputRestart;
 8001060:	4a13      	ldr	r2, [pc, #76]	; (80010b0 <USB_AudioStreamingInputInit+0x68>)
  input_node->node.type = AUDIO_INPUT;
 8001062:	721c      	strb	r4, [r3, #8]
  input_node->IORestart = USB_AudioStreamingInputOutputRestart;
 8001064:	629a      	str	r2, [r3, #40]	; 0x28
  input_node->IOStop = USB_AudioStreamingInputOutputStop;
 8001066:	4a13      	ldr	r2, [pc, #76]	; (80010b4 <USB_AudioStreamingInputInit+0x6c>)
  input_node->node.audio_description = audio_desc;
 8001068:	6059      	str	r1, [r3, #4]
  input_node->IOStop = USB_AudioStreamingInputOutputStop;
 800106a:	62da      	str	r2, [r3, #44]	; 0x2c
  input_node->packet_length = AUDIO_USB_PACKET_SIZE_FROM_AUD_DESC(audio_desc);
 800106c:	680a      	ldr	r2, [r1, #0]
 800106e:	790d      	ldrb	r5, [r1, #4]
 8001070:	7c49      	ldrb	r1, [r1, #17]
 8001072:	4369      	muls	r1, r5
 8001074:	fbb2 f5f7 	udiv	r5, r2, r7
 8001078:	fb15 f501 	smulbb	r5, r5, r1
  input_node->max_packet_length = AUDIO_MAX_PACKET_WITH_FEEDBACK_LENGTH(audio_desc);
 800107c:	443a      	add	r2, r7
 800107e:	fbb2 f2f7 	udiv	r2, r2, r7
 8001082:	fb12 f201 	smulbb	r2, r2, r1
  input_node->packet_length = AUDIO_USB_PACKET_SIZE_FROM_AUD_DESC(audio_desc);
 8001086:	83dd      	strh	r5, [r3, #30]
  input_node->max_packet_length = AUDIO_MAX_PACKET_WITH_FEEDBACK_LENGTH(audio_desc);
 8001088:	839a      	strh	r2, [r3, #28]
  data_ep->private_data = node_handle;
 800108a:	6203      	str	r3, [r0, #32]
  data_ep->DataReceived = USB_AudioStreamingInputDataReceived;
 800108c:	4b0a      	ldr	r3, [pc, #40]	; (80010b8 <USB_AudioStreamingInputInit+0x70>)
  data_ep->ep_num = USBD_AUDIO_CONFIG_PLAY_EP_OUT;
 800108e:	7006      	strb	r6, [r0, #0]
  data_ep->DataReceived = USB_AudioStreamingInputDataReceived;
 8001090:	6103      	str	r3, [r0, #16]
  data_ep->GetBuffer = USB_AudioStreamingInputGetBuffer;
 8001092:	4b0a      	ldr	r3, [pc, #40]	; (80010bc <USB_AudioStreamingInputInit+0x74>)
  data_ep->control_name_map = 0;
 8001094:	8044      	strh	r4, [r0, #2]
  data_ep->GetBuffer = USB_AudioStreamingInputGetBuffer;
 8001096:	6143      	str	r3, [r0, #20]
  data_ep->GetMaxPacketLength = USB_AudioStreamingInputOutputGetMaxPacketLength;
 8001098:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <USB_AudioStreamingInputInit+0x78>)
  data_ep->control_selector_map = 0;
 800109a:	8084      	strh	r4, [r0, #4]
  data_ep->GetMaxPacketLength = USB_AudioStreamingInputOutputGetMaxPacketLength;
 800109c:	6183      	str	r3, [r0, #24]
  data_ep->GetState = USB_AudioStreamingInputOutputGetState;
 800109e:	4b09      	ldr	r3, [pc, #36]	; (80010c4 <USB_AudioStreamingInputInit+0x7c>)
 80010a0:	61c3      	str	r3, [r0, #28]
}
 80010a2:	4620      	mov	r0, r4
 80010a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010a6:	bf00      	nop
 80010a8:	08000e0b 	.word	0x08000e0b
 80010ac:	08000e13 	.word	0x08000e13
 80010b0:	08000e3b 	.word	0x08000e3b
 80010b4:	08000e33 	.word	0x08000e33
 80010b8:	08000f1d 	.word	0x08000f1d
 80010bc:	08000ed1 	.word	0x08000ed1
 80010c0:	08000e49 	.word	0x08000e49
 80010c4:	08000e4d 	.word	0x08000e4d

080010c8 <USB_AudioStreamingInitializeDataBuffer>:
  */
  void USB_AudioStreamingInitializeDataBuffer(AUDIO_CircularBuffer_t* buf, 
                                       uint32_t buffer_size, 
                                       uint16_t packet_size, uint16_t margin)
 {
    buf->size = ((int)((buffer_size - margin )
 80010c8:	1acb      	subs	r3, r1, r3
                       / packet_size)) * packet_size; 
 80010ca:	fbb3 f3f2 	udiv	r3, r3, r2
    buf->size = ((int)((buffer_size - margin )
 80010ce:	fb13 f202 	smulbb	r2, r3, r2
    buf->rd_ptr = buf->wr_ptr = 0;
 80010d2:	2300      	movs	r3, #0
    buf->size = ((int)((buffer_size - margin )
 80010d4:	8102      	strh	r2, [r0, #8]
    buf->rd_ptr = buf->wr_ptr = 0;
 80010d6:	6043      	str	r3, [r0, #4]
 }
 80010d8:	4770      	bx	lr

080010da <USB_AudioPlaybackGetState>:
  */
static int8_t  USB_AudioPlaybackGetState(uint32_t session_handle)
{  

  return 0;
}
 80010da:	2000      	movs	r0, #0
 80010dc:	4770      	bx	lr
	...

080010e0 <USB_AudioPlaybackGetFeedback>:
  * @param  session_handle: session
  * @retval  : 0 if buffer ok , 1 if overrun soon , -1 if underrun soon
  */
static uint32_t   USB_AudioPlaybackGetFeedback( uint32_t session_handle )
{
 if((PlaybackSpeakerOutputNode.node.state == AUDIO_NODE_STARTED))
 80010e0:	4a0f      	ldr	r2, [pc, #60]	; (8001120 <USB_AudioPlaybackGetFeedback+0x40>)
{
 80010e2:	4601      	mov	r1, r0
 80010e4:	b510      	push	{r4, lr}
 if((PlaybackSpeakerOutputNode.node.state == AUDIO_NODE_STARTED))
 80010e6:	7813      	ldrb	r3, [r2, #0]
 80010e8:	2b02      	cmp	r3, #2
 80010ea:	d116      	bne.n	800111a <USB_AudioPlaybackGetFeedback+0x3a>
  {
    if(PlaybackSynchroEstimatedCodecFrequency)
 80010ec:	6d50      	ldr	r0, [r2, #84]	; 0x54
 80010ee:	b968      	cbnz	r0, 800110c <USB_AudioPlaybackGetFeedback+0x2c>
    else
    {
     AUDIO_CircularBuffer_t *buffer = &((AUDIO_USBSession_t*)session_handle)->buffer;
     uint32_t wr_distance;
     
     wr_distance=AUDIO_BUFFER_FREE_SIZE(buffer);
 80010f0:	8b0c      	ldrh	r4, [r1, #24]
 80010f2:	8b4b      	ldrh	r3, [r1, #26]
 80010f4:	8b89      	ldrh	r1, [r1, #28]
 80010f6:	42a3      	cmp	r3, r4
 80010f8:	6d90      	ldr	r0, [r2, #88]	; 0x58
 80010fa:	bf28      	it	cs
 80010fc:	1864      	addcs	r4, r4, r1
 80010fe:	1ae3      	subs	r3, r4, r3
     if(wr_distance <= (buffer->size>>2))
 8001100:	088c      	lsrs	r4, r1, #2
 8001102:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8001106:	d802      	bhi.n	800110e <USB_AudioPlaybackGetFeedback+0x2e>
     {
       return PlaybackAudioDescription.frequency - 1000;
 8001108:	f5a0 707a 	sub.w	r0, r0, #1000	; 0x3e8
       return PlaybackAudioDescription.frequency + 1000;
     }
    }
  }
 return PlaybackAudioDescription.frequency;
}
 800110c:	bd10      	pop	{r4, pc}
     if( wr_distance >= (buffer->size - (buffer->size>>2)))
 800110e:	1b09      	subs	r1, r1, r4
 8001110:	4299      	cmp	r1, r3
 8001112:	d802      	bhi.n	800111a <USB_AudioPlaybackGetFeedback+0x3a>
       return PlaybackAudioDescription.frequency + 1000;
 8001114:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 8001118:	e7f8      	b.n	800110c <USB_AudioPlaybackGetFeedback+0x2c>
 return PlaybackAudioDescription.frequency;
 800111a:	6d90      	ldr	r0, [r2, #88]	; 0x58
 800111c:	e7f6      	b.n	800110c <USB_AudioPlaybackGetFeedback+0x2c>
 800111e:	bf00      	nop
 8001120:	200001e8 	.word	0x200001e8

08001124 <USB_AudioPlaybackSessionStop.isra.0.part.0>:
static int8_t  USB_AudioPlaybackSessionStop(AUDIO_USBSession_t*  play_session)
 8001124:	b538      	push	{r3, r4, r5, lr}
    PlaybackUSBInputNode.IOStop((uint32_t)&PlaybackUSBInputNode);
 8001126:	4c09      	ldr	r4, [pc, #36]	; (800114c <USB_AudioPlaybackSessionStop.isra.0.part.0+0x28>)
static int8_t  USB_AudioPlaybackSessionStop(AUDIO_USBSession_t*  play_session)
 8001128:	4605      	mov	r5, r0
    PlaybackUSBInputNode.IOStop((uint32_t)&PlaybackUSBInputNode);
 800112a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800112e:	f104 006c 	add.w	r0, r4, #108	; 0x6c
 8001132:	4798      	blx	r3
    PlaybackFeatureUnitNode.CFStop((uint32_t)&PlaybackFeatureUnitNode);
 8001134:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 8001138:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
 800113c:	4798      	blx	r3
    PlaybackSpeakerOutputNode.SpeakerStop((uint32_t)&PlaybackSpeakerOutputNode);
 800113e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001140:	4620      	mov	r0, r4
 8001142:	4798      	blx	r3
    play_session->session.state = AUDIO_SESSION_STOPPED;
 8001144:	2303      	movs	r3, #3
 8001146:	702b      	strb	r3, [r5, #0]
}
 8001148:	bd38      	pop	{r3, r4, r5, pc}
 800114a:	bf00      	nop
 800114c:	200001e8 	.word	0x200001e8

08001150 <USB_AudioPlaybackSessionDeInit>:
{
 8001150:	b538      	push	{r3, r4, r5, lr}
  if( play_session->session.state != AUDIO_SESSION_OFF)
 8001152:	7903      	ldrb	r3, [r0, #4]
{
 8001154:	4604      	mov	r4, r0
  if( play_session->session.state != AUDIO_SESSION_OFF)
 8001156:	b1c3      	cbz	r3, 800118a <USB_AudioPlaybackSessionDeInit+0x3a>
    if( play_session->session.state == AUDIO_SESSION_STARTED)
 8001158:	2b02      	cmp	r3, #2
 800115a:	d102      	bne.n	8001162 <USB_AudioPlaybackSessionDeInit+0x12>
  if( play_session->session.state == AUDIO_SESSION_STARTED)
 800115c:	3004      	adds	r0, #4
 800115e:	f7ff ffe1 	bl	8001124 <USB_AudioPlaybackSessionStop.isra.0.part.0>
    PlaybackSpeakerOutputNode.SpeakerDeInit((uint32_t)&PlaybackSpeakerOutputNode);
 8001162:	4d0b      	ldr	r5, [pc, #44]	; (8001190 <USB_AudioPlaybackSessionDeInit+0x40>)
 8001164:	69eb      	ldr	r3, [r5, #28]
 8001166:	4628      	mov	r0, r5
 8001168:	4798      	blx	r3
    PlaybackFeatureUnitNode.CFDeInit((uint32_t)&PlaybackFeatureUnitNode);
 800116a:	f8d5 30e4 	ldr.w	r3, [r5, #228]	; 0xe4
 800116e:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8001172:	4798      	blx	r3
    PlaybackUSBInputNode.IODeInit((uint32_t)&PlaybackUSBInputNode);
 8001174:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 8001178:	f105 006c 	add.w	r0, r5, #108	; 0x6c
 800117c:	4798      	blx	r3
    if( play_session->buffer.data)
 800117e:	6960      	ldr	r0, [r4, #20]
 8001180:	b108      	cbz	r0, 8001186 <USB_AudioPlaybackSessionDeInit+0x36>
      free( play_session->buffer.data);
 8001182:	f005 f937 	bl	80063f4 <free>
     play_session->session.state = AUDIO_SESSION_OFF;
 8001186:	2300      	movs	r3, #0
 8001188:	7123      	strb	r3, [r4, #4]
}
 800118a:	2000      	movs	r0, #0
 800118c:	bd38      	pop	{r3, r4, r5, pc}
 800118e:	bf00      	nop
 8001190:	200001e8 	.word	0x200001e8

08001194 <AUDIO_USB_Session_Sof_Received>:
  * @param  session_handle: session
  * @retval  : 
  */

static void  AUDIO_USB_Session_Sof_Received(uint32_t session_handle )
 {
 8001194:	b538      	push	{r3, r4, r5, lr}
   static uint32_t total_received_sub_samples = 0;
    AUDIO_USBSession_t *session;
    uint16_t read_samples_per_channel ;
    
  session = (AUDIO_USBSession_t*)session_handle;
  if( session->session.state == AUDIO_SESSION_STARTED) 
 8001196:	7903      	ldrb	r3, [r0, #4]
 8001198:	4c15      	ldr	r4, [pc, #84]	; (80011f0 <AUDIO_USB_Session_Sof_Received+0x5c>)
 800119a:	2b02      	cmp	r3, #2
 800119c:	d126      	bne.n	80011ec <AUDIO_USB_Session_Sof_Received+0x58>
  {
   if(PlaybackSynchroFirstSofReceived)
 800119e:	f894 50f4 	ldrb.w	r5, [r4, #244]	; 0xf4
 80011a2:	b1c5      	cbz	r5, 80011d6 <AUDIO_USB_Session_Sof_Received+0x42>
       micro_sof_counter++;
     }
     else
     {
#endif /* USE_USB_HS */
        read_samples_per_channel = PlaybackSpeakerOutputNode.SpeakerGetReadCount((uint32_t)&PlaybackSpeakerOutputNode);
 80011a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80011a6:	4620      	mov	r0, r4
 80011a8:	4798      	blx	r3
        total_received_sub_samples += read_samples_per_channel;
 80011aa:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
 80011ae:	4418      	add	r0, r3
        if(++sof_counter == 1000)
 80011b0:	f8b4 30fc 	ldrh.w	r3, [r4, #252]	; 0xfc
 80011b4:	3301      	adds	r3, #1
        total_received_sub_samples += read_samples_per_channel;
 80011b6:	f8c4 00f8 	str.w	r0, [r4, #248]	; 0xf8
        if(++sof_counter == 1000)
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011c0:	f8a4 30fc 	strh.w	r3, [r4, #252]	; 0xfc
 80011c4:	d106      	bne.n	80011d4 <AUDIO_USB_Session_Sof_Received+0x40>
        {
          PlaybackSynchroEstimatedCodecFrequency =((total_received_sub_samples)>>1); 
          sof_counter =0;
 80011c6:	2300      	movs	r3, #0
          PlaybackSynchroEstimatedCodecFrequency =((total_received_sub_samples)>>1); 
 80011c8:	0840      	lsrs	r0, r0, #1
          sof_counter =0;
 80011ca:	f8a4 30fc 	strh.w	r3, [r4, #252]	; 0xfc
          PlaybackSynchroEstimatedCodecFrequency =((total_received_sub_samples)>>1); 
 80011ce:	6560      	str	r0, [r4, #84]	; 0x54
          total_received_sub_samples = 0;
 80011d0:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
  }
  else
  {
    PlaybackSynchroFirstSofReceived = 0;
  }
 }
 80011d4:	bd38      	pop	{r3, r4, r5, pc}
       PlaybackSpeakerOutputNode.SpeakerStartReadCount((uint32_t)&PlaybackSpeakerOutputNode);
 80011d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80011d8:	4620      	mov	r0, r4
 80011da:	4798      	blx	r3
       PlaybackSynchroFirstSofReceived = 1;
 80011dc:	2301      	movs	r3, #1
       sof_counter = 0;
 80011de:	f8a4 50fc 	strh.w	r5, [r4, #252]	; 0xfc
       total_received_sub_samples = 0;
 80011e2:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
    PlaybackSynchroFirstSofReceived = 0;
 80011e6:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
 }
 80011ea:	e7f3      	b.n	80011d4 <AUDIO_USB_Session_Sof_Received+0x40>
    PlaybackSynchroFirstSofReceived = 0;
 80011ec:	2300      	movs	r3, #0
 80011ee:	e7fa      	b.n	80011e6 <AUDIO_USB_Session_Sof_Received+0x52>
 80011f0:	200001e8 	.word	0x200001e8

080011f4 <USB_AudioPlaybackSessionCallback>:
  switch(event)
 80011f4:	2805      	cmp	r0, #5
{
 80011f6:	b570      	push	{r4, r5, r6, lr}
 80011f8:	4615      	mov	r5, r2
  switch(event)
 80011fa:	d804      	bhi.n	8001206 <USB_AudioPlaybackSessionCallback+0x12>
 80011fc:	2803      	cmp	r0, #3
 80011fe:	d834      	bhi.n	800126a <USB_AudioPlaybackSessionCallback+0x76>
 8001200:	b338      	cbz	r0, 8001252 <USB_AudioPlaybackSessionCallback+0x5e>
}
 8001202:	2000      	movs	r0, #0
 8001204:	bd70      	pop	{r4, r5, r6, pc}
  switch(event)
 8001206:	2808      	cmp	r0, #8
 8001208:	d1fb      	bne.n	8001202 <USB_AudioPlaybackSessionCallback+0xe>
     PlaybackSpeakerOutputNode.SpeakerChangeFrequency((uint32_t)&PlaybackSpeakerOutputNode);
 800120a:	4c20      	ldr	r4, [pc, #128]	; (800128c <USB_AudioPlaybackSessionCallback+0x98>)
                                  AUDIO_MS_PACKET_SIZE_FROM_AUD_DESC(&PlaybackAudioDescription) , buffer_margin);
 800120c:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
     PlaybackSpeakerOutputNode.SpeakerChangeFrequency((uint32_t)&PlaybackSpeakerOutputNode);
 8001210:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001212:	4620      	mov	r0, r4
 8001214:	4798      	blx	r3
  USB_AudioStreamingInitializeDataBuffer(&play_session->buffer, USB_AUDIO_CONFIG_PLAY_BUFFER_SIZE,
 8001216:	f894 1069 	ldrb.w	r1, [r4, #105]	; 0x69
 800121a:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
     uint16_t buffer_margin = (PlaybackUSBInputNode.max_packet_length > PlaybackUSBInputNode.packet_length)? PlaybackUSBInputNode.max_packet_length:0;
 800121e:	f8b4 008a 	ldrh.w	r0, [r4, #138]	; 0x8a
  USB_AudioStreamingInitializeDataBuffer(&play_session->buffer, USB_AUDIO_CONFIG_PLAY_BUFFER_SIZE,
 8001222:	fb12 f201 	smulbb	r2, r2, r1
                                  AUDIO_MS_PACKET_SIZE_FROM_AUD_DESC(&PlaybackAudioDescription) , buffer_margin);
 8001226:	6da1      	ldr	r1, [r4, #88]	; 0x58
     uint16_t buffer_margin = (PlaybackUSBInputNode.max_packet_length > PlaybackUSBInputNode.packet_length)? PlaybackUSBInputNode.max_packet_length:0;
 8001228:	f8b4 3088 	ldrh.w	r3, [r4, #136]	; 0x88
                                  AUDIO_MS_PACKET_SIZE_FROM_AUD_DESC(&PlaybackAudioDescription) , buffer_margin);
 800122c:	fbb1 f1f6 	udiv	r1, r1, r6
  USB_AudioStreamingInitializeDataBuffer(&play_session->buffer, USB_AUDIO_CONFIG_PLAY_BUFFER_SIZE,
 8001230:	fb12 f201 	smulbb	r2, r2, r1
 8001234:	4298      	cmp	r0, r3
 8001236:	bf28      	it	cs
 8001238:	2300      	movcs	r3, #0
 800123a:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 800123e:	f105 0014 	add.w	r0, r5, #20
 8001242:	b292      	uxth	r2, r2
 8001244:	f7ff ff40 	bl	80010c8 <USB_AudioStreamingInitializeDataBuffer>
     PlaybackSynchroFirstSofReceived =0;
 8001248:	2300      	movs	r3, #0
 800124a:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
     PlaybackSynchroEstimatedCodecFrequency = 0;
 800124e:	6563      	str	r3, [r4, #84]	; 0x54
    break;
 8001250:	e7d7      	b.n	8001202 <USB_AudioPlaybackSessionCallback+0xe>
    if(node->type  ==  AUDIO_INPUT)
 8001252:	7a0e      	ldrb	r6, [r1, #8]
 8001254:	2e00      	cmp	r6, #0
 8001256:	d1d4      	bne.n	8001202 <USB_AudioPlaybackSessionCallback+0xe>
      PlaybackSpeakerOutputNode.SpeakerStart(& play_session->buffer, (uint32_t)&PlaybackSpeakerOutputNode);
 8001258:	4c0c      	ldr	r4, [pc, #48]	; (800128c <USB_AudioPlaybackSessionCallback+0x98>)
 800125a:	f102 0014 	add.w	r0, r2, #20
 800125e:	6a23      	ldr	r3, [r4, #32]
 8001260:	4621      	mov	r1, r4
 8001262:	4798      	blx	r3
	  PlaybackSynchroFirstSofReceived =0;   /* restart synchronization*/
 8001264:	f884 60f4 	strb.w	r6, [r4, #244]	; 0xf4
 8001268:	e7cb      	b.n	8001202 <USB_AudioPlaybackSessionCallback+0xe>
     PlaybackSpeakerOutputNode.SpeakerStop((uint32_t)&PlaybackSpeakerOutputNode);
 800126a:	4c08      	ldr	r4, [pc, #32]	; (800128c <USB_AudioPlaybackSessionCallback+0x98>)
 800126c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800126e:	4620      	mov	r0, r4
 8001270:	4798      	blx	r3
     PlaybackSynchroFirstSofReceived =0;
 8001272:	2300      	movs	r3, #0
 8001274:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
     PlaybackSynchroEstimatedCodecFrequency = 0;
 8001278:	6563      	str	r3, [r4, #84]	; 0x54
     if( play_session->session.state == AUDIO_SESSION_STARTED)
 800127a:	792b      	ldrb	r3, [r5, #4]
 800127c:	2b02      	cmp	r3, #2
 800127e:	d1c0      	bne.n	8001202 <USB_AudioPlaybackSessionCallback+0xe>
       PlaybackUSBInputNode.IORestart((uint32_t)&PlaybackUSBInputNode);
 8001280:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001284:	f104 006c 	add.w	r0, r4, #108	; 0x6c
 8001288:	4798      	blx	r3
 800128a:	e7ba      	b.n	8001202 <USB_AudioPlaybackSessionCallback+0xe>
 800128c:	200001e8 	.word	0x200001e8

08001290 <USB_AudioPlaybackSetAudioStreamingInterfaceAlternateSetting>:
{
 8001290:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8001292:	460c      	mov	r4, r1
 8001294:	7c4b      	ldrb	r3, [r1, #17]
  if(alternate  ==  0)
 8001296:	4606      	mov	r6, r0
 8001298:	b958      	cbnz	r0, 80012b2 <USB_AudioPlaybackSetAudioStreamingInterfaceAlternateSetting+0x22>
    if( play_session->alternate != 0)
 800129a:	b13b      	cbz	r3, 80012ac <USB_AudioPlaybackSetAudioStreamingInterfaceAlternateSetting+0x1c>
  if( play_session->session.state == AUDIO_SESSION_STARTED)
 800129c:	790b      	ldrb	r3, [r1, #4]
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d102      	bne.n	80012a8 <USB_AudioPlaybackSetAudioStreamingInterfaceAlternateSetting+0x18>
 80012a2:	1d08      	adds	r0, r1, #4
 80012a4:	f7ff ff3e 	bl	8001124 <USB_AudioPlaybackSessionStop.isra.0.part.0>
       play_session->alternate = 0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	7463      	strb	r3, [r4, #17]
}
 80012ac:	2000      	movs	r0, #0
 80012ae:	b004      	add	sp, #16
 80012b0:	bd70      	pop	{r4, r5, r6, pc}
    if( play_session->alternate  ==  0)
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d1fa      	bne.n	80012ac <USB_AudioPlaybackSetAudioStreamingInterfaceAlternateSetting+0x1c>
  if(( play_session->session.state == AUDIO_SESSION_INITIALIZED)
 80012b6:	790b      	ldrb	r3, [r1, #4]
 80012b8:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d116      	bne.n	80012ee <USB_AudioPlaybackSetAudioStreamingInterfaceAlternateSetting+0x5e>
    PlaybackUSBInputNode.IOStart(& play_session->buffer,   play_session->buffer.size/2,  (uint32_t)&PlaybackUSBInputNode);
 80012c0:	4d0c      	ldr	r5, [pc, #48]	; (80012f4 <USB_AudioPlaybackSetAudioStreamingInterfaceAlternateSetting+0x64>)
 80012c2:	f104 0014 	add.w	r0, r4, #20
 80012c6:	8b89      	ldrh	r1, [r1, #28]
 80012c8:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 80012cc:	f105 026c 	add.w	r2, r5, #108	; 0x6c
 80012d0:	0849      	lsrs	r1, r1, #1
 80012d2:	4798      	blx	r3
    commands.SetMute = PlaybackSpeakerOutputNode.SpeakerMute;
 80012d4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    PlaybackFeatureUnitNode.CFStart(&commands,(uint32_t)&PlaybackFeatureUnitNode);
 80012d6:	f105 01a0 	add.w	r1, r5, #160	; 0xa0
 80012da:	a801      	add	r0, sp, #4
    commands.SetMute = PlaybackSpeakerOutputNode.SpeakerMute;
 80012dc:	9301      	str	r3, [sp, #4]
    commands.SetCurrentVolume = PlaybackSpeakerOutputNode.SpeakerSetVolume;
 80012de:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    commands.private_data = (uint32_t)&PlaybackSpeakerOutputNode;
 80012e0:	9503      	str	r5, [sp, #12]
    commands.SetCurrentVolume = PlaybackSpeakerOutputNode.SpeakerSetVolume;
 80012e2:	9302      	str	r3, [sp, #8]
    PlaybackFeatureUnitNode.CFStart(&commands,(uint32_t)&PlaybackFeatureUnitNode);
 80012e4:	f8d5 30e8 	ldr.w	r3, [r5, #232]	; 0xe8
 80012e8:	4798      	blx	r3
    play_session->session.state = AUDIO_SESSION_STARTED;
 80012ea:	2302      	movs	r3, #2
 80012ec:	7123      	strb	r3, [r4, #4]
      play_session->alternate = alternate;
 80012ee:	7466      	strb	r6, [r4, #17]
 80012f0:	e7dc      	b.n	80012ac <USB_AudioPlaybackSetAudioStreamingInterfaceAlternateSetting+0x1c>
 80012f2:	bf00      	nop
 80012f4:	200001e8 	.word	0x200001e8

080012f8 <AUDIO_PlaybackSessionInit>:
{
 80012f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012fc:	4606      	mov	r6, r0
 80012fe:	b085      	sub	sp, #20
   memset( play_session, 0, sizeof(AUDIO_USBSession_t));
 8001300:	4618      	mov	r0, r3
{
 8001302:	468a      	mov	sl, r1
 8001304:	4691      	mov	r9, r2
   memset( play_session, 0, sizeof(AUDIO_USBSession_t));
 8001306:	2100      	movs	r1, #0
 8001308:	2220      	movs	r2, #32
{
 800130a:	461d      	mov	r5, r3
   memset( play_session, 0, sizeof(AUDIO_USBSession_t));
 800130c:	f005 f888 	bl	8006420 <memset>
   play_session->SessionDeInit = USB_AudioPlaybackSessionDeInit;
 8001310:	4b42      	ldr	r3, [pc, #264]	; (800141c <AUDIO_PlaybackSessionInit+0x124>)
   play_session->buffer.size = USB_AUDIO_CONFIG_PLAY_BUFFER_SIZE;
 8001312:	f44f 5020 	mov.w	r0, #10240	; 0x2800
   play_session->interface_num = USBD_AUDIO_CONFIG_PLAY_SA_INTERFACE;
 8001316:	2701      	movs	r7, #1
   play_session->SessionDeInit = USB_AudioPlaybackSessionDeInit;
 8001318:	60eb      	str	r3, [r5, #12]
   play_session->session.SessionCallback = USB_AudioPlaybackSessionCallback;
 800131a:	4b41      	ldr	r3, [pc, #260]	; (8001420 <AUDIO_PlaybackSessionInit+0x128>)
   play_session->interface_num = USBD_AUDIO_CONFIG_PLAY_SA_INTERFACE;
 800131c:	822f      	strh	r7, [r5, #16]
   play_session->session.SessionCallback = USB_AudioPlaybackSessionCallback;
 800131e:	60ab      	str	r3, [r5, #8]
   play_session->buffer.size = USB_AUDIO_CONFIG_PLAY_BUFFER_SIZE;
 8001320:	83a8      	strh	r0, [r5, #28]
   play_session->buffer.data = malloc( USB_AUDIO_CONFIG_PLAY_BUFFER_SIZE); 
 8001322:	f005 f85f 	bl	80063e4 <malloc>
 8001326:	6168      	str	r0, [r5, #20]
   if(! play_session->buffer.data)
 8001328:	b908      	cbnz	r0, 800132e <AUDIO_PlaybackSessionInit+0x36>
    Error_Handler();
 800132a:	f001 f8c5 	bl	80024b8 <Error_Handler>
  PlaybackAudioDescription.audio_type = USBD_AUDIO_FORMAT_TYPE_PCM; /* PCM*/
 800132e:	4c3d      	ldr	r4, [pc, #244]	; (8001424 <AUDIO_PlaybackSessionInit+0x12c>)
  PlaybackAudioDescription.channels_count = USB_AUDIO_CONFIG_PLAY_CHANNEL_COUNT;
 8001330:	2302      	movs	r3, #2
  PlaybackAudioDescription.audio_volume_db_256 = VOLUME_SPEAKER_DEFAULT_DB_256;
 8001332:	f04f 0800 	mov.w	r8, #0
  USB_AudioStreamingInputInit(&as_desc->data_ep,  &PlaybackAudioDescription,  &play_session->session,  (uint32_t)&PlaybackUSBInputNode);
 8001336:	462a      	mov	r2, r5
  PlaybackAudioDescription.channels_count = USB_AUDIO_CONFIG_PLAY_CHANNEL_COUNT;
 8001338:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  PlaybackAudioDescription.channels_map = USB_AUDIO_CONFIG_PLAY_CHANNEL_MAP; /* Left and Right */
 800133c:	2303      	movs	r3, #3
  USB_AudioStreamingInputInit(&as_desc->data_ep,  &PlaybackAudioDescription,  &play_session->session,  (uint32_t)&PlaybackUSBInputNode);
 800133e:	f104 0b58 	add.w	fp, r4, #88	; 0x58
  PlaybackAudioDescription.audio_type = USBD_AUDIO_FORMAT_TYPE_PCM; /* PCM*/
 8001342:	f8a4 7060 	strh.w	r7, [r4, #96]	; 0x60
  PlaybackAudioDescription.channels_map = USB_AUDIO_CONFIG_PLAY_CHANNEL_MAP; /* Left and Right */
 8001346:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
  PlaybackAudioDescription.frequency = USB_AUDIO_CONFIG_PLAY_DEF_FREQ;
 800134a:	f64b 3380 	movw	r3, #48000	; 0xbb80
  PlaybackAudioDescription.audio_volume_db_256 = VOLUME_SPEAKER_DEFAULT_DB_256;
 800134e:	f8c4 8064 	str.w	r8, [r4, #100]	; 0x64
  USB_AudioStreamingInputInit(&as_desc->data_ep,  &PlaybackAudioDescription,  &play_session->session,  (uint32_t)&PlaybackUSBInputNode);
 8001352:	4659      	mov	r1, fp
  PlaybackAudioDescription.frequency = USB_AUDIO_CONFIG_PLAY_DEF_FREQ;
 8001354:	65a3      	str	r3, [r4, #88]	; 0x58
  PlaybackAudioDescription.audio_mute = 0;
 8001356:	f44f 7300 	mov.w	r3, #512	; 0x200
  USB_AudioStreamingInputInit(&as_desc->data_ep,  &PlaybackAudioDescription,  &play_session->session,  (uint32_t)&PlaybackUSBInputNode);
 800135a:	1d30      	adds	r0, r6, #4
  PlaybackAudioDescription.audio_mute = 0;
 800135c:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  USB_AudioStreamingInputInit(&as_desc->data_ep,  &PlaybackAudioDescription,  &play_session->session,  (uint32_t)&PlaybackUSBInputNode);
 8001360:	f104 036c 	add.w	r3, r4, #108	; 0x6c
  *control_count = 0;
 8001364:	f889 8000 	strb.w	r8, [r9]
  USB_AudioStreamingInputInit(&as_desc->data_ep,  &PlaybackAudioDescription,  &play_session->session,  (uint32_t)&PlaybackUSBInputNode);
 8001368:	f7ff fe6e 	bl	8001048 <USB_AudioStreamingInputInit>
   play_session->session.node_list = (AUDIO_Node_t*)&PlaybackUSBInputNode;
 800136c:	f104 036c 	add.w	r3, r4, #108	; 0x6c
  USB_AudioStreamingFeatureUnitInit( controls_desc,  &controller_defaults,  USB_AUDIO_CONFIG_PLAY_UNIT_FEATURE_ID, (uint32_t)&PlaybackFeatureUnitNode);
 8001370:	4669      	mov	r1, sp
 8001372:	2216      	movs	r2, #22
   play_session->session.node_list = (AUDIO_Node_t*)&PlaybackUSBInputNode;
 8001374:	602b      	str	r3, [r5, #0]
  controller_defaults.max_volume = VOLUME_SPEAKER_MAX_DB_256;
 8001376:	f44f 63c0 	mov.w	r3, #1536	; 0x600
  USB_AudioStreamingFeatureUnitInit( controls_desc,  &controller_defaults,  USB_AUDIO_CONFIG_PLAY_UNIT_FEATURE_ID, (uint32_t)&PlaybackFeatureUnitNode);
 800137a:	4650      	mov	r0, sl
  controller_defaults.audio_description = &PlaybackAudioDescription;
 800137c:	f8cd b00c 	str.w	fp, [sp, #12]
  controller_defaults.max_volume = VOLUME_SPEAKER_MAX_DB_256;
 8001380:	9300      	str	r3, [sp, #0]
  controller_defaults.min_volume = VOLUME_SPEAKER_MIN_DB_256;
 8001382:	f5a3 53f8 	sub.w	r3, r3, #7936	; 0x1f00
 8001386:	9301      	str	r3, [sp, #4]
  controller_defaults.res_volume = VOLUME_SPEAKER_RES_DB_256;
 8001388:	2380      	movs	r3, #128	; 0x80
 800138a:	9302      	str	r3, [sp, #8]
  USB_AudioStreamingFeatureUnitInit( controls_desc,  &controller_defaults,  USB_AUDIO_CONFIG_PLAY_UNIT_FEATURE_ID, (uint32_t)&PlaybackFeatureUnitNode);
 800138c:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
 8001390:	f7ff fe10 	bl	8000fb4 <USB_AudioStreamingFeatureUnitInit>
  (*control_count)++;
 8001394:	f899 2000 	ldrb.w	r2, [r9]
  PlaybackUSBInputNode.node.next = (AUDIO_Node_t*)&PlaybackFeatureUnitNode;
 8001398:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
  AUDIO_SpeakerInit(&PlaybackAudioDescription, &play_session->session, (uint32_t)&PlaybackSpeakerOutputNode);
 800139c:	4629      	mov	r1, r5
  (*control_count)++;
 800139e:	3201      	adds	r2, #1
  AUDIO_SpeakerInit(&PlaybackAudioDescription, &play_session->session, (uint32_t)&PlaybackSpeakerOutputNode);
 80013a0:	4658      	mov	r0, fp
  (*control_count)++;
 80013a2:	f889 2000 	strb.w	r2, [r9]
  AUDIO_SpeakerInit(&PlaybackAudioDescription, &play_session->session, (uint32_t)&PlaybackSpeakerOutputNode);
 80013a6:	4622      	mov	r2, r4
  PlaybackUSBInputNode.node.next = (AUDIO_Node_t*)&PlaybackFeatureUnitNode;
 80013a8:	67e3      	str	r3, [r4, #124]	; 0x7c
  AUDIO_SpeakerInit(&PlaybackAudioDescription, &play_session->session, (uint32_t)&PlaybackSpeakerOutputNode);
 80013aa:	f000 ff71 	bl	8002290 <AUDIO_SPEAKER_USER_Init>
     as_desc->synch_ep.ep_num = USB_AUDIO_CONFIG_PLAY_EP_SYNC;
 80013ae:	2381      	movs	r3, #129	; 0x81
  PlaybackFeatureUnitNode.node.next = (AUDIO_Node_t*)&PlaybackSpeakerOutputNode;
 80013b0:	f8c4 40b0 	str.w	r4, [r4, #176]	; 0xb0
     as_desc->synch_enabled = 1;
 80013b4:	f886 7028 	strb.w	r7, [r6, #40]	; 0x28
     as_desc->synch_ep.ep_num = USB_AUDIO_CONFIG_PLAY_EP_SYNC;
 80013b8:	f886 302c 	strb.w	r3, [r6, #44]	; 0x2c
     as_desc->synch_ep.GetFeedback = USB_AudioPlaybackGetFeedback;
 80013bc:	4b1a      	ldr	r3, [pc, #104]	; (8001428 <AUDIO_PlaybackSessionInit+0x130>)
     as_desc->synch_ep.private_data = (uint32_t) play_session;
 80013be:	e9c6 350c 	strd	r3, r5, [r6, #48]	; 0x30
     as_desc->SofReceived = AUDIO_USB_Session_Sof_Received;
 80013c2:	4b1a      	ldr	r3, [pc, #104]	; (800142c <AUDIO_PlaybackSessionInit+0x134>)
 80013c4:	63b3      	str	r3, [r6, #56]	; 0x38
  as_desc->interface_num =  play_session->interface_num;
 80013c6:	7c2b      	ldrb	r3, [r5, #16]
  as_desc->alternate = 0;
 80013c8:	f886 8002 	strb.w	r8, [r6, #2]
  as_desc->interface_num =  play_session->interface_num;
 80013cc:	7033      	strb	r3, [r6, #0]
  as_desc->SetAS_Alternate = USB_AudioPlaybackSetAudioStreamingInterfaceAlternateSetting;
 80013ce:	4b18      	ldr	r3, [pc, #96]	; (8001430 <AUDIO_PlaybackSessionInit+0x138>)
  as_desc->max_alternate = AUDIO_USB_PLAYBACK_ALTERNATE;
 80013d0:	7077      	strb	r7, [r6, #1]
  as_desc->SetAS_Alternate = USB_AudioPlaybackSetAudioStreamingInterfaceAlternateSetting;
 80013d2:	63f3      	str	r3, [r6, #60]	; 0x3c
  USB_AudioStreamingInitializeDataBuffer(&play_session->buffer, USB_AUDIO_CONFIG_PLAY_BUFFER_SIZE,
 80013d4:	f894 1069 	ldrb.w	r1, [r4, #105]	; 0x69
 80013d8:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
  as_desc->GetState = USB_AudioPlaybackGetState;
 80013dc:	4b15      	ldr	r3, [pc, #84]	; (8001434 <AUDIO_PlaybackSessionInit+0x13c>)
  uint16_t buffer_margin = (PlaybackUSBInputNode.max_packet_length > PlaybackUSBInputNode.packet_length)?PlaybackUSBInputNode.max_packet_length:0;
 80013de:	f8b4 008a 	ldrh.w	r0, [r4, #138]	; 0x8a
  USB_AudioStreamingInitializeDataBuffer(&play_session->buffer, USB_AUDIO_CONFIG_PLAY_BUFFER_SIZE,
 80013e2:	fb12 f201 	smulbb	r2, r2, r1
  as_desc->GetState = USB_AudioPlaybackGetState;
 80013e6:	6433      	str	r3, [r6, #64]	; 0x40
                                  AUDIO_MS_PACKET_SIZE_FROM_AUD_DESC(&PlaybackAudioDescription) , buffer_margin);
 80013e8:	6da1      	ldr	r1, [r4, #88]	; 0x58
  uint16_t buffer_margin = (PlaybackUSBInputNode.max_packet_length > PlaybackUSBInputNode.packet_length)?PlaybackUSBInputNode.max_packet_length:0;
 80013ea:	f8b4 3088 	ldrh.w	r3, [r4, #136]	; 0x88
                                  AUDIO_MS_PACKET_SIZE_FROM_AUD_DESC(&PlaybackAudioDescription) , buffer_margin);
 80013ee:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
  as_desc->private_data = session_handle;
 80013f2:	6475      	str	r5, [r6, #68]	; 0x44
  USB_AudioStreamingInitializeDataBuffer(&play_session->buffer, USB_AUDIO_CONFIG_PLAY_BUFFER_SIZE,
 80013f4:	4298      	cmp	r0, r3
 80013f6:	bf28      	it	cs
 80013f8:	4643      	movcs	r3, r8
 80013fa:	f105 0014 	add.w	r0, r5, #20
                                  AUDIO_MS_PACKET_SIZE_FROM_AUD_DESC(&PlaybackAudioDescription) , buffer_margin);
 80013fe:	fbb1 f1f4 	udiv	r1, r1, r4
  USB_AudioStreamingInitializeDataBuffer(&play_session->buffer, USB_AUDIO_CONFIG_PLAY_BUFFER_SIZE,
 8001402:	fb12 f201 	smulbb	r2, r2, r1
 8001406:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 800140a:	b292      	uxth	r2, r2
 800140c:	f7ff fe5c 	bl	80010c8 <USB_AudioStreamingInitializeDataBuffer>
  play_session->session.state = AUDIO_SESSION_INITIALIZED;
 8001410:	2301      	movs	r3, #1
}
 8001412:	4640      	mov	r0, r8
  play_session->session.state = AUDIO_SESSION_INITIALIZED;
 8001414:	712b      	strb	r3, [r5, #4]
}
 8001416:	b005      	add	sp, #20
 8001418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800141c:	08001151 	.word	0x08001151
 8001420:	080011f5 	.word	0x080011f5
 8001424:	200001e8 	.word	0x200001e8
 8001428:	080010e1 	.word	0x080010e1
 800142c:	08001195 	.word	0x08001195
 8001430:	08001291 	.word	0x08001291
 8001434:	080010db 	.word	0x080010db

08001438 <USB_AUDIO_GetConfigDescriptor>:
  * @param  desc                             
  * @retval the configuration descriptor size
  */
uint16_t USB_AUDIO_GetConfigDescriptor(uint8_t **desc)
{ 
  if(desc)
 8001438:	b108      	cbz	r0, 800143e <USB_AUDIO_GetConfigDescriptor+0x6>
  {
    *desc = USBD_AUDIO_ConfigDescriptor;
 800143a:	4b02      	ldr	r3, [pc, #8]	; (8001444 <USB_AUDIO_GetConfigDescriptor+0xc>)
 800143c:	6003      	str	r3, [r0, #0]
  }
  return (CONFIG_DESCRIPTOR_SIZE);
}
 800143e:	2077      	movs	r0, #119	; 0x77
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	20000044 	.word	0x20000044

08001448 <AUDIO_USB_DeInit>:
  * @param  private_data:  for future usage
  * @retval status 0 if no error
  */

static int8_t  AUDIO_USB_DeInit(USBD_AUDIO_FunctionDescriptionfTypeDef* audio_function, uint32_t private_data)
{
 8001448:	b510      	push	{r4, lr}
 800144a:	4604      	mov	r4, r0
  int i=0;
  
#if USE_USB_AUDIO_PLAYBACK
  USB_AudioPlabackSession.SessionDeInit( (uint32_t) &USB_AudioPlabackSession);
 800144c:	4803      	ldr	r0, [pc, #12]	; (800145c <AUDIO_USB_DeInit+0x14>)
 800144e:	68c3      	ldr	r3, [r0, #12]
 8001450:	4798      	blx	r3
  audio_function->as_interfaces[0].alternate = 0;
 8001452:	2000      	movs	r0, #0
 8001454:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
  USB_AudioRecordingSession.SessionDeInit((uint32_t) &USB_AudioRecordingSession);
  audio_function->as_interfaces[i].alternate = 0;
#endif /* USE_USB_AUDIO_RECORDING*/
  
  return 0;
}
 8001458:	bd10      	pop	{r4, pc}
 800145a:	bf00      	nop
 800145c:	20000494 	.word	0x20000494

08001460 <AUDIO_USB_GetState>:
  * @retval status
  */
static int8_t  AUDIO_USB_GetState(uint32_t private_data)
{
  return 0;
}
 8001460:	2000      	movs	r0, #0
 8001462:	4770      	bx	lr

08001464 <AUDIO_USB_GetConfigDesc>:
  * @param  psize:  configuration descriptor length
  * @param  private_data:  for future usage
  * @retval status
  */
static int8_t  AUDIO_USB_GetConfigDesc (uint8_t ** pdata, uint16_t * psize, uint32_t private_data)
{
 8001464:	b510      	push	{r4, lr}
 8001466:	460c      	mov	r4, r1
   *psize =  USB_AUDIO_GetConfigDescriptor(pdata);
 8001468:	f7ff ffe6 	bl	8001438 <USB_AUDIO_GetConfigDescriptor>
 800146c:	8020      	strh	r0, [r4, #0]
    return 0;
}
 800146e:	2000      	movs	r0, #0
 8001470:	bd10      	pop	{r4, pc}
	...

08001474 <AUDIO_USB_Init>:
{
 8001474:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t control_count = 0;
 8001476:	2500      	movs	r5, #0
{
 8001478:	4604      	mov	r4, r0
  AUDIO_PlaybackSessionInit(&usb_audio_class_function->as_interfaces[interface_offset], &(usb_audio_class_function->controls[interface_offset]), &control_count, (uint32_t) &USB_AudioPlabackSession);
 800147a:	f10d 0207 	add.w	r2, sp, #7
 800147e:	1d01      	adds	r1, r0, #4
 8001480:	4b06      	ldr	r3, [pc, #24]	; (800149c <AUDIO_USB_Init+0x28>)
 8001482:	3024      	adds	r0, #36	; 0x24
  uint8_t control_count = 0;
 8001484:	f88d 5007 	strb.w	r5, [sp, #7]
  AUDIO_PlaybackSessionInit(&usb_audio_class_function->as_interfaces[interface_offset], &(usb_audio_class_function->controls[interface_offset]), &control_count, (uint32_t) &USB_AudioPlabackSession);
 8001488:	f7ff ff36 	bl	80012f8 <AUDIO_PlaybackSessionInit>
  total_control_count += control_count;
 800148c:	f89d 3007 	ldrb.w	r3, [sp, #7]
  usb_audio_class_function->as_interfaces_count = interface_offset;
 8001490:	2201      	movs	r2, #1
}
 8001492:	4628      	mov	r0, r5
  usb_audio_class_function->as_interfaces_count = interface_offset;
 8001494:	7062      	strb	r2, [r4, #1]
  usb_audio_class_function->control_count = total_control_count;
 8001496:	7023      	strb	r3, [r4, #0]
}
 8001498:	b003      	add	sp, #12
 800149a:	bd30      	pop	{r4, r5, pc}
 800149c:	20000494 	.word	0x20000494

080014a0 <wm8994_SetOutputMode>:
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
  uint32_t counter = 0; 
  
  switch (Output) 
 80014a0:	2901      	cmp	r1, #1
{
 80014a2:	b507      	push	{r0, r1, r2, lr}
 80014a4:	b2c0      	uxtb	r0, r0
  switch (Output) 
 80014a6:	d00f      	beq.n	80014c8 <wm8994_SetOutputMode+0x28>
 80014a8:	2903      	cmp	r1, #3
 80014aa:	d12f      	bne.n	800150c <wm8994_SetOutputMode+0x6c>
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 80014ac:	f640 720f 	movw	r2, #3855	; 0xf0f
 80014b0:	2105      	movs	r1, #5
 80014b2:	9001      	str	r0, [sp, #4]
 80014b4:	f001 fb94 	bl	8002be0 <AUDIO_IO_Write>
 80014b8:	2201      	movs	r2, #1
 80014ba:	f240 6101 	movw	r1, #1537	; 0x601
 80014be:	9801      	ldr	r0, [sp, #4]
 80014c0:	f001 fb8e 	bl	8002be0 <AUDIO_IO_Write>
 80014c4:	2201      	movs	r2, #1
 80014c6:	e00c      	b.n	80014e2 <wm8994_SetOutputMode+0x42>
 80014c8:	f640 420c 	movw	r2, #3084	; 0xc0c
 80014cc:	2105      	movs	r1, #5
 80014ce:	9001      	str	r0, [sp, #4]
 80014d0:	f001 fb86 	bl	8002be0 <AUDIO_IO_Write>
 80014d4:	2200      	movs	r2, #0
 80014d6:	f240 6101 	movw	r1, #1537	; 0x601
 80014da:	9801      	ldr	r0, [sp, #4]
 80014dc:	f001 fb80 	bl	8002be0 <AUDIO_IO_Write>
 80014e0:	2200      	movs	r2, #0
 80014e2:	f240 6102 	movw	r1, #1538	; 0x602
 80014e6:	9801      	ldr	r0, [sp, #4]
 80014e8:	f001 fb7a 	bl	8002be0 <AUDIO_IO_Write>
 80014ec:	2202      	movs	r2, #2
 80014ee:	f240 6104 	movw	r1, #1540	; 0x604
 80014f2:	9801      	ldr	r0, [sp, #4]
 80014f4:	f001 fb74 	bl	8002be0 <AUDIO_IO_Write>
 80014f8:	2202      	movs	r2, #2
 80014fa:	9801      	ldr	r0, [sp, #4]
 80014fc:	f240 6105 	movw	r1, #1541	; 0x605
 8001500:	f001 fb6e 	bl	8002be0 <AUDIO_IO_Write>
}
 8001504:	2000      	movs	r0, #0
 8001506:	b003      	add	sp, #12
 8001508:	f85d fb04 	ldr.w	pc, [sp], #4
 AUDIO_IO_Write(Addr, Reg, Value);
 800150c:	f240 3203 	movw	r2, #771	; 0x303
 8001510:	2105      	movs	r1, #5
 8001512:	9001      	str	r0, [sp, #4]
 8001514:	f001 fb64 	bl	8002be0 <AUDIO_IO_Write>
 8001518:	2201      	movs	r2, #1
 800151a:	f240 6101 	movw	r1, #1537	; 0x601
 800151e:	9801      	ldr	r0, [sp, #4]
 8001520:	f001 fb5e 	bl	8002be0 <AUDIO_IO_Write>
 8001524:	2201      	movs	r2, #1
 8001526:	f240 6102 	movw	r1, #1538	; 0x602
 800152a:	9801      	ldr	r0, [sp, #4]
 800152c:	f001 fb58 	bl	8002be0 <AUDIO_IO_Write>
 8001530:	2200      	movs	r2, #0
 8001532:	f240 6104 	movw	r1, #1540	; 0x604
 8001536:	9801      	ldr	r0, [sp, #4]
 8001538:	f001 fb52 	bl	8002be0 <AUDIO_IO_Write>
 800153c:	2200      	movs	r2, #0
 800153e:	e7dc      	b.n	80014fa <wm8994_SetOutputMode+0x5a>

08001540 <wm8994_SetFrequency>:
{
 8001540:	b508      	push	{r3, lr}
  switch (AudioFreq)
 8001542:	f245 6322 	movw	r3, #22050	; 0x5622
 8001546:	b2c0      	uxtb	r0, r0
 8001548:	4299      	cmp	r1, r3
 800154a:	d020      	beq.n	800158e <wm8994_SetFrequency+0x4e>
 800154c:	d80b      	bhi.n	8001566 <wm8994_SetFrequency+0x26>
 800154e:	f642 3311 	movw	r3, #11025	; 0x2b11
 8001552:	4299      	cmp	r1, r3
 8001554:	d019      	beq.n	800158a <wm8994_SetFrequency+0x4a>
 8001556:	f5b1 5f7a 	cmp.w	r1, #16000	; 0x3e80
 800155a:	d014      	beq.n	8001586 <wm8994_SetFrequency+0x46>
 800155c:	f5b1 5ffa 	cmp.w	r1, #8000	; 0x1f40
 8001560:	d00a      	beq.n	8001578 <wm8994_SetFrequency+0x38>
 AUDIO_IO_Write(Addr, Reg, Value);
 8001562:	2283      	movs	r2, #131	; 0x83
 8001564:	e009      	b.n	800157a <wm8994_SetFrequency+0x3a>
  switch (AudioFreq)
 8001566:	f64a 4344 	movw	r3, #44100	; 0xac44
 800156a:	4299      	cmp	r1, r3
 800156c:	d011      	beq.n	8001592 <wm8994_SetFrequency+0x52>
 800156e:	4b0a      	ldr	r3, [pc, #40]	; (8001598 <wm8994_SetFrequency+0x58>)
 8001570:	4299      	cmp	r1, r3
 8001572:	d1f6      	bne.n	8001562 <wm8994_SetFrequency+0x22>
 AUDIO_IO_Write(Addr, Reg, Value);
 8001574:	22a3      	movs	r2, #163	; 0xa3
 8001576:	e000      	b.n	800157a <wm8994_SetFrequency+0x3a>
 8001578:	2203      	movs	r2, #3
 800157a:	f44f 7104 	mov.w	r1, #528	; 0x210
 800157e:	f001 fb2f 	bl	8002be0 <AUDIO_IO_Write>
}
 8001582:	2000      	movs	r0, #0
 8001584:	bd08      	pop	{r3, pc}
 AUDIO_IO_Write(Addr, Reg, Value);
 8001586:	2233      	movs	r2, #51	; 0x33
 8001588:	e7f7      	b.n	800157a <wm8994_SetFrequency+0x3a>
 800158a:	2213      	movs	r2, #19
 800158c:	e7f5      	b.n	800157a <wm8994_SetFrequency+0x3a>
 800158e:	2243      	movs	r2, #67	; 0x43
 8001590:	e7f3      	b.n	800157a <wm8994_SetFrequency+0x3a>
 8001592:	2273      	movs	r2, #115	; 0x73
 8001594:	e7f1      	b.n	800157a <wm8994_SetFrequency+0x3a>
 8001596:	bf00      	nop
 8001598:	00017700 	.word	0x00017700

0800159c <wm8994_Reset>:
 800159c:	2200      	movs	r2, #0
 800159e:	b2c0      	uxtb	r0, r0
{
 80015a0:	b508      	push	{r3, lr}
 AUDIO_IO_Write(Addr, Reg, Value);
 80015a2:	4611      	mov	r1, r2
 80015a4:	f001 fb1c 	bl	8002be0 <AUDIO_IO_Write>
  outputEnabled = 0;
 80015a8:	4b02      	ldr	r3, [pc, #8]	; (80015b4 <wm8994_Reset+0x18>)
 80015aa:	2000      	movs	r0, #0
  inputEnabled=0;
 80015ac:	e9c3 0000 	strd	r0, r0, [r3]
}
 80015b0:	bd08      	pop	{r3, pc}
 80015b2:	bf00      	nop
 80015b4:	200002e8 	.word	0x200002e8

080015b8 <wm8994_DeInit>:
  AUDIO_IO_DeInit();
 80015b8:	f001 bb10 	b.w	8002bdc <AUDIO_IO_DeInit>

080015bc <wm8994_ReadID>:
{
 80015bc:	b510      	push	{r4, lr}
 80015be:	4604      	mov	r4, r0
  AUDIO_IO_Init();
 80015c0:	f001 fb06 	bl	8002bd0 <AUDIO_IO_Init>
  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 80015c4:	2100      	movs	r1, #0
 80015c6:	b2e0      	uxtb	r0, r4
 80015c8:	f001 fb1e 	bl	8002c08 <AUDIO_IO_Read>
}
 80015cc:	bd10      	pop	{r4, pc}
	...

080015d0 <wm8994_SetMute>:
  if (outputEnabled != 0)
 80015d0:	4b10      	ldr	r3, [pc, #64]	; (8001614 <wm8994_SetMute+0x44>)
 80015d2:	681b      	ldr	r3, [r3, #0]
{
 80015d4:	b507      	push	{r0, r1, r2, lr}
  if (outputEnabled != 0)
 80015d6:	b183      	cbz	r3, 80015fa <wm8994_SetMute+0x2a>
    if(Cmd == AUDIO_MUTE_ON)
 80015d8:	2901      	cmp	r1, #1
 80015da:	b2c0      	uxtb	r0, r0
 80015dc:	d111      	bne.n	8001602 <wm8994_SetMute+0x32>
 AUDIO_IO_Write(Addr, Reg, Value);
 80015de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015e2:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80015e6:	9001      	str	r0, [sp, #4]
 80015e8:	f001 fafa 	bl	8002be0 <AUDIO_IO_Write>
 80015ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015f0:	f240 4122 	movw	r1, #1058	; 0x422
 80015f4:	9801      	ldr	r0, [sp, #4]
 80015f6:	f001 faf3 	bl	8002be0 <AUDIO_IO_Write>
}
 80015fa:	2000      	movs	r0, #0
 80015fc:	b003      	add	sp, #12
 80015fe:	f85d fb04 	ldr.w	pc, [sp], #4
 AUDIO_IO_Write(Addr, Reg, Value);
 8001602:	2200      	movs	r2, #0
 8001604:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8001608:	9001      	str	r0, [sp, #4]
 800160a:	f001 fae9 	bl	8002be0 <AUDIO_IO_Write>
 800160e:	2200      	movs	r2, #0
 8001610:	e7ee      	b.n	80015f0 <wm8994_SetMute+0x20>
 8001612:	bf00      	nop
 8001614:	200002e8 	.word	0x200002e8

08001618 <wm8994_Play>:
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8001618:	2100      	movs	r1, #0
 800161a:	f7ff bfd9 	b.w	80015d0 <wm8994_SetMute>

0800161e <wm8994_Resume>:
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800161e:	2100      	movs	r1, #0
 8001620:	f7ff bfd6 	b.w	80015d0 <wm8994_SetMute>

08001624 <wm8994_Pause>:
{  
 8001624:	b538      	push	{r3, r4, r5, lr}
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8001626:	2101      	movs	r1, #1
{  
 8001628:	4605      	mov	r5, r0
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800162a:	f7ff ffd1 	bl	80015d0 <wm8994_SetMute>
 800162e:	4604      	mov	r4, r0
 AUDIO_IO_Write(Addr, Reg, Value);
 8001630:	2201      	movs	r2, #1
 8001632:	b2e8      	uxtb	r0, r5
 8001634:	2102      	movs	r1, #2
 8001636:	f001 fad3 	bl	8002be0 <AUDIO_IO_Write>
}
 800163a:	4620      	mov	r0, r4
 800163c:	bd38      	pop	{r3, r4, r5, pc}
	...

08001640 <wm8994_SetVolume>:
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8001640:	2964      	cmp	r1, #100	; 0x64
 8001642:	f04f 0264 	mov.w	r2, #100	; 0x64
  if (outputEnabled != 0)
 8001646:	4b3e      	ldr	r3, [pc, #248]	; (8001740 <wm8994_SetVolume+0x100>)
{
 8001648:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 800164c:	bf98      	it	ls
 800164e:	ebc1 1781 	rsbls	r7, r1, r1, lsl #6
  if (outputEnabled != 0)
 8001652:	681e      	ldr	r6, [r3, #0]
{
 8001654:	4605      	mov	r5, r0
 8001656:	460c      	mov	r4, r1
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8001658:	bf88      	it	hi
 800165a:	4617      	movhi	r7, r2
 800165c:	4698      	mov	r8, r3
 800165e:	bf9c      	itt	ls
 8001660:	fbb7 f2f2 	udivls	r2, r7, r2
 8001664:	b2d7      	uxtbls	r7, r2
  if (outputEnabled != 0)
 8001666:	b32e      	cbz	r6, 80016b4 <wm8994_SetVolume+0x74>
    if(convertedvol > 0x3E)
 8001668:	2f3e      	cmp	r7, #62	; 0x3e
 800166a:	d91d      	bls.n	80016a8 <wm8994_SetVolume+0x68>
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800166c:	2100      	movs	r1, #0
 800166e:	f7ff ffaf 	bl	80015d0 <wm8994_SetMute>
 8001672:	4606      	mov	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 8001674:	b2e8      	uxtb	r0, r5
 AUDIO_IO_Write(Addr, Reg, Value);
 8001676:	f240 127f 	movw	r2, #383	; 0x17f
 800167a:	211c      	movs	r1, #28
 800167c:	9000      	str	r0, [sp, #0]
 800167e:	f001 faaf 	bl	8002be0 <AUDIO_IO_Write>
 8001682:	f240 127f 	movw	r2, #383	; 0x17f
 8001686:	211d      	movs	r1, #29
 8001688:	9800      	ldr	r0, [sp, #0]
 800168a:	f001 faa9 	bl	8002be0 <AUDIO_IO_Write>
 800168e:	f240 127f 	movw	r2, #383	; 0x17f
 8001692:	2126      	movs	r1, #38	; 0x26
 8001694:	9800      	ldr	r0, [sp, #0]
 8001696:	f001 faa3 	bl	8002be0 <AUDIO_IO_Write>
 800169a:	f240 127f 	movw	r2, #383	; 0x17f
 800169e:	2127      	movs	r1, #39	; 0x27
 80016a0:	9800      	ldr	r0, [sp, #0]
 80016a2:	f001 fa9d 	bl	8002be0 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 80016a6:	e005      	b.n	80016b4 <wm8994_SetVolume+0x74>
    else if (Volume == 0)
 80016a8:	2900      	cmp	r1, #0
 80016aa:	d130      	bne.n	800170e <wm8994_SetVolume+0xce>
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80016ac:	2101      	movs	r1, #1
 80016ae:	f7ff ff8f 	bl	80015d0 <wm8994_SetMute>
 80016b2:	4606      	mov	r6, r0
  if (inputEnabled != 0)
 80016b4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80016b8:	b32b      	cbz	r3, 8001706 <wm8994_SetVolume+0xc6>
    convertedvol = VOLUME_IN_CONVERT(Volume);
 80016ba:	2c63      	cmp	r4, #99	; 0x63
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 80016bc:	b2e8      	uxtb	r0, r5
 AUDIO_IO_Write(Addr, Reg, Value);
 80016be:	f44f 6180 	mov.w	r1, #1024	; 0x400
    convertedvol = VOLUME_IN_CONVERT(Volume);
 80016c2:	bf9a      	itte	ls
 80016c4:	ebc4 1204 	rsbls	r2, r4, r4, lsl #4
 80016c8:	2464      	movls	r4, #100	; 0x64
 80016ca:	22ef      	movhi	r2, #239	; 0xef
 AUDIO_IO_Write(Addr, Reg, Value);
 80016cc:	9000      	str	r0, [sp, #0]
    convertedvol = VOLUME_IN_CONVERT(Volume);
 80016ce:	bf9e      	ittt	ls
 80016d0:	0112      	lslls	r2, r2, #4
 80016d2:	fbb2 f2f4 	udivls	r2, r2, r4
 80016d6:	b2d2      	uxtbls	r2, r2
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 80016d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 AUDIO_IO_Write(Addr, Reg, Value);
 80016dc:	9201      	str	r2, [sp, #4]
 80016de:	f001 fa7f 	bl	8002be0 <AUDIO_IO_Write>
 80016e2:	9a01      	ldr	r2, [sp, #4]
 80016e4:	f240 4101 	movw	r1, #1025	; 0x401
 80016e8:	9800      	ldr	r0, [sp, #0]
 80016ea:	f001 fa79 	bl	8002be0 <AUDIO_IO_Write>
 80016ee:	9a01      	ldr	r2, [sp, #4]
 80016f0:	f240 4104 	movw	r1, #1028	; 0x404
 80016f4:	9800      	ldr	r0, [sp, #0]
 80016f6:	f001 fa73 	bl	8002be0 <AUDIO_IO_Write>
 80016fa:	9a01      	ldr	r2, [sp, #4]
 80016fc:	f240 4105 	movw	r1, #1029	; 0x405
 8001700:	9800      	ldr	r0, [sp, #0]
 8001702:	f001 fa6d 	bl	8002be0 <AUDIO_IO_Write>
}
 8001706:	4630      	mov	r0, r6
 8001708:	b002      	add	sp, #8
 800170a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800170e:	2100      	movs	r1, #0
 8001710:	f7ff ff5e 	bl	80015d0 <wm8994_SetMute>
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 8001714:	f447 72a0 	orr.w	r2, r7, #320	; 0x140
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8001718:	4606      	mov	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 800171a:	b2e8      	uxtb	r0, r5
 AUDIO_IO_Write(Addr, Reg, Value);
 800171c:	211c      	movs	r1, #28
 800171e:	9201      	str	r2, [sp, #4]
 8001720:	9000      	str	r0, [sp, #0]
 8001722:	f001 fa5d 	bl	8002be0 <AUDIO_IO_Write>
 8001726:	9a01      	ldr	r2, [sp, #4]
 8001728:	211d      	movs	r1, #29
 800172a:	9800      	ldr	r0, [sp, #0]
 800172c:	f001 fa58 	bl	8002be0 <AUDIO_IO_Write>
 8001730:	9a01      	ldr	r2, [sp, #4]
 8001732:	2126      	movs	r1, #38	; 0x26
 8001734:	9800      	ldr	r0, [sp, #0]
 8001736:	f001 fa53 	bl	8002be0 <AUDIO_IO_Write>
 800173a:	9a01      	ldr	r2, [sp, #4]
 800173c:	e7af      	b.n	800169e <wm8994_SetVolume+0x5e>
 800173e:	bf00      	nop
 8001740:	200002e8 	.word	0x200002e8

08001744 <wm8994_InitExt>:
{
 8001744:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001748:	4681      	mov	r9, r0
 800174a:	4698      	mov	r8, r3
  uint16_t input_device = OutputInputDevice & 0xFF00;
 800174c:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
{
 8001750:	4692      	mov	sl, r2
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 8001752:	fa5f f489 	uxtb.w	r4, r9
  uint16_t output_device = OutputInputDevice & 0xFF;
 8001756:	b2ce      	uxtb	r6, r1
  AUDIO_IO_Init();
 8001758:	f001 fa3a 	bl	8002bd0 <AUDIO_IO_Init>
 AUDIO_IO_Write(Addr, Reg, Value);
 800175c:	2203      	movs	r2, #3
 800175e:	f44f 7181 	mov.w	r1, #258	; 0x102
 8001762:	4620      	mov	r0, r4
 8001764:	f001 fa3c 	bl	8002be0 <AUDIO_IO_Write>
 8001768:	2200      	movs	r2, #0
 800176a:	f640 0117 	movw	r1, #2071	; 0x817
 800176e:	4620      	mov	r0, r4
 8001770:	f001 fa36 	bl	8002be0 <AUDIO_IO_Write>
 8001774:	2200      	movs	r2, #0
 8001776:	f44f 7181 	mov.w	r1, #258	; 0x102
 800177a:	4620      	mov	r0, r4
 800177c:	f001 fa30 	bl	8002be0 <AUDIO_IO_Write>
 8001780:	226c      	movs	r2, #108	; 0x6c
 8001782:	2139      	movs	r1, #57	; 0x39
 8001784:	4620      	mov	r0, r4
 8001786:	f001 fa2b 	bl	8002be0 <AUDIO_IO_Write>
  if (input_device > 0)
 800178a:	b3c5      	cbz	r5, 80017fe <wm8994_InitExt+0xba>
 AUDIO_IO_Write(Addr, Reg, Value);
 800178c:	2213      	movs	r2, #19
 800178e:	2101      	movs	r1, #1
 8001790:	4620      	mov	r0, r4
 8001792:	f001 fa25 	bl	8002be0 <AUDIO_IO_Write>
  AUDIO_IO_Delay(50);
 8001796:	2032      	movs	r0, #50	; 0x32
 8001798:	f8df b498 	ldr.w	fp, [pc, #1176]	; 8001c34 <wm8994_InitExt+0x4f0>
 800179c:	f001 fa4c 	bl	8002c38 <AUDIO_IO_Delay>
  if (output_device > 0)
 80017a0:	2e00      	cmp	r6, #0
 80017a2:	f000 809a 	beq.w	80018da <wm8994_InitExt+0x196>
    outputEnabled = 1;
 80017a6:	2701      	movs	r7, #1
    switch (output_device)
 80017a8:	2e02      	cmp	r6, #2
    outputEnabled = 1;
 80017aa:	f8cb 7000 	str.w	r7, [fp]
    switch (output_device)
 80017ae:	d07a      	beq.n	80018a6 <wm8994_InitExt+0x162>
 80017b0:	2e03      	cmp	r6, #3
 80017b2:	d026      	beq.n	8001802 <wm8994_InitExt+0xbe>
 80017b4:	42be      	cmp	r6, r7
 80017b6:	d176      	bne.n	80018a6 <wm8994_InitExt+0x162>
 AUDIO_IO_Write(Addr, Reg, Value);
 80017b8:	f640 420c 	movw	r2, #3084	; 0xc0c
 80017bc:	2105      	movs	r1, #5
 80017be:	4620      	mov	r0, r4
 80017c0:	f001 fa0e 	bl	8002be0 <AUDIO_IO_Write>
 80017c4:	2200      	movs	r2, #0
 80017c6:	f240 6101 	movw	r1, #1537	; 0x601
 80017ca:	4620      	mov	r0, r4
 80017cc:	f001 fa08 	bl	8002be0 <AUDIO_IO_Write>
 80017d0:	2200      	movs	r2, #0
 80017d2:	f240 6102 	movw	r1, #1538	; 0x602
 80017d6:	4620      	mov	r0, r4
 80017d8:	f001 fa02 	bl	8002be0 <AUDIO_IO_Write>
 80017dc:	2202      	movs	r2, #2
 80017de:	f240 6104 	movw	r1, #1540	; 0x604
 80017e2:	4620      	mov	r0, r4
 80017e4:	f001 f9fc 	bl	8002be0 <AUDIO_IO_Write>
 80017e8:	2202      	movs	r2, #2
 80017ea:	f240 6105 	movw	r1, #1541	; 0x605
 80017ee:	4620      	mov	r0, r4
 80017f0:	f001 f9f6 	bl	8002be0 <AUDIO_IO_Write>
  if (input_device > 0)
 80017f4:	bb3d      	cbnz	r5, 8001846 <wm8994_InitExt+0x102>
    inputEnabled = 0;
 80017f6:	462f      	mov	r7, r5
 80017f8:	f8cb 5004 	str.w	r5, [fp, #4]
 80017fc:	e032      	b.n	8001864 <wm8994_InitExt+0x120>
 AUDIO_IO_Write(Addr, Reg, Value);
 80017fe:	2203      	movs	r2, #3
 8001800:	e7c5      	b.n	800178e <wm8994_InitExt+0x4a>
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8001802:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 AUDIO_IO_Write(Addr, Reg, Value);
 8001806:	f640 720f 	movw	r2, #3855	; 0xf0f
 800180a:	f04f 0105 	mov.w	r1, #5
 800180e:	4620      	mov	r0, r4
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8001810:	d13f      	bne.n	8001892 <wm8994_InitExt+0x14e>
 AUDIO_IO_Write(Addr, Reg, Value);
 8001812:	f001 f9e5 	bl	8002be0 <AUDIO_IO_Write>
 8001816:	4632      	mov	r2, r6
 8001818:	f240 6101 	movw	r1, #1537	; 0x601
 800181c:	4620      	mov	r0, r4
 800181e:	f001 f9df 	bl	8002be0 <AUDIO_IO_Write>
 8001822:	4632      	mov	r2, r6
 8001824:	f240 6102 	movw	r1, #1538	; 0x602
 8001828:	4620      	mov	r0, r4
 800182a:	f001 f9d9 	bl	8002be0 <AUDIO_IO_Write>
 800182e:	4632      	mov	r2, r6
 8001830:	f240 6104 	movw	r1, #1540	; 0x604
 8001834:	4620      	mov	r0, r4
 8001836:	f001 f9d3 	bl	8002be0 <AUDIO_IO_Write>
 800183a:	4632      	mov	r2, r6
 800183c:	f240 6105 	movw	r1, #1541	; 0x605
 8001840:	4620      	mov	r0, r4
 8001842:	f001 f9cd 	bl	8002be0 <AUDIO_IO_Write>
    inputEnabled = 1;
 8001846:	2701      	movs	r7, #1
    switch (input_device)
 8001848:	f5b5 7f40 	cmp.w	r5, #768	; 0x300
    inputEnabled = 1;
 800184c:	f8cb 7004 	str.w	r7, [fp, #4]
    switch (input_device)
 8001850:	f000 809d 	beq.w	800198e <wm8994_InitExt+0x24a>
 8001854:	d844      	bhi.n	80018e0 <wm8994_InitExt+0x19c>
 8001856:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800185a:	f000 80c7 	beq.w	80019ec <wm8994_InitExt+0x2a8>
 800185e:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8001862:	d06e      	beq.n	8001942 <wm8994_InitExt+0x1fe>
  switch (AudioFreq)
 8001864:	f5b8 4ffa 	cmp.w	r8, #32000	; 0x7d00
 8001868:	f000 81a5 	beq.w	8001bb6 <wm8994_InitExt+0x472>
 800186c:	f200 80c8 	bhi.w	8001a00 <wm8994_InitExt+0x2bc>
 8001870:	f5b8 5f7a 	cmp.w	r8, #16000	; 0x3e80
 8001874:	f000 819d 	beq.w	8001bb2 <wm8994_InitExt+0x46e>
 8001878:	f200 80bb 	bhi.w	80019f2 <wm8994_InitExt+0x2ae>
 800187c:	f5b8 5ffa 	cmp.w	r8, #8000	; 0x1f40
 8001880:	f000 80ce 	beq.w	8001a20 <wm8994_InitExt+0x2dc>
 8001884:	f642 3311 	movw	r3, #11025	; 0x2b11
 8001888:	4598      	cmp	r8, r3
 800188a:	f000 8198 	beq.w	8001bbe <wm8994_InitExt+0x47a>
 AUDIO_IO_Write(Addr, Reg, Value);
 800188e:	2283      	movs	r2, #131	; 0x83
 8001890:	e0c7      	b.n	8001a22 <wm8994_InitExt+0x2de>
 8001892:	f001 f9a5 	bl	8002be0 <AUDIO_IO_Write>
 8001896:	463a      	mov	r2, r7
 8001898:	f240 6101 	movw	r1, #1537	; 0x601
 800189c:	4620      	mov	r0, r4
 800189e:	f001 f99f 	bl	8002be0 <AUDIO_IO_Write>
 80018a2:	463a      	mov	r2, r7
 80018a4:	e795      	b.n	80017d2 <wm8994_InitExt+0x8e>
 80018a6:	f240 3203 	movw	r2, #771	; 0x303
 80018aa:	2105      	movs	r1, #5
 80018ac:	4620      	mov	r0, r4
 80018ae:	f001 f997 	bl	8002be0 <AUDIO_IO_Write>
 80018b2:	463a      	mov	r2, r7
 80018b4:	f240 6101 	movw	r1, #1537	; 0x601
 80018b8:	4620      	mov	r0, r4
 80018ba:	f001 f991 	bl	8002be0 <AUDIO_IO_Write>
 80018be:	463a      	mov	r2, r7
 80018c0:	f240 6102 	movw	r1, #1538	; 0x602
 80018c4:	4620      	mov	r0, r4
 80018c6:	f001 f98b 	bl	8002be0 <AUDIO_IO_Write>
 80018ca:	2200      	movs	r2, #0
 80018cc:	f240 6104 	movw	r1, #1540	; 0x604
 80018d0:	4620      	mov	r0, r4
 80018d2:	f001 f985 	bl	8002be0 <AUDIO_IO_Write>
 80018d6:	2200      	movs	r2, #0
 80018d8:	e787      	b.n	80017ea <wm8994_InitExt+0xa6>
    outputEnabled = 0;
 80018da:	f8cb 6000 	str.w	r6, [fp]
 80018de:	e789      	b.n	80017f4 <wm8994_InitExt+0xb0>
    switch (input_device)
 80018e0:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 80018e4:	d1be      	bne.n	8001864 <wm8994_InitExt+0x120>
 AUDIO_IO_Write(Addr, Reg, Value);
 80018e6:	f640 723c 	movw	r2, #3900	; 0xf3c
 80018ea:	2104      	movs	r1, #4
 80018ec:	4620      	mov	r0, r4
 80018ee:	f001 f977 	bl	8002be0 <AUDIO_IO_Write>
 80018f2:	22db      	movs	r2, #219	; 0xdb
 80018f4:	f44f 618a 	mov.w	r1, #1104	; 0x450
 80018f8:	4620      	mov	r0, r4
 80018fa:	f001 f971 	bl	8002be0 <AUDIO_IO_Write>
 80018fe:	22db      	movs	r2, #219	; 0xdb
 8001900:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8001904:	4620      	mov	r0, r4
 8001906:	f001 f96b 	bl	8002be0 <AUDIO_IO_Write>
 800190a:	f246 32a0 	movw	r2, #25504	; 0x63a0
 800190e:	2102      	movs	r1, #2
 8001910:	4620      	mov	r0, r4
 8001912:	f001 f965 	bl	8002be0 <AUDIO_IO_Write>
 8001916:	2202      	movs	r2, #2
 8001918:	f240 6106 	movw	r1, #1542	; 0x606
 800191c:	4620      	mov	r0, r4
 800191e:	f001 f95f 	bl	8002be0 <AUDIO_IO_Write>
 8001922:	2202      	movs	r2, #2
 8001924:	f240 6107 	movw	r1, #1543	; 0x607
 8001928:	4620      	mov	r0, r4
 800192a:	f001 f959 	bl	8002be0 <AUDIO_IO_Write>
 800192e:	2202      	movs	r2, #2
 8001930:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8001934:	4620      	mov	r0, r4
 8001936:	f001 f953 	bl	8002be0 <AUDIO_IO_Write>
 800193a:	2202      	movs	r2, #2
 800193c:	f240 6109 	movw	r1, #1545	; 0x609
 8001940:	e04f      	b.n	80019e2 <wm8994_InitExt+0x29e>
 8001942:	f44f 6243 	mov.w	r2, #3120	; 0xc30
 8001946:	2104      	movs	r1, #4
 8001948:	4620      	mov	r0, r4
 800194a:	f001 f949 	bl	8002be0 <AUDIO_IO_Write>
 800194e:	22db      	movs	r2, #219	; 0xdb
 8001950:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8001954:	4620      	mov	r0, r4
 8001956:	f001 f943 	bl	8002be0 <AUDIO_IO_Write>
 800195a:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 800195e:	2102      	movs	r1, #2
 8001960:	4620      	mov	r0, r4
 8001962:	f001 f93d 	bl	8002be0 <AUDIO_IO_Write>
 8001966:	2202      	movs	r2, #2
 8001968:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 800196c:	4620      	mov	r0, r4
 800196e:	f001 f937 	bl	8002be0 <AUDIO_IO_Write>
 8001972:	2202      	movs	r2, #2
 8001974:	f240 6109 	movw	r1, #1545	; 0x609
 8001978:	4620      	mov	r0, r4
 800197a:	f001 f931 	bl	8002be0 <AUDIO_IO_Write>
 800197e:	220e      	movs	r2, #14
 8001980:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8001984:	4620      	mov	r0, r4
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8001986:	2700      	movs	r7, #0
 AUDIO_IO_Write(Addr, Reg, Value);
 8001988:	f001 f92a 	bl	8002be0 <AUDIO_IO_Write>
      break;
 800198c:	e76a      	b.n	8001864 <wm8994_InitExt+0x120>
 AUDIO_IO_Write(Addr, Reg, Value);
 800198e:	2211      	movs	r2, #17
 8001990:	2128      	movs	r1, #40	; 0x28
 8001992:	4620      	mov	r0, r4
 8001994:	f001 f924 	bl	8002be0 <AUDIO_IO_Write>
 8001998:	2235      	movs	r2, #53	; 0x35
 800199a:	2129      	movs	r1, #41	; 0x29
 800199c:	4620      	mov	r0, r4
 800199e:	f001 f91f 	bl	8002be0 <AUDIO_IO_Write>
 80019a2:	2235      	movs	r2, #53	; 0x35
 80019a4:	212a      	movs	r1, #42	; 0x2a
 80019a6:	4620      	mov	r0, r4
 80019a8:	f001 f91a 	bl	8002be0 <AUDIO_IO_Write>
 80019ac:	f240 3203 	movw	r2, #771	; 0x303
 80019b0:	2104      	movs	r1, #4
 80019b2:	4620      	mov	r0, r4
 80019b4:	f001 f914 	bl	8002be0 <AUDIO_IO_Write>
 80019b8:	22db      	movs	r2, #219	; 0xdb
 80019ba:	f44f 6188 	mov.w	r1, #1088	; 0x440
 80019be:	4620      	mov	r0, r4
 80019c0:	f001 f90e 	bl	8002be0 <AUDIO_IO_Write>
 80019c4:	f246 3250 	movw	r2, #25424	; 0x6350
 80019c8:	2102      	movs	r1, #2
 80019ca:	4620      	mov	r0, r4
 80019cc:	f001 f908 	bl	8002be0 <AUDIO_IO_Write>
 80019d0:	2202      	movs	r2, #2
 80019d2:	f240 6106 	movw	r1, #1542	; 0x606
 80019d6:	4620      	mov	r0, r4
 80019d8:	f001 f902 	bl	8002be0 <AUDIO_IO_Write>
 80019dc:	2202      	movs	r2, #2
 80019de:	f240 6107 	movw	r1, #1543	; 0x607
 80019e2:	4620      	mov	r0, r4
 80019e4:	f001 f8fc 	bl	8002be0 <AUDIO_IO_Write>
 80019e8:	220d      	movs	r2, #13
 80019ea:	e7c9      	b.n	8001980 <wm8994_InitExt+0x23c>
 80019ec:	f44f 7243 	mov.w	r2, #780	; 0x30c
 80019f0:	e7de      	b.n	80019b0 <wm8994_InitExt+0x26c>
  switch (AudioFreq)
 80019f2:	f245 6322 	movw	r3, #22050	; 0x5622
 80019f6:	4598      	cmp	r8, r3
 80019f8:	f47f af49 	bne.w	800188e <wm8994_InitExt+0x14a>
 AUDIO_IO_Write(Addr, Reg, Value);
 80019fc:	2243      	movs	r2, #67	; 0x43
 80019fe:	e010      	b.n	8001a22 <wm8994_InitExt+0x2de>
  switch (AudioFreq)
 8001a00:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8001a04:	4598      	cmp	r8, r3
 8001a06:	f43f af42 	beq.w	800188e <wm8994_InitExt+0x14a>
 8001a0a:	4b89      	ldr	r3, [pc, #548]	; (8001c30 <wm8994_InitExt+0x4ec>)
 8001a0c:	4598      	cmp	r8, r3
 8001a0e:	f000 80d4 	beq.w	8001bba <wm8994_InitExt+0x476>
 8001a12:	f64a 4344 	movw	r3, #44100	; 0xac44
 8001a16:	4598      	cmp	r8, r3
 8001a18:	f47f af39 	bne.w	800188e <wm8994_InitExt+0x14a>
 AUDIO_IO_Write(Addr, Reg, Value);
 8001a1c:	2273      	movs	r2, #115	; 0x73
 8001a1e:	e000      	b.n	8001a22 <wm8994_InitExt+0x2de>
 8001a20:	2203      	movs	r2, #3
 8001a22:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001a26:	4620      	mov	r0, r4
 8001a28:	f001 f8da 	bl	8002be0 <AUDIO_IO_Write>
  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8001a2c:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8001a30:	f040 80c7 	bne.w	8001bc2 <wm8994_InitExt+0x47e>
 AUDIO_IO_Write(Addr, Reg, Value);
 8001a34:	f244 0218 	movw	r2, #16408	; 0x4018
 8001a38:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001a3c:	4620      	mov	r0, r4
 8001a3e:	f001 f8cf 	bl	8002be0 <AUDIO_IO_Write>
 8001a42:	2200      	movs	r2, #0
 8001a44:	f240 3102 	movw	r1, #770	; 0x302
 8001a48:	4620      	mov	r0, r4
 8001a4a:	f001 f8c9 	bl	8002be0 <AUDIO_IO_Write>
 8001a4e:	220a      	movs	r2, #10
 8001a50:	f44f 7102 	mov.w	r1, #520	; 0x208
 8001a54:	4620      	mov	r0, r4
 8001a56:	f001 f8c3 	bl	8002be0 <AUDIO_IO_Write>
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a60:	4620      	mov	r0, r4
 8001a62:	f001 f8bd 	bl	8002be0 <AUDIO_IO_Write>
  if (output_device > 0)  /* Audio output selected */
 8001a66:	2e00      	cmp	r6, #0
 8001a68:	f000 8082 	beq.w	8001b70 <wm8994_InitExt+0x42c>
 AUDIO_IO_Write(Addr, Reg, Value);
 8001a6c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001a70:	2103      	movs	r1, #3
 8001a72:	4620      	mov	r0, r4
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 8001a74:	f243 3603 	movw	r6, #13059	; 0x3303
 AUDIO_IO_Write(Addr, Reg, Value);
 8001a78:	f001 f8b2 	bl	8002be0 <AUDIO_IO_Write>
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	2122      	movs	r1, #34	; 0x22
 8001a80:	4620      	mov	r0, r4
 8001a82:	f001 f8ad 	bl	8002be0 <AUDIO_IO_Write>
 8001a86:	2200      	movs	r2, #0
 8001a88:	2123      	movs	r1, #35	; 0x23
 8001a8a:	4620      	mov	r0, r4
 8001a8c:	f001 f8a8 	bl	8002be0 <AUDIO_IO_Write>
 8001a90:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001a94:	2136      	movs	r1, #54	; 0x36
 8001a96:	4620      	mov	r0, r4
 8001a98:	f001 f8a2 	bl	8002be0 <AUDIO_IO_Write>
 8001a9c:	f243 0203 	movw	r2, #12291	; 0x3003
 8001aa0:	2101      	movs	r1, #1
 8001aa2:	4620      	mov	r0, r4
 8001aa4:	f001 f89c 	bl	8002be0 <AUDIO_IO_Write>
    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8001aa8:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 AUDIO_IO_Write(Addr, Reg, Value);
 8001aac:	f04f 0151 	mov.w	r1, #81	; 0x51
 8001ab0:	4620      	mov	r0, r4
 8001ab2:	bf0c      	ite	eq
 8001ab4:	f240 2205 	movweq	r2, #517	; 0x205
 8001ab8:	2205      	movne	r2, #5
 8001aba:	f001 f891 	bl	8002be0 <AUDIO_IO_Write>
 8001abe:	f243 3203 	movw	r2, #13059	; 0x3303
 8001ac2:	2101      	movs	r1, #1
 8001ac4:	4620      	mov	r0, r4
 8001ac6:	f001 f88b 	bl	8002be0 <AUDIO_IO_Write>
 8001aca:	2222      	movs	r2, #34	; 0x22
 8001acc:	2160      	movs	r1, #96	; 0x60
 8001ace:	4620      	mov	r0, r4
 8001ad0:	f001 f886 	bl	8002be0 <AUDIO_IO_Write>
 8001ad4:	f649 7225 	movw	r2, #40741	; 0x9f25
 8001ad8:	214c      	movs	r1, #76	; 0x4c
 8001ada:	4620      	mov	r0, r4
 8001adc:	f001 f880 	bl	8002be0 <AUDIO_IO_Write>
    AUDIO_IO_Delay(15);
 8001ae0:	200f      	movs	r0, #15
 8001ae2:	f001 f8a9 	bl	8002c38 <AUDIO_IO_Delay>
 AUDIO_IO_Write(Addr, Reg, Value);
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	212d      	movs	r1, #45	; 0x2d
 8001aea:	4620      	mov	r0, r4
 8001aec:	f001 f878 	bl	8002be0 <AUDIO_IO_Write>
 8001af0:	2201      	movs	r2, #1
 8001af2:	212e      	movs	r1, #46	; 0x2e
 8001af4:	4620      	mov	r0, r4
 8001af6:	f001 f873 	bl	8002be0 <AUDIO_IO_Write>
 8001afa:	f44f 724c 	mov.w	r2, #816	; 0x330
 8001afe:	2103      	movs	r1, #3
 8001b00:	4620      	mov	r0, r4
 8001b02:	f001 f86d 	bl	8002be0 <AUDIO_IO_Write>
 8001b06:	2233      	movs	r2, #51	; 0x33
 8001b08:	2154      	movs	r1, #84	; 0x54
 8001b0a:	4620      	mov	r0, r4
 8001b0c:	f001 f868 	bl	8002be0 <AUDIO_IO_Write>
    AUDIO_IO_Delay(250);
 8001b10:	20fa      	movs	r0, #250	; 0xfa
 8001b12:	f001 f891 	bl	8002c38 <AUDIO_IO_Delay>
 AUDIO_IO_Write(Addr, Reg, Value);
 8001b16:	22ee      	movs	r2, #238	; 0xee
 8001b18:	2160      	movs	r1, #96	; 0x60
 8001b1a:	4620      	mov	r0, r4
 8001b1c:	f001 f860 	bl	8002be0 <AUDIO_IO_Write>
 8001b20:	22c0      	movs	r2, #192	; 0xc0
 8001b22:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8001b26:	4620      	mov	r0, r4
 8001b28:	f001 f85a 	bl	8002be0 <AUDIO_IO_Write>
 8001b2c:	22c0      	movs	r2, #192	; 0xc0
 8001b2e:	f240 6111 	movw	r1, #1553	; 0x611
 8001b32:	4620      	mov	r0, r4
 8001b34:	f001 f854 	bl	8002be0 <AUDIO_IO_Write>
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8001b3e:	4620      	mov	r0, r4
 8001b40:	f001 f84e 	bl	8002be0 <AUDIO_IO_Write>
 8001b44:	22c0      	movs	r2, #192	; 0xc0
 8001b46:	f240 6112 	movw	r1, #1554	; 0x612
 8001b4a:	4620      	mov	r0, r4
 8001b4c:	f001 f848 	bl	8002be0 <AUDIO_IO_Write>
 8001b50:	22c0      	movs	r2, #192	; 0xc0
 8001b52:	f240 6113 	movw	r1, #1555	; 0x613
 8001b56:	4620      	mov	r0, r4
 8001b58:	f001 f842 	bl	8002be0 <AUDIO_IO_Write>
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f240 4122 	movw	r1, #1058	; 0x422
 8001b62:	4620      	mov	r0, r4
 8001b64:	f001 f83c 	bl	8002be0 <AUDIO_IO_Write>
    wm8994_SetVolume(DeviceAddr, Volume);
 8001b68:	4651      	mov	r1, sl
 8001b6a:	4648      	mov	r0, r9
 8001b6c:	f7ff fd68 	bl	8001640 <wm8994_SetVolume>
  if (input_device > 0) /* Audio input selected */
 8001b70:	b1e5      	cbz	r5, 8001bac <wm8994_InitExt+0x468>
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8001b72:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8001b76:	d002      	beq.n	8001b7e <wm8994_InitExt+0x43a>
 8001b78:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8001b7c:	d12a      	bne.n	8001bd4 <wm8994_InitExt+0x490>
 AUDIO_IO_Write(Addr, Reg, Value);
 8001b7e:	f046 0213 	orr.w	r2, r6, #19
 8001b82:	2101      	movs	r1, #1
 8001b84:	4620      	mov	r0, r4
 8001b86:	f001 f82b 	bl	8002be0 <AUDIO_IO_Write>
 8001b8a:	2202      	movs	r2, #2
 8001b8c:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8001b90:	4620      	mov	r0, r4
 8001b92:	f001 f825 	bl	8002be0 <AUDIO_IO_Write>
 8001b96:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001b9a:	f240 4111 	movw	r1, #1041	; 0x411
 8001b9e:	4620      	mov	r0, r4
 8001ba0:	f001 f81e 	bl	8002be0 <AUDIO_IO_Write>
    wm8994_SetVolume(DeviceAddr, Volume);
 8001ba4:	4651      	mov	r1, sl
 8001ba6:	4648      	mov	r0, r9
 8001ba8:	f7ff fd4a 	bl	8001640 <wm8994_SetVolume>
}
 8001bac:	4638      	mov	r0, r7
 8001bae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 AUDIO_IO_Write(Addr, Reg, Value);
 8001bb2:	2233      	movs	r2, #51	; 0x33
 8001bb4:	e735      	b.n	8001a22 <wm8994_InitExt+0x2de>
 8001bb6:	2263      	movs	r2, #99	; 0x63
 8001bb8:	e733      	b.n	8001a22 <wm8994_InitExt+0x2de>
 8001bba:	22a3      	movs	r2, #163	; 0xa3
 8001bbc:	e731      	b.n	8001a22 <wm8994_InitExt+0x2de>
 8001bbe:	2213      	movs	r2, #19
 8001bc0:	e72f      	b.n	8001a22 <wm8994_InitExt+0x2de>
  	if(AudioRes == 16 )
 8001bc2:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8001bc6:	2b10      	cmp	r3, #16
 AUDIO_IO_Write(Addr, Reg, Value);
 8001bc8:	bf0c      	ite	eq
 8001bca:	f244 0210 	movweq	r2, #16400	; 0x4010
 8001bce:	f244 0270 	movwne	r2, #16496	; 0x4070
 8001bd2:	e731      	b.n	8001a38 <wm8994_InitExt+0x2f4>
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8001bd4:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8001bd8:	d115      	bne.n	8001c06 <wm8994_InitExt+0x4c2>
 AUDIO_IO_Write(Addr, Reg, Value);
 8001bda:	f046 0213 	orr.w	r2, r6, #19
 8001bde:	2101      	movs	r1, #1
 8001be0:	4620      	mov	r0, r4
 8001be2:	f000 fffd 	bl	8002be0 <AUDIO_IO_Write>
 8001be6:	2202      	movs	r2, #2
 8001be8:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8001bec:	4620      	mov	r0, r4
 8001bee:	f000 fff7 	bl	8002be0 <AUDIO_IO_Write>
 8001bf2:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8001bf6:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8001bfa:	4620      	mov	r0, r4
 8001bfc:	f000 fff0 	bl	8002be0 <AUDIO_IO_Write>
 8001c00:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8001c04:	e7c9      	b.n	8001b9a <wm8994_InitExt+0x456>
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 8001c06:	f5b5 7f40 	cmp.w	r5, #768	; 0x300
 8001c0a:	d002      	beq.n	8001c12 <wm8994_InitExt+0x4ce>
 8001c0c:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8001c10:	d1c8      	bne.n	8001ba4 <wm8994_InitExt+0x460>
 AUDIO_IO_Write(Addr, Reg, Value);
 8001c12:	220b      	movs	r2, #11
 8001c14:	2118      	movs	r1, #24
 8001c16:	4620      	mov	r0, r4
 8001c18:	f000 ffe2 	bl	8002be0 <AUDIO_IO_Write>
 8001c1c:	220b      	movs	r2, #11
 8001c1e:	211a      	movs	r1, #26
 8001c20:	4620      	mov	r0, r4
 8001c22:	f000 ffdd 	bl	8002be0 <AUDIO_IO_Write>
 8001c26:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8001c2a:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8001c2e:	e7b6      	b.n	8001b9e <wm8994_InitExt+0x45a>
 8001c30:	00017700 	.word	0x00017700
 8001c34:	200002e8 	.word	0x200002e8

08001c38 <wm8994_Stop>:
{
 8001c38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (outputEnabled != 0)
 8001c3a:	4f19      	ldr	r7, [pc, #100]	; (8001ca0 <wm8994_Stop+0x68>)
{
 8001c3c:	4604      	mov	r4, r0
 8001c3e:	460e      	mov	r6, r1
  if (outputEnabled != 0)
 8001c40:	683d      	ldr	r5, [r7, #0]
 8001c42:	b355      	cbz	r5, 8001c9a <wm8994_Stop+0x62>
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8001c44:	2101      	movs	r1, #1
 8001c46:	f7ff fcc3 	bl	80015d0 <wm8994_SetMute>
    if (CodecPdwnMode == CODEC_PDWN_SW)
 8001c4a:	2e02      	cmp	r6, #2
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8001c4c:	4605      	mov	r5, r0
    if (CodecPdwnMode == CODEC_PDWN_SW)
 8001c4e:	d024      	beq.n	8001c9a <wm8994_Stop+0x62>
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8001c50:	b2e0      	uxtb	r0, r4
 AUDIO_IO_Write(Addr, Reg, Value);
 8001c52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c56:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8001c5a:	9001      	str	r0, [sp, #4]
 8001c5c:	f000 ffc0 	bl	8002be0 <AUDIO_IO_Write>
 8001c60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c64:	f240 4122 	movw	r1, #1058	; 0x422
 8001c68:	9801      	ldr	r0, [sp, #4]
 8001c6a:	f000 ffb9 	bl	8002be0 <AUDIO_IO_Write>
 8001c6e:	2200      	movs	r2, #0
 8001c70:	212d      	movs	r1, #45	; 0x2d
 8001c72:	9801      	ldr	r0, [sp, #4]
 8001c74:	f000 ffb4 	bl	8002be0 <AUDIO_IO_Write>
 8001c78:	2200      	movs	r2, #0
 8001c7a:	212e      	movs	r1, #46	; 0x2e
 8001c7c:	9801      	ldr	r0, [sp, #4]
 8001c7e:	f000 ffaf 	bl	8002be0 <AUDIO_IO_Write>
 8001c82:	2200      	movs	r2, #0
 8001c84:	2105      	movs	r1, #5
 8001c86:	9801      	ldr	r0, [sp, #4]
 8001c88:	f000 ffaa 	bl	8002be0 <AUDIO_IO_Write>
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	9801      	ldr	r0, [sp, #4]
 8001c90:	4611      	mov	r1, r2
 8001c92:	f000 ffa5 	bl	8002be0 <AUDIO_IO_Write>
      outputEnabled = 0;
 8001c96:	2300      	movs	r3, #0
 8001c98:	603b      	str	r3, [r7, #0]
}
 8001c9a:	4628      	mov	r0, r5
 8001c9c:	b003      	add	sp, #12
 8001c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ca0:	200002e8 	.word	0x200002e8

08001ca4 <SAIx_Out_DeInit>:
  * @retval None
  */
static void SAIx_Out_DeInit(void)
{
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8001ca4:	4b04      	ldr	r3, [pc, #16]	; (8001cb8 <SAIx_Out_DeInit+0x14>)
 8001ca6:	4805      	ldr	r0, [pc, #20]	; (8001cbc <SAIx_Out_DeInit+0x18>)

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8001ca8:	681a      	ldr	r2, [r3, #0]
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8001caa:	6003      	str	r3, [r0, #0]
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8001cac:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001cb0:	601a      	str	r2, [r3, #0]

  HAL_SAI_DeInit(&haudio_out_sai);
 8001cb2:	f003 bbfc 	b.w	80054ae <HAL_SAI_DeInit>
 8001cb6:	bf00      	nop
 8001cb8:	40015804 	.word	0x40015804
 8001cbc:	200005ec 	.word	0x200005ec

08001cc0 <BSP_AUDIO_OUT_Play>:
{
 8001cc0:	b538      	push	{r3, r4, r5, lr}
  if(audio_drv->Play(AUDIO_I2C_ADDRESS, (uint16_t *)pBuffer, Size) != 0)
 8001cc2:	4b10      	ldr	r3, [pc, #64]	; (8001d04 <BSP_AUDIO_OUT_Play+0x44>)
{
 8001cc4:	4605      	mov	r5, r0
 8001cc6:	460c      	mov	r4, r1
  if(audio_drv->Play(AUDIO_I2C_ADDRESS, (uint16_t *)pBuffer, Size) != 0)
 8001cc8:	b28a      	uxth	r2, r1
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4601      	mov	r1, r0
 8001cce:	2034      	movs	r0, #52	; 0x34
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	4798      	blx	r3
 8001cd4:	b998      	cbnz	r0, 8001cfe <BSP_AUDIO_OUT_Play+0x3e>
    HAL_SAI_Transmit_DMA(&haudio_out_sai, (uint8_t*) pBuffer, DMA_MAX(Size / AudioOutResByte));
 8001cd6:	4a0c      	ldr	r2, [pc, #48]	; (8001d08 <BSP_AUDIO_OUT_Play+0x48>)
 8001cd8:	7813      	ldrb	r3, [r2, #0]
 8001cda:	fbb4 f3f3 	udiv	r3, r4, r3
 8001cde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ce2:	d209      	bcs.n	8001cf8 <BSP_AUDIO_OUT_Play+0x38>
 8001ce4:	7812      	ldrb	r2, [r2, #0]
 8001ce6:	fbb4 f2f2 	udiv	r2, r4, r2
 8001cea:	b292      	uxth	r2, r2
 8001cec:	4629      	mov	r1, r5
 8001cee:	4807      	ldr	r0, [pc, #28]	; (8001d0c <BSP_AUDIO_OUT_Play+0x4c>)
 8001cf0:	f003 fc48 	bl	8005584 <HAL_SAI_Transmit_DMA>
    return AUDIO_OK;
 8001cf4:	2000      	movs	r0, #0
}
 8001cf6:	bd38      	pop	{r3, r4, r5, pc}
    HAL_SAI_Transmit_DMA(&haudio_out_sai, (uint8_t*) pBuffer, DMA_MAX(Size / AudioOutResByte));
 8001cf8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cfc:	e7f6      	b.n	8001cec <BSP_AUDIO_OUT_Play+0x2c>
    return AUDIO_ERROR;
 8001cfe:	2001      	movs	r0, #1
 8001d00:	e7f9      	b.n	8001cf6 <BSP_AUDIO_OUT_Play+0x36>
 8001d02:	bf00      	nop
 8001d04:	20000724 	.word	0x20000724
 8001d08:	20000100 	.word	0x20000100
 8001d0c:	200005ec 	.word	0x200005ec

08001d10 <BSP_AUDIO_OUT_ChangeBuffer>:
   HAL_SAI_Transmit_DMA(&haudio_out_sai, (uint8_t*) pData, DMA_MAX(Size / AudioOutResByte));
 8001d10:	4b04      	ldr	r3, [pc, #16]	; (8001d24 <BSP_AUDIO_OUT_ChangeBuffer+0x14>)
 8001d12:	781a      	ldrb	r2, [r3, #0]
 8001d14:	781a      	ldrb	r2, [r3, #0]
 8001d16:	fbb1 f2f2 	udiv	r2, r1, r2
 8001d1a:	4601      	mov	r1, r0
 8001d1c:	4802      	ldr	r0, [pc, #8]	; (8001d28 <BSP_AUDIO_OUT_ChangeBuffer+0x18>)
 8001d1e:	f003 bc31 	b.w	8005584 <HAL_SAI_Transmit_DMA>
 8001d22:	bf00      	nop
 8001d24:	20000100 	.word	0x20000100
 8001d28:	200005ec 	.word	0x200005ec

08001d2c <BSP_AUDIO_OUT_Stop>:
{
 8001d2c:	b538      	push	{r3, r4, r5, lr}
 8001d2e:	4605      	mov	r5, r0
  HAL_SAI_DMAStop(&haudio_out_sai);
 8001d30:	4809      	ldr	r0, [pc, #36]	; (8001d58 <BSP_AUDIO_OUT_Stop+0x2c>)
 8001d32:	f003 fbdc 	bl	80054ee <HAL_SAI_DMAStop>
  if(audio_drv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 8001d36:	4b09      	ldr	r3, [pc, #36]	; (8001d5c <BSP_AUDIO_OUT_Stop+0x30>)
 8001d38:	4629      	mov	r1, r5
 8001d3a:	2034      	movs	r0, #52	; 0x34
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	699b      	ldr	r3, [r3, #24]
 8001d40:	4798      	blx	r3
 8001d42:	4604      	mov	r4, r0
 8001d44:	b930      	cbnz	r0, 8001d54 <BSP_AUDIO_OUT_Stop+0x28>
    if(Option == CODEC_PDWN_HW)
 8001d46:	2d01      	cmp	r5, #1
 8001d48:	d102      	bne.n	8001d50 <BSP_AUDIO_OUT_Stop+0x24>
      HAL_Delay(1);
 8001d4a:	4628      	mov	r0, r5
 8001d4c:	f000 ffbe 	bl	8002ccc <HAL_Delay>
    return AUDIO_OK;
 8001d50:	4620      	mov	r0, r4
 8001d52:	e000      	b.n	8001d56 <BSP_AUDIO_OUT_Stop+0x2a>
    return AUDIO_ERROR;
 8001d54:	2001      	movs	r0, #1
}
 8001d56:	bd38      	pop	{r3, r4, r5, pc}
 8001d58:	200005ec 	.word	0x200005ec
 8001d5c:	20000724 	.word	0x20000724

08001d60 <BSP_AUDIO_OUT_SetVolume>:
{
 8001d60:	b508      	push	{r3, lr}
  if(audio_drv->SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0)
 8001d62:	4b05      	ldr	r3, [pc, #20]	; (8001d78 <BSP_AUDIO_OUT_SetVolume+0x18>)
{
 8001d64:	4601      	mov	r1, r0
  if(audio_drv->SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0)
 8001d66:	2034      	movs	r0, #52	; 0x34
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	6a1b      	ldr	r3, [r3, #32]
 8001d6c:	4798      	blx	r3
}
 8001d6e:	3800      	subs	r0, #0
 8001d70:	bf18      	it	ne
 8001d72:	2001      	movne	r0, #1
 8001d74:	bd08      	pop	{r3, pc}
 8001d76:	bf00      	nop
 8001d78:	20000724 	.word	0x20000724

08001d7c <BSP_AUDIO_OUT_SetMute>:
{ 
 8001d7c:	b508      	push	{r3, lr}
  if(audio_drv->SetMute(AUDIO_I2C_ADDRESS, Cmd) != 0)
 8001d7e:	4b05      	ldr	r3, [pc, #20]	; (8001d94 <BSP_AUDIO_OUT_SetMute+0x18>)
{ 
 8001d80:	4601      	mov	r1, r0
  if(audio_drv->SetMute(AUDIO_I2C_ADDRESS, Cmd) != 0)
 8001d82:	2034      	movs	r0, #52	; 0x34
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d88:	4798      	blx	r3
}
 8001d8a:	3800      	subs	r0, #0
 8001d8c:	bf18      	it	ne
 8001d8e:	2001      	movne	r0, #1
 8001d90:	bd08      	pop	{r3, pc}
 8001d92:	bf00      	nop
 8001d94:	20000724 	.word	0x20000724

08001d98 <HAL_SAI_TxCpltCallback>:
{
 8001d98:	b508      	push	{r3, lr}
  BSP_AUDIO_OUT_TransferComplete_CallBack();
 8001d9a:	f000 fac9 	bl	8002330 <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 8001d9e:	bd08      	pop	{r3, pc}

08001da0 <HAL_SAI_TxHalfCpltCallback>:
{
 8001da0:	b508      	push	{r3, lr}
  BSP_AUDIO_OUT_HalfTransfer_CallBack();
 8001da2:	f000 fb35 	bl	8002410 <BSP_AUDIO_OUT_HalfTransfer_CallBack>
}
 8001da6:	bd08      	pop	{r3, pc}

08001da8 <BSP_AUDIO_OUT_MspInit>:
{ 
 8001da8:	b570      	push	{r4, r5, r6, lr}
  AUDIO_OUT_SAIx_CLK_ENABLE();
 8001daa:	4c3f      	ldr	r4, [pc, #252]	; (8001ea8 <BSP_AUDIO_OUT_MspInit+0x100>)
{ 
 8001dac:	b08a      	sub	sp, #40	; 0x28
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001dae:	f04f 0c70 	mov.w	ip, #112	; 0x70
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8001db2:	f04f 0e00 	mov.w	lr, #0
  AUDIO_OUT_SAIx_CLK_ENABLE();
 8001db6:	6c63      	ldr	r3, [r4, #68]	; 0x44
{ 
 8001db8:	4605      	mov	r5, r0
 8001dba:	460e      	mov	r6, r1
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SD_FS_SCK_GPIO_PORT, &gpio_init_structure);
 8001dbc:	483b      	ldr	r0, [pc, #236]	; (8001eac <BSP_AUDIO_OUT_MspInit+0x104>)
  AUDIO_OUT_SAIx_CLK_ENABLE();
 8001dbe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SD_FS_SCK_GPIO_PORT, &gpio_init_structure);
 8001dc2:	a905      	add	r1, sp, #20
  AUDIO_OUT_SAIx_CLK_ENABLE();
 8001dc4:	6463      	str	r3, [r4, #68]	; 0x44
 8001dc6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001dc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dcc:	9301      	str	r3, [sp, #4]
 8001dce:	9b01      	ldr	r3, [sp, #4]
  AUDIO_OUT_SAIx_MCLK_ENABLE();
 8001dd0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001dd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001dd6:	6323      	str	r3, [r4, #48]	; 0x30
 8001dd8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dde:	9302      	str	r3, [sp, #8]
 8001de0:	9b02      	ldr	r3, [sp, #8]
  AUDIO_OUT_SAIx_SD_FS_CLK_ENABLE();
 8001de2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001de4:	f043 0310 	orr.w	r3, r3, #16
 8001de8:	6323      	str	r3, [r4, #48]	; 0x30
 8001dea:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001dec:	f003 0310 	and.w	r3, r3, #16
 8001df0:	9303      	str	r3, [sp, #12]
 8001df2:	9b03      	ldr	r3, [sp, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001df4:	2302      	movs	r3, #2
 8001df6:	e9cd c305 	strd	ip, r3, [sp, #20]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e9cd e307 	strd	lr, r3, [sp, #28]
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_AF;
 8001e00:	2306      	movs	r3, #6
 8001e02:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SD_FS_SCK_GPIO_PORT, &gpio_init_structure);
 8001e04:	f001 f9f0 	bl	80031e8 <HAL_GPIO_Init>
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 8001e08:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 8001e0a:	a905      	add	r1, sp, #20
 8001e0c:	4828      	ldr	r0, [pc, #160]	; (8001eb0 <BSP_AUDIO_OUT_MspInit+0x108>)
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 8001e0e:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 8001e10:	f001 f9ea 	bl	80031e8 <HAL_GPIO_Init>
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 8001e14:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001e16:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e1a:	6323      	str	r3, [r4, #48]	; 0x30
 8001e1c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001e1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e22:	9304      	str	r3, [sp, #16]
 8001e24:	9b04      	ldr	r3, [sp, #16]
  resolution= (Params != NULL)? *((uint8_t*)Params):16;
 8001e26:	2e00      	cmp	r6, #0
 8001e28:	d03c      	beq.n	8001ea4 <BSP_AUDIO_OUT_MspInit+0xfc>
 8001e2a:	7832      	ldrb	r2, [r6, #0]
  if(hsai->Instance == AUDIO_OUT_SAIx)
 8001e2c:	6829      	ldr	r1, [r5, #0]
 8001e2e:	4b21      	ldr	r3, [pc, #132]	; (8001eb4 <BSP_AUDIO_OUT_MspInit+0x10c>)
 8001e30:	4299      	cmp	r1, r3
 8001e32:	d12d      	bne.n	8001e90 <BSP_AUDIO_OUT_MspInit+0xe8>
    if(resolution == 24)
 8001e34:	2a18      	cmp	r2, #24
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 8001e36:	4b20      	ldr	r3, [pc, #128]	; (8001eb8 <BSP_AUDIO_OUT_MspInit+0x110>)
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8001e38:	f04f 0100 	mov.w	r1, #0
 8001e3c:	f04f 0040 	mov.w	r0, #64	; 0x40
      hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE_24;
 8001e40:	bf0c      	ite	eq
 8001e42:	f44f 5280 	moveq.w	r2, #4096	; 0x1000
      hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE_16;
 8001e46:	f44f 6200 	movne.w	r2, #2048	; 0x800
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8001e4a:	60d9      	str	r1, [r3, #12]
      hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE_24;
 8001e4c:	bf07      	ittee	eq
 8001e4e:	615a      	streq	r2, [r3, #20]
      hdma_sai_tx.Init.MemDataAlignment    = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE_24;
 8001e50:	f44f 4280 	moveq.w	r2, #16384	; 0x4000
      hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE_16;
 8001e54:	615a      	strne	r2, [r3, #20]
      hdma_sai_tx.Init.MemDataAlignment    = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE_16;
 8001e56:	f44f 5200 	movne.w	r2, #8192	; 0x2000
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 8001e5a:	66eb      	str	r3, [r5, #108]	; 0x6c
      hdma_sai_tx.Init.MemDataAlignment    = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE_16;
 8001e5c:	619a      	str	r2, [r3, #24]
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 8001e5e:	2200      	movs	r2, #0
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 8001e60:	639d      	str	r5, [r3, #56]	; 0x38
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8001e62:	e9c3 1001 	strd	r1, r0, [r3, #4]
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8001e66:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001e6a:	2004      	movs	r0, #4
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8001e6c:	6119      	str	r1, [r3, #16]
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 8001e6e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8001e72:	e9c3 2107 	strd	r2, r1, [r3, #28]
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001e76:	2103      	movs	r1, #3
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8001e78:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 8001e7c:	4a0f      	ldr	r2, [pc, #60]	; (8001ebc <BSP_AUDIO_OUT_MspInit+0x114>)
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001e7e:	e9c3 0109 	strd	r0, r1, [r3, #36]	; 0x24
    HAL_DMA_DeInit(&hdma_sai_tx);
 8001e82:	480d      	ldr	r0, [pc, #52]	; (8001eb8 <BSP_AUDIO_OUT_MspInit+0x110>)
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 8001e84:	601a      	str	r2, [r3, #0]
    HAL_DMA_DeInit(&hdma_sai_tx);
 8001e86:	f001 f845 	bl	8002f14 <HAL_DMA_DeInit>
    HAL_DMA_Init(&hdma_sai_tx);
 8001e8a:	480b      	ldr	r0, [pc, #44]	; (8001eb8 <BSP_AUDIO_OUT_MspInit+0x110>)
 8001e8c:	f000 ffc2 	bl	8002e14 <HAL_DMA_Init>
  HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 8001e90:	2200      	movs	r2, #0
 8001e92:	2102      	movs	r1, #2
 8001e94:	2039      	movs	r0, #57	; 0x39
 8001e96:	f000 ff3d 	bl	8002d14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ);
 8001e9a:	2039      	movs	r0, #57	; 0x39
 8001e9c:	f000 ff6c 	bl	8002d78 <HAL_NVIC_EnableIRQ>
}
 8001ea0:	b00a      	add	sp, #40	; 0x28
 8001ea2:	bd70      	pop	{r4, r5, r6, pc}
  resolution= (Params != NULL)? *((uint8_t*)Params):16;
 8001ea4:	2210      	movs	r2, #16
 8001ea6:	e7c1      	b.n	8001e2c <BSP_AUDIO_OUT_MspInit+0x84>
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	40021800 	.word	0x40021800
 8001eb4:	40015804 	.word	0x40015804
 8001eb8:	200002f0 	.word	0x200002f0
 8001ebc:	40026428 	.word	0x40026428

08001ec0 <BSP_AUDIO_OUT_MspDeInit>:
{
 8001ec0:	b510      	push	{r4, lr}
 8001ec2:	4604      	mov	r4, r0
    HAL_NVIC_DisableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ);
 8001ec4:	2039      	movs	r0, #57	; 0x39
 8001ec6:	f000 ff65 	bl	8002d94 <HAL_NVIC_DisableIRQ>
    if(hsai->Instance == AUDIO_OUT_SAIx)
 8001eca:	4b0d      	ldr	r3, [pc, #52]	; (8001f00 <BSP_AUDIO_OUT_MspDeInit+0x40>)
 8001ecc:	6822      	ldr	r2, [r4, #0]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d102      	bne.n	8001ed8 <BSP_AUDIO_OUT_MspDeInit+0x18>
      HAL_DMA_DeInit(hsai->hdmatx);
 8001ed2:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001ed4:	f001 f81e 	bl	8002f14 <HAL_DMA_DeInit>
    __HAL_SAI_DISABLE(hsai);  
 8001ed8:	6822      	ldr	r2, [r4, #0]
    HAL_GPIO_DeInit(AUDIO_OUT_SAIx_SD_FS_SCK_GPIO_PORT, gpio_init_structure.Pin);
 8001eda:	2170      	movs	r1, #112	; 0x70
 8001edc:	4809      	ldr	r0, [pc, #36]	; (8001f04 <BSP_AUDIO_OUT_MspDeInit+0x44>)
    __HAL_SAI_DISABLE(hsai);  
 8001ede:	6813      	ldr	r3, [r2, #0]
 8001ee0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ee4:	6013      	str	r3, [r2, #0]
    HAL_GPIO_DeInit(AUDIO_OUT_SAIx_SD_FS_SCK_GPIO_PORT, gpio_init_structure.Pin);
 8001ee6:	f001 fa71 	bl	80033cc <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, gpio_init_structure.Pin);
 8001eea:	2180      	movs	r1, #128	; 0x80
 8001eec:	4806      	ldr	r0, [pc, #24]	; (8001f08 <BSP_AUDIO_OUT_MspDeInit+0x48>)
 8001eee:	f001 fa6d 	bl	80033cc <HAL_GPIO_DeInit>
    AUDIO_OUT_SAIx_CLK_DISABLE();
 8001ef2:	4a06      	ldr	r2, [pc, #24]	; (8001f0c <BSP_AUDIO_OUT_MspDeInit+0x4c>)
 8001ef4:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8001ef6:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001efa:	6453      	str	r3, [r2, #68]	; 0x44
}
 8001efc:	bd10      	pop	{r4, pc}
 8001efe:	bf00      	nop
 8001f00:	40015804 	.word	0x40015804
 8001f04:	40021000 	.word	0x40021000
 8001f08:	40021800 	.word	0x40021800
 8001f0c:	40023800 	.word	0x40023800

08001f10 <BSP_AUDIO_OUT_DeInit>:
{
 8001f10:	b508      	push	{r3, lr}
  SAIx_Out_DeInit();
 8001f12:	f7ff fec7 	bl	8001ca4 <SAIx_Out_DeInit>
  BSP_AUDIO_OUT_MspDeInit(&haudio_out_sai, NULL);
 8001f16:	2100      	movs	r1, #0
 8001f18:	4801      	ldr	r0, [pc, #4]	; (8001f20 <BSP_AUDIO_OUT_DeInit+0x10>)
 8001f1a:	f7ff ffd1 	bl	8001ec0 <BSP_AUDIO_OUT_MspDeInit>
}
 8001f1e:	bd08      	pop	{r3, pc}
 8001f20:	200005ec 	.word	0x200005ec

08001f24 <BSP_AUDIO_OUT_ClockConfig>:
{ 
 8001f24:	b510      	push	{r4, lr}
 8001f26:	b0a4      	sub	sp, #144	; 0x90
 8001f28:	460c      	mov	r4, r1
  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8001f2a:	4668      	mov	r0, sp
 8001f2c:	f003 f87a 	bl	8005024 <HAL_RCCEx_GetPeriphCLKConfig>
  if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
 8001f30:	f642 3311 	movw	r3, #11025	; 0x2b11
 8001f34:	429c      	cmp	r4, r3
 8001f36:	d007      	beq.n	8001f48 <BSP_AUDIO_OUT_ClockConfig+0x24>
 8001f38:	f245 6322 	movw	r3, #22050	; 0x5622
 8001f3c:	429c      	cmp	r4, r3
 8001f3e:	d003      	beq.n	8001f48 <BSP_AUDIO_OUT_ClockConfig+0x24>
 8001f40:	f64a 4344 	movw	r3, #44100	; 0xac44
 8001f44:	429c      	cmp	r4, r3
 8001f46:	d111      	bne.n	8001f6c <BSP_AUDIO_OUT_ClockConfig+0x48>
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8001f48:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001f4c:	9300      	str	r3, [sp, #0]
    rcc_ex_clk_init_struct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLI2S;
 8001f4e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001f52:	930f      	str	r3, [sp, #60]	; 0x3c
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 8001f54:	f240 13ad 	movw	r3, #429	; 0x1ad
 8001f58:	9301      	str	r3, [sp, #4]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	9303      	str	r3, [sp, #12]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 8001f5e:	2313      	movs	r3, #19
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8001f60:	4668      	mov	r0, sp
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;      
 8001f62:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8001f64:	f002 fdaa 	bl	8004abc <HAL_RCCEx_PeriphCLKConfig>
}
 8001f68:	b024      	add	sp, #144	; 0x90
 8001f6a:	bd10      	pop	{r4, pc}
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8001f6c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001f70:	9300      	str	r3, [sp, #0]
    rcc_ex_clk_init_struct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLI2S;
 8001f72:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001f76:	930f      	str	r3, [sp, #60]	; 0x3c
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344; 
 8001f78:	f44f 73ac 	mov.w	r3, #344	; 0x158
 8001f7c:	9301      	str	r3, [sp, #4]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7; 
 8001f7e:	2307      	movs	r3, #7
 8001f80:	9303      	str	r3, [sp, #12]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;      
 8001f82:	2301      	movs	r3, #1
 8001f84:	e7ec      	b.n	8001f60 <BSP_AUDIO_OUT_ClockConfig+0x3c>
	...

08001f88 <BSP_AUDIO_OUT_Init_Ext>:
{ 
 8001f88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001f8c:	b085      	sub	sp, #20
 8001f8e:	4617      	mov	r7, r2
 8001f90:	4680      	mov	r8, r0
 8001f92:	4689      	mov	r9, r1
 8001f94:	f88d 300f 	strb.w	r3, [sp, #15]
  SAIx_Out_DeInit();
 8001f98:	f7ff fe84 	bl	8001ca4 <SAIx_Out_DeInit>
  AudioOutResBit = AudioResolution;
 8001f9c:	f89d 300f 	ldrb.w	r3, [sp, #15]
  BSP_AUDIO_OUT_ClockConfig(&haudio_out_sai, AudioFreq, NULL);
 8001fa0:	2200      	movs	r2, #0
  AudioOutResBit = AudioResolution;
 8001fa2:	4d3a      	ldr	r5, [pc, #232]	; (800208c <BSP_AUDIO_OUT_Init_Ext+0x104>)
  BSP_AUDIO_OUT_ClockConfig(&haudio_out_sai, AudioFreq, NULL);
 8001fa4:	4639      	mov	r1, r7
  if(AudioResolution == 16)
 8001fa6:	2b10      	cmp	r3, #16
  BSP_AUDIO_OUT_ClockConfig(&haudio_out_sai, AudioFreq, NULL);
 8001fa8:	4c39      	ldr	r4, [pc, #228]	; (8002090 <BSP_AUDIO_OUT_Init_Ext+0x108>)
  AudioOutResBit = AudioResolution;
 8001faa:	706b      	strb	r3, [r5, #1]
    AudioOutResByte = 2;
 8001fac:	bf0c      	ite	eq
 8001fae:	2302      	moveq	r3, #2
    AudioOutResByte = 4;
 8001fb0:	2304      	movne	r3, #4
  BSP_AUDIO_OUT_ClockConfig(&haudio_out_sai, AudioFreq, NULL);
 8001fb2:	4620      	mov	r0, r4
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8001fb4:	4e37      	ldr	r6, [pc, #220]	; (8002094 <BSP_AUDIO_OUT_Init_Ext+0x10c>)
    AudioOutResByte = 4;
 8001fb6:	702b      	strb	r3, [r5, #0]
  BSP_AUDIO_OUT_ClockConfig(&haudio_out_sai, AudioFreq, NULL);
 8001fb8:	f7ff ffb4 	bl	8001f24 <BSP_AUDIO_OUT_ClockConfig>
  if(HAL_SAI_GetState(&haudio_out_sai) == HAL_SAI_STATE_RESET)
 8001fbc:	4620      	mov	r0, r4
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8001fbe:	6026      	str	r6, [r4, #0]
  if(HAL_SAI_GetState(&haudio_out_sai) == HAL_SAI_STATE_RESET)
 8001fc0:	f003 fb73 	bl	80056aa <HAL_SAI_GetState>
 8001fc4:	b920      	cbnz	r0, 8001fd0 <BSP_AUDIO_OUT_Init_Ext+0x48>
    BSP_AUDIO_OUT_MspInit(&haudio_out_sai, (void*)(&AudioResolution));
 8001fc6:	f10d 010f 	add.w	r1, sp, #15
 8001fca:	4620      	mov	r0, r4
 8001fcc:	f7ff feec 	bl	8001da8 <BSP_AUDIO_OUT_MspInit>
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8001fd0:	6833      	ldr	r3, [r6, #0]
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 8001fd2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  SAIx_Out_Init_Ext(AudioFreq, AudioResolution);
 8001fd6:	f89d 200f 	ldrb.w	r2, [sp, #15]
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8001fda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8001fde:	6026      	str	r6, [r4, #0]
  haudio_out_sai.Init.DataSize = (AudioResolution  == 16)?SAI_DATASIZE_16:SAI_DATASIZE_32;
 8001fe0:	2a10      	cmp	r2, #16
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8001fe2:	6033      	str	r3, [r6, #0]
  haudio_out_sai.Init.MonoStereoMode = SAI_STEREOMODE;
 8001fe4:	f04f 0300 	mov.w	r3, #0
  haudio_out_sai.Init.DataSize = (AudioResolution  == 16)?SAI_DATASIZE_16:SAI_DATASIZE_32;
 8001fe8:	bf0c      	ite	eq
 8001fea:	2180      	moveq	r1, #128	; 0x80
 8001fec:	21e0      	movne	r1, #224	; 0xe0
  haudio_out_sai.Init.MonoStereoMode = SAI_STEREOMODE;
 8001fee:	6263      	str	r3, [r4, #36]	; 0x24
if (  AudioResolution == 24) /* please add here other supported resolution */
 8001ff0:	2a18      	cmp	r2, #24
  haudio_out_sai.Init.AudioMode = SAI_MODEMASTER_TX;
 8001ff2:	6063      	str	r3, [r4, #4]
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001ff4:	f04f 0600 	mov.w	r6, #0
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8001ff8:	6163      	str	r3, [r4, #20]
    haudio_out_sai.FrameInit.FrameLength = 128; 
 8001ffa:	bf08      	it	eq
 8001ffc:	2280      	moveq	r2, #128	; 0x80
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8001ffe:	6323      	str	r3, [r4, #48]	; 0x30
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 8002000:	60a3      	str	r3, [r4, #8]
  haudio_out_sai.Init.SynchroExt     = SAI_SYNCEXT_DISABLE;
 8002002:	60e3      	str	r3, [r4, #12]
  haudio_out_sai.Init.Mckdiv         = 0;
 8002004:	6223      	str	r3, [r4, #32]
    haudio_out_sai.FrameInit.FrameLength = 128; 
 8002006:	bf08      	it	eq
 8002008:	6422      	streq	r2, [r4, #64]	; 0x40
  haudio_out_sai.SlotInit.SlotActive = SAI_SLOTACTIVE_0 | SAI_SLOTACTIVE_2;
 800200a:	f04f 0204 	mov.w	r2, #4
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 800200e:	6120      	str	r0, [r4, #16]
  HAL_SAI_Init(&haudio_out_sai);
 8002010:	481f      	ldr	r0, [pc, #124]	; (8002090 <BSP_AUDIO_OUT_Init_Ext+0x108>)
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 8002012:	61e7      	str	r7, [r4, #28]
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8002014:	65a6      	str	r6, [r4, #88]	; 0x58
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8002016:	e9c4 130d 	strd	r1, r3, [r4, #52]	; 0x34
  haudio_out_sai.Init.TriState       = SAI_OUTPUT_NOTRELEASED;
 800201a:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 800201e:	f04f 0340 	mov.w	r3, #64	; 0x40
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8002022:	f04f 0101 	mov.w	r1, #1
    haudio_out_sai.FrameInit.FrameLength = 64; 
 8002026:	bf1c      	itt	ne
 8002028:	6423      	strne	r3, [r4, #64]	; 0x40
    haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 800202a:	2320      	movne	r3, #32
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 800202c:	63e1      	str	r1, [r4, #60]	; 0x3c
    haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 800202e:	6463      	str	r3, [r4, #68]	; 0x44
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8002030:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8002034:	61a1      	str	r1, [r4, #24]
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8002036:	e9c4 3612 	strd	r3, r6, [r4, #72]	; 0x48
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 800203a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
 800203e:	e9c4 3614 	strd	r3, r6, [r4, #80]	; 0x50
  haudio_out_sai.SlotInit.SlotActive = SAI_SLOTACTIVE_0 | SAI_SLOTACTIVE_2;
 8002042:	2305      	movs	r3, #5
 8002044:	e9c4 2317 	strd	r2, r3, [r4, #92]	; 0x5c
  HAL_SAI_Init(&haudio_out_sai);
 8002048:	f003 f956 	bl	80052f8 <HAL_SAI_Init>
  __HAL_SAI_ENABLE(&haudio_out_sai);
 800204c:	6822      	ldr	r2, [r4, #0]
  deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 800204e:	4c12      	ldr	r4, [pc, #72]	; (8002098 <BSP_AUDIO_OUT_Init_Ext+0x110>)
 8002050:	2034      	movs	r0, #52	; 0x34
  __HAL_SAI_ENABLE(&haudio_out_sai);
 8002052:	6813      	ldr	r3, [r2, #0]
 8002054:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002058:	6013      	str	r3, [r2, #0]
  deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 800205a:	68a3      	ldr	r3, [r4, #8]
 800205c:	4798      	blx	r3
  if((deviceid) == WM8994_ID)
 800205e:	f648 1394 	movw	r3, #35220	; 0x8994
 8002062:	4298      	cmp	r0, r3
 8002064:	d110      	bne.n	8002088 <BSP_AUDIO_OUT_Init_Ext+0x100>
    wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 8002066:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002068:	2034      	movs	r0, #52	; 0x34
 800206a:	4798      	blx	r3
    audio_drv = &wm8994_drv; 
 800206c:	4b0b      	ldr	r3, [pc, #44]	; (800209c <BSP_AUDIO_OUT_Init_Ext+0x114>)
    audio_drv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq,AudioOutResBit);
 800206e:	464a      	mov	r2, r9
 8002070:	4641      	mov	r1, r8
    audio_drv = &wm8994_drv; 
 8002072:	601c      	str	r4, [r3, #0]
    audio_drv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq,AudioOutResBit);
 8002074:	2034      	movs	r0, #52	; 0x34
 8002076:	786b      	ldrb	r3, [r5, #1]
 8002078:	9300      	str	r3, [sp, #0]
 800207a:	463b      	mov	r3, r7
 800207c:	6824      	ldr	r4, [r4, #0]
 800207e:	47a0      	blx	r4
    ret = AUDIO_OK;
 8002080:	4630      	mov	r0, r6
}
 8002082:	b005      	add	sp, #20
 8002084:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ret = AUDIO_ERROR;
 8002088:	2001      	movs	r0, #1
 800208a:	e7fa      	b.n	8002082 <BSP_AUDIO_OUT_Init_Ext+0xfa>
 800208c:	20000100 	.word	0x20000100
 8002090:	200005ec 	.word	0x200005ec
 8002094:	40015804 	.word	0x40015804
 8002098:	200000d0 	.word	0x200000d0
 800209c:	20000724 	.word	0x20000724

080020a0 <BSP_AUDIO_OUT_SetFrequency>:
{ 
 80020a0:	b513      	push	{r0, r1, r4, lr}
  BSP_AUDIO_OUT_ClockConfig(&haudio_out_sai, AudioFreq, NULL);
 80020a2:	4c0f      	ldr	r4, [pc, #60]	; (80020e0 <BSP_AUDIO_OUT_SetFrequency+0x40>)
{ 
 80020a4:	4601      	mov	r1, r0
  BSP_AUDIO_OUT_ClockConfig(&haudio_out_sai, AudioFreq, NULL);
 80020a6:	2200      	movs	r2, #0
 80020a8:	9001      	str	r0, [sp, #4]
 80020aa:	4620      	mov	r0, r4
 80020ac:	f7ff ff3a 	bl	8001f24 <BSP_AUDIO_OUT_ClockConfig>
  __HAL_SAI_DISABLE(&haudio_out_sai);
 80020b0:	6822      	ldr	r2, [r4, #0]
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 80020b2:	9901      	ldr	r1, [sp, #4]
  HAL_SAI_Init(&haudio_out_sai);
 80020b4:	4620      	mov	r0, r4
  __HAL_SAI_DISABLE(&haudio_out_sai);
 80020b6:	6813      	ldr	r3, [r2, #0]
 80020b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020bc:	6013      	str	r3, [r2, #0]
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 80020be:	61e1      	str	r1, [r4, #28]
  HAL_SAI_Init(&haudio_out_sai);
 80020c0:	f003 f91a 	bl	80052f8 <HAL_SAI_Init>
  if(audio_drv->SetFrequency(AUDIO_I2C_ADDRESS, AudioFreq) != 0)
 80020c4:	4b07      	ldr	r3, [pc, #28]	; (80020e4 <BSP_AUDIO_OUT_SetFrequency+0x44>)
 80020c6:	2034      	movs	r0, #52	; 0x34
 80020c8:	9901      	ldr	r1, [sp, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	69db      	ldr	r3, [r3, #28]
 80020ce:	4798      	blx	r3
 80020d0:	b920      	cbnz	r0, 80020dc <BSP_AUDIO_OUT_SetFrequency+0x3c>
  __HAL_SAI_ENABLE(&haudio_out_sai);
 80020d2:	6822      	ldr	r2, [r4, #0]
 80020d4:	6813      	ldr	r3, [r2, #0]
 80020d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020da:	6013      	str	r3, [r2, #0]
}
 80020dc:	b002      	add	sp, #8
 80020de:	bd10      	pop	{r4, pc}
 80020e0:	200005ec 	.word	0x200005ec
 80020e4:	20000724 	.word	0x20000724

080020e8 <BSP_AUDIO_IN_Error_CallBack>:
 80020e8:	4770      	bx	lr
	...

080020ec <HAL_SAI_ErrorCallback>:
  if(hsai->Instance == AUDIO_OUT_SAIx)
 80020ec:	6802      	ldr	r2, [r0, #0]
{
 80020ee:	b508      	push	{r3, lr}
  if(hsai->Instance == AUDIO_OUT_SAIx)
 80020f0:	4b04      	ldr	r3, [pc, #16]	; (8002104 <HAL_SAI_ErrorCallback+0x18>)
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d102      	bne.n	80020fc <HAL_SAI_ErrorCallback+0x10>
  BSP_AUDIO_OUT_Error_CallBack();
 80020f6:	f000 f919 	bl	800232c <BSP_AUDIO_OUT_Error_CallBack>
}
 80020fa:	bd08      	pop	{r3, pc}
    BSP_AUDIO_IN_Error_CallBack();
 80020fc:	f7ff fff4 	bl	80020e8 <BSP_AUDIO_IN_Error_CallBack>
}
 8002100:	e7fb      	b.n	80020fa <HAL_SAI_ErrorCallback+0xe>
 8002102:	bf00      	nop
 8002104:	40015804 	.word	0x40015804

08002108 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002108:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002140 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800210c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800210e:	e003      	b.n	8002118 <LoopCopyDataInit>

08002110 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002110:	4b0c      	ldr	r3, [pc, #48]	; (8002144 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002112:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002114:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002116:	3104      	adds	r1, #4

08002118 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002118:	480b      	ldr	r0, [pc, #44]	; (8002148 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800211a:	4b0c      	ldr	r3, [pc, #48]	; (800214c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800211c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800211e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002120:	d3f6      	bcc.n	8002110 <CopyDataInit>
  ldr  r2, =_sbss
 8002122:	4a0b      	ldr	r2, [pc, #44]	; (8002150 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002124:	e002      	b.n	800212c <LoopFillZerobss>

08002126 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002126:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002128:	f842 3b04 	str.w	r3, [r2], #4

0800212c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800212c:	4b09      	ldr	r3, [pc, #36]	; (8002154 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800212e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002130:	d3f9      	bcc.n	8002126 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002132:	f000 f9e5 	bl	8002500 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002136:	f004 f931 	bl	800639c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800213a:	f000 f96b 	bl	8002414 <main>
  bx  lr    
 800213e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002140:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8002144:	08006698 	.word	0x08006698
  ldr  r0, =_sdata
 8002148:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800214c:	200001c4 	.word	0x200001c4
  ldr  r2, =_sbss
 8002150:	200001c4 	.word	0x200001c4
  ldr  r3, = _ebss
 8002154:	20001120 	.word	0x20001120

08002158 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002158:	e7fe      	b.n	8002158 <ADC_IRQHandler>

0800215a <AUDIO_SpeakerStop>:
static int8_t  AUDIO_SpeakerStop( uint32_t node_handle)
{
  AUDIO_SpeakerNode_t* speaker;

  speaker = (AUDIO_SpeakerNode_t*)node_handle;
  speaker->specific.cmd |= SPEAKER_CMD_STOP;
 800215a:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 800215e:	f043 0301 	orr.w	r3, r3, #1
 8002162:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

  return 0;
}
 8002166:	2000      	movs	r0, #0
 8002168:	4770      	bx	lr

0800216a <AUDIO_SpeakerChangeFrequency>:
static int8_t  AUDIO_SpeakerChangeFrequency( uint32_t node_handle)
{
  AUDIO_SpeakerNode_t* speaker;

  speaker = (AUDIO_SpeakerNode_t*)node_handle;
  speaker->specific.cmd |= SPEAKER_CMD_CHANGE_FREQUENCE;
 800216a:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 800216e:	f043 0304 	orr.w	r3, r3, #4
 8002172:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  return 0;
}
 8002176:	2000      	movs	r0, #0
 8002178:	4770      	bx	lr
	...

0800217c <AUDIO_SpeakerStartReadCount>:
static int8_t  AUDIO_SpeakerStartReadCount( uint32_t node_handle)
{
     AUDIO_SpeakerNode_t* speaker;
  
    speaker = (AUDIO_SpeakerNode_t*)node_handle;
    speaker->specific.dma_remaining = __HAL_DMA_GET_COUNTER(haudio_out_sai.hdmatx);
 800217c:	4b03      	ldr	r3, [pc, #12]	; (800218c <AUDIO_SpeakerStartReadCount+0x10>)
 800217e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
    return 0;    
}
 8002188:	2000      	movs	r0, #0
 800218a:	4770      	bx	lr
 800218c:	200005ec 	.word	0x200005ec

08002190 <AUDIO_SpeakerGetLastReadCount>:
  AUDIO_SpeakerNode_t* speaker;
  int cur_waiting_bytes, read_bytes, last_packet_size;
  
   speaker = (AUDIO_SpeakerNode_t*)node_handle;
   /* read remind value in dma buffer */
    cur_waiting_bytes =  __HAL_DMA_GET_COUNTER(haudio_out_sai.hdmatx);
 8002190:	4b0b      	ldr	r3, [pc, #44]	; (80021c0 <AUDIO_SpeakerGetLastReadCount+0x30>)
 8002192:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    last_packet_size = haudio_out_sai.XferSize;
 8002194:	f8b3 1068 	ldrh.w	r1, [r3, #104]	; 0x68
    cur_waiting_bytes =  __HAL_DMA_GET_COUNTER(haudio_out_sai.hdmatx);
 8002198:	6812      	ldr	r2, [r2, #0]
    read_bytes = (speaker->specific.dma_remaining>=cur_waiting_bytes )?speaker->specific.dma_remaining - cur_waiting_bytes:
 800219a:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
    cur_waiting_bytes =  __HAL_DMA_GET_COUNTER(haudio_out_sai.hdmatx);
 800219e:	6852      	ldr	r2, [r2, #4]
    read_bytes = (speaker->specific.dma_remaining>=cur_waiting_bytes )?speaker->specific.dma_remaining - cur_waiting_bytes:
 80021a0:	4293      	cmp	r3, r2
{
 80021a2:	b510      	push	{r4, lr}
                 (last_packet_size - cur_waiting_bytes)+speaker->specific.dma_remaining;   
 80021a4:	bfb4      	ite	lt
 80021a6:	1a8c      	sublt	r4, r1, r2
    read_bytes = (speaker->specific.dma_remaining>=cur_waiting_bytes )?speaker->specific.dma_remaining - cur_waiting_bytes:
 80021a8:	1a9b      	subge	r3, r3, r2
    if(read_bytes<(last_packet_size>>1))
    {
      read_bytes+=last_packet_size;
    }
   speaker->specific.dma_remaining = cur_waiting_bytes;
 80021aa:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
    read_bytes = (speaker->specific.dma_remaining>=cur_waiting_bytes )?speaker->specific.dma_remaining - cur_waiting_bytes:
 80021ae:	bfb8      	it	lt
 80021b0:	191b      	addlt	r3, r3, r4
    if(read_bytes<(last_packet_size>>1))
 80021b2:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
      read_bytes+=last_packet_size;
 80021b6:	bfb8      	it	lt
 80021b8:	185b      	addlt	r3, r3, r1
    
    return read_bytes;
}
 80021ba:	b298      	uxth	r0, r3
 80021bc:	bd10      	pop	{r4, pc}
 80021be:	bf00      	nop
 80021c0:	200005ec 	.word	0x200005ec

080021c4 <AUDIO_SpeakerInitInjectionsParams>:
  speaker->packet_length = AUDIO_MS_PACKET_SIZE_FROM_AUD_DESC(speaker->node.audio_description);
 80021c4:	6843      	ldr	r3, [r0, #4]
{
 80021c6:	b510      	push	{r4, lr}
  speaker->packet_length = AUDIO_MS_PACKET_SIZE_FROM_AUD_DESC(speaker->node.audio_description);
 80021c8:	7c59      	ldrb	r1, [r3, #17]
{
 80021ca:	4604      	mov	r4, r0
  speaker->packet_length = AUDIO_MS_PACKET_SIZE_FROM_AUD_DESC(speaker->node.audio_description);
 80021cc:	791a      	ldrb	r2, [r3, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	fb12 f201 	smulbb	r2, r2, r1
 80021d4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80021d8:	fbb3 f3f1 	udiv	r3, r3, r1
 80021dc:	fb12 f203 	smulbb	r2, r2, r3
  speaker->specific.double_buff = 0;
 80021e0:	2100      	movs	r1, #0
  speaker->packet_length = AUDIO_MS_PACKET_SIZE_FROM_AUD_DESC(speaker->node.audio_description);
 80021e2:	b292      	uxth	r2, r2
  speaker->specific.double_buff = 0;
 80021e4:	f8a0 104e 	strh.w	r1, [r0, #78]	; 0x4e
  speaker->packet_length = AUDIO_MS_PACKET_SIZE_FROM_AUD_DESC(speaker->node.audio_description);
 80021e8:	8302      	strh	r2, [r0, #24]
  speaker->specific.injection_size = AUDIO_SPEAKER_INJECTION_LENGTH(speaker->node.audio_description);
 80021ea:	8782      	strh	r2, [r0, #60]	; 0x3c
  memset(speaker->specific.alt_buffer, 0, speaker->specific.injection_size);
 80021ec:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80021ee:	f004 f917 	bl	8006420 <memset>
  speaker->specific.data = speaker->specific.alt_buffer;/* start injection of dumped data */
 80021f2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80021f4:	6423      	str	r3, [r4, #64]	; 0x40
  speaker->specific.data_size = speaker->specific.injection_size;
 80021f6:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 80021f8:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
 }
 80021fc:	bd10      	pop	{r4, pc}

080021fe <AUDIO_SpeakerSetVolume>:
  BSP_AUDIO_OUT_SetVolume(VOLUME_DB_256_TO_PERCENT(volume_db_256));
 80021fe:	f501 51c8 	add.w	r1, r1, #6400	; 0x1900
 8002202:	2064      	movs	r0, #100	; 0x64
 8002204:	4348      	muls	r0, r1
 8002206:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 800220a:	fb90 f0f1 	sdiv	r0, r0, r1
{
 800220e:	b508      	push	{r3, lr}
  BSP_AUDIO_OUT_SetVolume(VOLUME_DB_256_TO_PERCENT(volume_db_256));
 8002210:	b2c0      	uxtb	r0, r0
 8002212:	f7ff fda5 	bl	8001d60 <BSP_AUDIO_OUT_SetVolume>
}      
 8002216:	2000      	movs	r0, #0
 8002218:	bd08      	pop	{r3, pc}

0800221a <AUDIO_SpeakerMute>:
  BSP_AUDIO_OUT_SetMute(mute);
 800221a:	4608      	mov	r0, r1
{
 800221c:	b508      	push	{r3, lr}
  BSP_AUDIO_OUT_SetMute(mute);
 800221e:	f7ff fdad 	bl	8001d7c <BSP_AUDIO_OUT_SetMute>
}
 8002222:	2000      	movs	r0, #0
 8002224:	bd08      	pop	{r3, pc}

08002226 <AUDIO_SpeakerStart>:
{
 8002226:	b538      	push	{r3, r4, r5, lr}
  speaker->specific.cmd = 0;
 8002228:	2500      	movs	r5, #0
  AUDIO_SpeakerMute( 0,  speaker->node.audio_description->audio_mute , node_handle);
 800222a:	684b      	ldr	r3, [r1, #4]
{
 800222c:	460c      	mov	r4, r1
  speaker->buf = buffer;
 800222e:	6148      	str	r0, [r1, #20]
  speaker->specific.cmd = 0;
 8002230:	f881 5050 	strb.w	r5, [r1, #80]	; 0x50
  BSP_AUDIO_OUT_SetMute(mute);
 8002234:	7c18      	ldrb	r0, [r3, #16]
 8002236:	f7ff fda1 	bl	8001d7c <BSP_AUDIO_OUT_SetMute>
  AUDIO_SpeakerSetVolume( 0,  speaker->node.audio_description->audio_volume_db_256 , node_handle);
 800223a:	6863      	ldr	r3, [r4, #4]
 800223c:	4622      	mov	r2, r4
 800223e:	4628      	mov	r0, r5
 8002240:	68d9      	ldr	r1, [r3, #12]
 8002242:	f7ff ffdc 	bl	80021fe <AUDIO_SpeakerSetVolume>
  speaker->node.state = AUDIO_NODE_STARTED;
 8002246:	2302      	movs	r3, #2
}
 8002248:	4628      	mov	r0, r5
  speaker->node.state = AUDIO_NODE_STARTED;
 800224a:	7023      	strb	r3, [r4, #0]
}
 800224c:	bd38      	pop	{r3, r4, r5, pc}
	...

08002250 <AUDIO_SpeakerDeInit>:
{
 8002250:	b510      	push	{r4, lr}
  if(speaker->node.state != AUDIO_NODE_OFF)
 8002252:	7803      	ldrb	r3, [r0, #0]
{
 8002254:	4604      	mov	r4, r0
  if(speaker->node.state != AUDIO_NODE_OFF)
 8002256:	b1ab      	cbz	r3, 8002284 <AUDIO_SpeakerDeInit+0x34>
    if(speaker->node.state != AUDIO_NODE_ERROR)
 8002258:	2b04      	cmp	r3, #4
 800225a:	d006      	beq.n	800226a <AUDIO_SpeakerDeInit+0x1a>
      speaker->specific.cmd = SPEAKER_CMD_EXIT;
 800225c:	2302      	movs	r3, #2
 800225e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
        while(speaker->specific.cmd&SPEAKER_CMD_EXIT);
 8002262:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8002266:	079b      	lsls	r3, r3, #30
 8002268:	d4fb      	bmi.n	8002262 <AUDIO_SpeakerDeInit+0x12>
    BSP_AUDIO_OUT_SetMute(1);
 800226a:	2001      	movs	r0, #1
 800226c:	f7ff fd86 	bl	8001d7c <BSP_AUDIO_OUT_SetMute>
    free(speaker->specific.alt_buffer);
 8002270:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002272:	f004 f8bf 	bl	80063f4 <free>
    BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8002276:	2002      	movs	r0, #2
 8002278:	f7ff fd58 	bl	8001d2c <BSP_AUDIO_OUT_Stop>
    BSP_AUDIO_OUT_DeInit();
 800227c:	f7ff fe48 	bl	8001f10 <BSP_AUDIO_OUT_DeInit>
    speaker->node.state = AUDIO_NODE_OFF;
 8002280:	2300      	movs	r3, #0
 8002282:	7023      	strb	r3, [r4, #0]
  AUDIO_SpeakerHandler = 0;
 8002284:	2000      	movs	r0, #0
 8002286:	4b01      	ldr	r3, [pc, #4]	; (800228c <AUDIO_SpeakerDeInit+0x3c>)
 8002288:	6018      	str	r0, [r3, #0]
}
 800228a:	bd10      	pop	{r4, pc}
 800228c:	200003e8 	.word	0x200003e8

08002290 <AUDIO_SPEAKER_USER_Init>:
{
 8002290:	b570      	push	{r4, r5, r6, lr}
 8002292:	4614      	mov	r4, r2
 8002294:	4605      	mov	r5, r0
 8002296:	460e      	mov	r6, r1
  memset(speaker, 0, sizeof(AUDIO_SpeakerNode_t));
 8002298:	2254      	movs	r2, #84	; 0x54
 800229a:	2100      	movs	r1, #0
 800229c:	4620      	mov	r0, r4
 800229e:	f004 f8bf 	bl	8006420 <memset>
  speaker->node.type = AUDIO_OUTPUT;
 80022a2:	2301      	movs	r3, #1
  speaker->specific.alt_buffer = malloc(SPEAKER_ALT_BUFFER_SIZE);
 80022a4:	f44f 7010 	mov.w	r0, #576	; 0x240
  speaker->node.session_handle = session_handle;
 80022a8:	60e6      	str	r6, [r4, #12]
  speaker->node.type = AUDIO_OUTPUT;
 80022aa:	7223      	strb	r3, [r4, #8]
  speaker->node.state = AUDIO_NODE_INITIALIZED;
 80022ac:	7023      	strb	r3, [r4, #0]
  speaker->node.audio_description = audio_description;
 80022ae:	6065      	str	r5, [r4, #4]
  speaker->specific.alt_buffer = malloc(SPEAKER_ALT_BUFFER_SIZE);
 80022b0:	f004 f898 	bl	80063e4 <malloc>
 80022b4:	64a0      	str	r0, [r4, #72]	; 0x48
  if(speaker->specific.alt_buffer == 0)
 80022b6:	b908      	cbnz	r0, 80022bc <AUDIO_SPEAKER_USER_Init+0x2c>
    Error_Handler();
 80022b8:	f000 f8fe 	bl	80024b8 <Error_Handler>
  AUDIO_SpeakerInitInjectionsParams( speaker);
 80022bc:	4620      	mov	r0, r4
 80022be:	f7ff ff81 	bl	80021c4 <AUDIO_SpeakerInitInjectionsParams>
  speaker->SpeakerDeInit = AUDIO_SpeakerDeInit;
 80022c2:	4b11      	ldr	r3, [pc, #68]	; (8002308 <AUDIO_SPEAKER_USER_Init+0x78>)
  BSP_AUDIO_OUT_Init_Ext(OUTPUT_DEVICE_AUTO,
 80022c4:	6862      	ldr	r2, [r4, #4]
 80022c6:	2150      	movs	r1, #80	; 0x50
  speaker->SpeakerDeInit = AUDIO_SpeakerDeInit;
 80022c8:	61e3      	str	r3, [r4, #28]
  BSP_AUDIO_OUT_Init_Ext(OUTPUT_DEVICE_AUTO,
 80022ca:	2004      	movs	r0, #4
  speaker->SpeakerStart = AUDIO_SpeakerStart;
 80022cc:	4b0f      	ldr	r3, [pc, #60]	; (800230c <AUDIO_SPEAKER_USER_Init+0x7c>)
  BSP_AUDIO_OUT_Init_Ext(OUTPUT_DEVICE_AUTO,
 80022ce:	6812      	ldr	r2, [r2, #0]
  speaker->SpeakerStart = AUDIO_SpeakerStart;
 80022d0:	6223      	str	r3, [r4, #32]
  speaker->SpeakerStop = AUDIO_SpeakerStop;
 80022d2:	4b0f      	ldr	r3, [pc, #60]	; (8002310 <AUDIO_SPEAKER_USER_Init+0x80>)
 80022d4:	6263      	str	r3, [r4, #36]	; 0x24
  speaker->SpeakerChangeFrequency = AUDIO_SpeakerChangeFrequency;
 80022d6:	4b0f      	ldr	r3, [pc, #60]	; (8002314 <AUDIO_SPEAKER_USER_Init+0x84>)
 80022d8:	62a3      	str	r3, [r4, #40]	; 0x28
  speaker->SpeakerMute = AUDIO_SpeakerMute;
 80022da:	4b0f      	ldr	r3, [pc, #60]	; (8002318 <AUDIO_SPEAKER_USER_Init+0x88>)
 80022dc:	62e3      	str	r3, [r4, #44]	; 0x2c
  speaker->SpeakerSetVolume = AUDIO_SpeakerSetVolume;
 80022de:	4b0f      	ldr	r3, [pc, #60]	; (800231c <AUDIO_SPEAKER_USER_Init+0x8c>)
 80022e0:	6323      	str	r3, [r4, #48]	; 0x30
  speaker->SpeakerStartReadCount = AUDIO_SpeakerStartReadCount;
 80022e2:	4b0f      	ldr	r3, [pc, #60]	; (8002320 <AUDIO_SPEAKER_USER_Init+0x90>)
 80022e4:	6363      	str	r3, [r4, #52]	; 0x34
  speaker->SpeakerGetReadCount = AUDIO_SpeakerGetLastReadCount;
 80022e6:	4b0f      	ldr	r3, [pc, #60]	; (8002324 <AUDIO_SPEAKER_USER_Init+0x94>)
 80022e8:	63a3      	str	r3, [r4, #56]	; 0x38
  BSP_AUDIO_OUT_Init_Ext(OUTPUT_DEVICE_AUTO,
 80022ea:	7c6b      	ldrb	r3, [r5, #17]
 80022ec:	00db      	lsls	r3, r3, #3
 80022ee:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80022f2:	f7ff fe49 	bl	8001f88 <BSP_AUDIO_OUT_Init_Ext>
  BSP_AUDIO_OUT_Play((uint16_t *)speaker->specific.data ,speaker->specific.data_size );
 80022f6:	f8b4 1044 	ldrh.w	r1, [r4, #68]	; 0x44
 80022fa:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80022fc:	f7ff fce0 	bl	8001cc0 <BSP_AUDIO_OUT_Play>
  AUDIO_SpeakerHandler = speaker;
 8002300:	4b09      	ldr	r3, [pc, #36]	; (8002328 <AUDIO_SPEAKER_USER_Init+0x98>)
}
 8002302:	2000      	movs	r0, #0
  AUDIO_SpeakerHandler = speaker;
 8002304:	601c      	str	r4, [r3, #0]
}
 8002306:	bd70      	pop	{r4, r5, r6, pc}
 8002308:	08002251 	.word	0x08002251
 800230c:	08002227 	.word	0x08002227
 8002310:	0800215b 	.word	0x0800215b
 8002314:	0800216b 	.word	0x0800216b
 8002318:	0800221b 	.word	0x0800221b
 800231c:	080021ff 	.word	0x080021ff
 8002320:	0800217d 	.word	0x0800217d
 8002324:	08002191 	.word	0x08002191
 8002328:	200003e8 	.word	0x200003e8

0800232c <BSP_AUDIO_OUT_Error_CallBack>:
  Error_Handler();
 800232c:	f000 b8c4 	b.w	80024b8 <Error_Handler>

08002330 <BSP_AUDIO_OUT_TransferComplete_CallBack>:
{
 8002330:	b570      	push	{r4, r5, r6, lr}
  if((AUDIO_SpeakerHandler)&&(AUDIO_SpeakerHandler->node.state != AUDIO_NODE_OFF))
 8002332:	4d36      	ldr	r5, [pc, #216]	; (800240c <BSP_AUDIO_OUT_TransferComplete_CallBack+0xdc>)
 8002334:	682b      	ldr	r3, [r5, #0]
 8002336:	b14b      	cbz	r3, 800234c <BSP_AUDIO_OUT_TransferComplete_CallBack+0x1c>
 8002338:	781a      	ldrb	r2, [r3, #0]
 800233a:	b13a      	cbz	r2, 800234c <BSP_AUDIO_OUT_TransferComplete_CallBack+0x1c>
   if(AUDIO_SpeakerHandler->specific.cmd&SPEAKER_CMD_EXIT)
 800233c:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8002340:	f012 0402 	ands.w	r4, r2, #2
 8002344:	d003      	beq.n	800234e <BSP_AUDIO_OUT_TransferComplete_CallBack+0x1e>
     AUDIO_SpeakerHandler->specific.cmd = 0;
 8002346:	2200      	movs	r2, #0
 8002348:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 800234c:	bd70      	pop	{r4, r5, r6, pc}
   if(AUDIO_SpeakerHandler->specific.cmd&SPEAKER_CMD_CHANGE_FREQUENCE)
 800234e:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8002352:	0752      	lsls	r2, r2, #29
 8002354:	d514      	bpl.n	8002380 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x50>
     AUDIO_SpeakerHandler->node.state = AUDIO_NODE_STOPPED;
 8002356:	2203      	movs	r2, #3
     BSP_AUDIO_OUT_SetMute(1);
 8002358:	2001      	movs	r0, #1
     AUDIO_SpeakerHandler->node.state = AUDIO_NODE_STOPPED;
 800235a:	701a      	strb	r2, [r3, #0]
     BSP_AUDIO_OUT_SetMute(1);
 800235c:	f7ff fd0e 	bl	8001d7c <BSP_AUDIO_OUT_SetMute>
     AUDIO_SpeakerInitInjectionsParams(AUDIO_SpeakerHandler);
 8002360:	682e      	ldr	r6, [r5, #0]
 8002362:	4630      	mov	r0, r6
 8002364:	f7ff ff2e 	bl	80021c4 <AUDIO_SpeakerInitInjectionsParams>
     BSP_AUDIO_OUT_SetFrequency(AUDIO_SpeakerHandler->node.audio_description->frequency);
 8002368:	6873      	ldr	r3, [r6, #4]
 800236a:	6818      	ldr	r0, [r3, #0]
 800236c:	f7ff fe98 	bl	80020a0 <BSP_AUDIO_OUT_SetFrequency>
     BSP_AUDIO_OUT_SetMute(AUDIO_SpeakerHandler->node.audio_description->audio_mute);
 8002370:	682b      	ldr	r3, [r5, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	7c18      	ldrb	r0, [r3, #16]
 8002376:	f7ff fd01 	bl	8001d7c <BSP_AUDIO_OUT_SetMute>
     AUDIO_SpeakerHandler->specific.cmd = 0;
 800237a:	682b      	ldr	r3, [r5, #0]
 800237c:	f883 4050 	strb.w	r4, [r3, #80]	; 0x50
  if(AUDIO_SpeakerHandler->specific.cmd&SPEAKER_CMD_STOP)
 8002380:	682c      	ldr	r4, [r5, #0]
 8002382:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8002386:	07db      	lsls	r3, r3, #31
 8002388:	d511      	bpl.n	80023ae <BSP_AUDIO_OUT_TransferComplete_CallBack+0x7e>
    AUDIO_SpeakerHandler->specific.data      = AUDIO_SpeakerHandler->specific.alt_buffer;
 800238a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    AUDIO_SpeakerHandler->specific.offset    = 0;
 800238c:	2100      	movs	r1, #0
    AUDIO_SpeakerHandler->specific.data_size = AUDIO_SpeakerHandler->specific.injection_size;
 800238e:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
    AUDIO_SpeakerHandler->specific.data      = AUDIO_SpeakerHandler->specific.alt_buffer;
 8002390:	6420      	str	r0, [r4, #64]	; 0x40
    AUDIO_SpeakerHandler->specific.data_size = AUDIO_SpeakerHandler->specific.injection_size;
 8002392:	f8a4 2044 	strh.w	r2, [r4, #68]	; 0x44
    AUDIO_SpeakerHandler->specific.offset    = 0;
 8002396:	f884 104f 	strb.w	r1, [r4, #79]	; 0x4f
    memset(AUDIO_SpeakerHandler->specific.data,0,AUDIO_SpeakerHandler->specific.data_size);
 800239a:	f004 f841 	bl	8006420 <memset>
    AUDIO_SpeakerHandler->node.state = AUDIO_NODE_STOPPED;
 800239e:	2303      	movs	r3, #3
 80023a0:	7023      	strb	r3, [r4, #0]
    AUDIO_SpeakerHandler->specific.cmd       ^= SPEAKER_CMD_STOP;
 80023a2:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 80023a6:	f083 0301 	eor.w	r3, r3, #1
 80023aa:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    BSP_AUDIO_OUT_ChangeBuffer((uint16_t*)AUDIO_SpeakerHandler->specific.data, (uint16_t)AUDIO_SpeakerHandler->specific.data_size); 
 80023ae:	f8b4 1044 	ldrh.w	r1, [r4, #68]	; 0x44
 80023b2:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80023b4:	f7ff fcac 	bl	8001d10 <BSP_AUDIO_OUT_ChangeBuffer>
    if(AUDIO_SpeakerHandler->node.state == AUDIO_NODE_STARTED)
 80023b8:	6829      	ldr	r1, [r5, #0]
 80023ba:	780b      	ldrb	r3, [r1, #0]
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d1c5      	bne.n	800234c <BSP_AUDIO_OUT_TransferComplete_CallBack+0x1c>
      AUDIO_SpeakerHandler->node.session_handle->SessionCallback(AUDIO_PACKET_PLAYED, (AUDIO_Node_t*)AUDIO_SpeakerHandler, 
 80023c0:	68ca      	ldr	r2, [r1, #12]
 80023c2:	2003      	movs	r0, #3
 80023c4:	6893      	ldr	r3, [r2, #8]
 80023c6:	4798      	blx	r3
      AUDIO_SpeakerHandler->specific.data_size = AUDIO_SpeakerHandler->specific.injection_size;
 80023c8:	6829      	ldr	r1, [r5, #0]
      wr_distance = AUDIO_BUFFER_FILLED_SIZE(AUDIO_SpeakerHandler->buf);
 80023ca:	6948      	ldr	r0, [r1, #20]
      AUDIO_SpeakerHandler->specific.data_size = AUDIO_SpeakerHandler->specific.injection_size;
 80023cc:	8f8c      	ldrh	r4, [r1, #60]	; 0x3c
      wr_distance = AUDIO_BUFFER_FILLED_SIZE(AUDIO_SpeakerHandler->buf);
 80023ce:	88c2      	ldrh	r2, [r0, #6]
 80023d0:	8883      	ldrh	r3, [r0, #4]
      AUDIO_SpeakerHandler->specific.data_size = AUDIO_SpeakerHandler->specific.injection_size;
 80023d2:	f8a1 4044 	strh.w	r4, [r1, #68]	; 0x44
      wr_distance = AUDIO_BUFFER_FILLED_SIZE(AUDIO_SpeakerHandler->buf);
 80023d6:	429a      	cmp	r2, r3
 80023d8:	bf3c      	itt	cc
 80023da:	8905      	ldrhcc	r5, [r0, #8]
 80023dc:	1952      	addcc	r2, r2, r5
 80023de:	1ad2      	subs	r2, r2, r3
 80023e0:	b292      	uxth	r2, r2
      if(wr_distance < AUDIO_SpeakerHandler->specific.injection_size)
 80023e2:	4294      	cmp	r4, r2
 80023e4:	d905      	bls.n	80023f2 <BSP_AUDIO_OUT_TransferComplete_CallBack+0xc2>
        AUDIO_SpeakerHandler->node.session_handle->SessionCallback(AUDIO_UNDERRUN, (AUDIO_Node_t*)AUDIO_SpeakerHandler, 
 80023e6:	68ca      	ldr	r2, [r1, #12]
 80023e8:	2005      	movs	r0, #5
 80023ea:	6893      	ldr	r3, [r2, #8]
}
 80023ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        AUDIO_SpeakerHandler->node.session_handle->SessionCallback(AUDIO_UNDERRUN, (AUDIO_Node_t*)AUDIO_SpeakerHandler, 
 80023f0:	4718      	bx	r3
      read_length = AUDIO_SpeakerHandler->packet_length;
 80023f2:	8b0c      	ldrh	r4, [r1, #24]
        AUDIO_SpeakerHandler->specific.data = AUDIO_SpeakerHandler->buf->data + AUDIO_SpeakerHandler->buf->rd_ptr;
 80023f4:	6802      	ldr	r2, [r0, #0]
 80023f6:	441a      	add	r2, r3
        AUDIO_SpeakerHandler->buf->rd_ptr += read_length;
 80023f8:	4423      	add	r3, r4
        AUDIO_SpeakerHandler->specific.data = AUDIO_SpeakerHandler->buf->data + AUDIO_SpeakerHandler->buf->rd_ptr;
 80023fa:	640a      	str	r2, [r1, #64]	; 0x40
        AUDIO_SpeakerHandler->buf->rd_ptr += read_length;
 80023fc:	b29b      	uxth	r3, r3
        if(AUDIO_SpeakerHandler->buf->rd_ptr >= AUDIO_SpeakerHandler->buf->size)
 80023fe:	8902      	ldrh	r2, [r0, #8]
        AUDIO_SpeakerHandler->buf->rd_ptr += read_length;
 8002400:	8083      	strh	r3, [r0, #4]
        if(AUDIO_SpeakerHandler->buf->rd_ptr >= AUDIO_SpeakerHandler->buf->size)
 8002402:	4293      	cmp	r3, r2
          AUDIO_SpeakerHandler->buf->rd_ptr = AUDIO_SpeakerHandler->buf->rd_ptr - AUDIO_SpeakerHandler->buf->size;
 8002404:	bf24      	itt	cs
 8002406:	1a9b      	subcs	r3, r3, r2
 8002408:	8083      	strhcs	r3, [r0, #4]
 800240a:	e79f      	b.n	800234c <BSP_AUDIO_OUT_TransferComplete_CallBack+0x1c>
 800240c:	200003e8 	.word	0x200003e8

08002410 <BSP_AUDIO_OUT_HalfTransfer_CallBack>:
}
 8002410:	4770      	bx	lr
	...

08002414 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8002414:	b500      	push	{lr}
 8002416:	b0b7      	sub	sp, #220	; 0xdc
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002418:	2402      	movs	r4, #2
  HAL_Init();
 800241a:	f000 fc33 	bl	8002c84 <HAL_Init>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800241e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002422:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 384;  
 8002424:	2019      	movs	r0, #25
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 8;
   RCC_OscInitStruct.PLL.PLLR = 7;
 8002426:	f04f 0c08 	mov.w	ip, #8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800242a:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800242c:	e9cd 1305 	strd	r1, r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8002430:	2300      	movs	r3, #0
 8002432:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002434:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002438:	e9cd 430b 	strd	r4, r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 384;  
 800243c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002440:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
   RCC_OscInitStruct.PLL.PLLR = 7;
 8002444:	2307      	movs	r3, #7
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002446:	a805      	add	r0, sp, #20
   RCC_OscInitStruct.PLL.PLLR = 7;
 8002448:	e9cd c310 	strd	ip, r3, [sp, #64]	; 0x40
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800244c:	f002 f8ce 	bl	80045ec <HAL_RCC_OscConfig>
 8002450:	b100      	cbz	r0, 8002454 <main+0x40>
  * @retval None
  */
 void Error_Handler(void)
{
  /* User may add here some code to deal with this error */
  while(1)
 8002452:	e7fe      	b.n	8002452 <main+0x3e>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002454:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002458:	9031      	str	r0, [sp, #196]	; 0xc4
  if(HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct)  != HAL_OK)
 800245a:	a812      	add	r0, sp, #72	; 0x48
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800245c:	9312      	str	r3, [sp, #72]	; 0x48
  if(HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct)  != HAL_OK)
 800245e:	f002 fb2d 	bl	8004abc <HAL_RCCEx_PeriphCLKConfig>
 8002462:	b100      	cbz	r0, 8002466 <main+0x52>
  while(1)
 8002464:	e7fe      	b.n	8002464 <main+0x50>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8002466:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002468:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800246c:	9002      	str	r0, [sp, #8]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800246e:	2106      	movs	r1, #6
 8002470:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002472:	e9cd 3400 	strd	r3, r4, [sp]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002476:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800247a:	e9cd 2303 	strd	r2, r3, [sp, #12]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800247e:	f002 fa7b 	bl	8004978 <HAL_RCC_ClockConfig>
 8002482:	4602      	mov	r2, r0
 8002484:	b100      	cbz	r0, 8002488 <main+0x74>
  while(1)
 8002486:	e7fe      	b.n	8002486 <main+0x72>
  USBD_Init(&USBD_Device, &AUDIO_Desc, 0);
 8002488:	4907      	ldr	r1, [pc, #28]	; (80024a8 <main+0x94>)
 800248a:	4808      	ldr	r0, [pc, #32]	; (80024ac <main+0x98>)
 800248c:	f7fe fb7c 	bl	8000b88 <USBD_Init>
  USBD_RegisterClass(&USBD_Device, USBD_AUDIO_CLASS);
 8002490:	4907      	ldr	r1, [pc, #28]	; (80024b0 <main+0x9c>)
 8002492:	4806      	ldr	r0, [pc, #24]	; (80024ac <main+0x98>)
 8002494:	f7fe fb8d 	bl	8000bb2 <USBD_RegisterClass>
  USBD_AUDIO_RegisterInterface(&USBD_Device, &audio_class_interface);
 8002498:	4906      	ldr	r1, [pc, #24]	; (80024b4 <main+0xa0>)
 800249a:	4804      	ldr	r0, [pc, #16]	; (80024ac <main+0x98>)
 800249c:	f7fe fb66 	bl	8000b6c <USBD_AUDIO_RegisterInterface>
  USBD_Start(&USBD_Device);
 80024a0:	4802      	ldr	r0, [pc, #8]	; (80024ac <main+0x98>)
 80024a2:	f7fe fb8d 	bl	8000bc0 <USBD_Start>
  while (1)
 80024a6:	e7fe      	b.n	80024a6 <main+0x92>
 80024a8:	2000013c 	.word	0x2000013c
 80024ac:	20000970 	.word	0x20000970
 80024b0:	2000000c 	.word	0x2000000c
 80024b4:	200000bc 	.word	0x200000bc

080024b8 <Error_Handler>:
  while(1)
 80024b8:	e7fe      	b.n	80024b8 <Error_Handler>

080024ba <USBD_error_handler>:
 80024ba:	e7fe      	b.n	80024ba <USBD_error_handler>

080024bc <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 80024bc:	4770      	bx	lr

080024be <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80024be:	e7fe      	b.n	80024be <HardFault_Handler>

080024c0 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80024c0:	e7fe      	b.n	80024c0 <MemManage_Handler>

080024c2 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80024c2:	e7fe      	b.n	80024c2 <BusFault_Handler>

080024c4 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80024c4:	e7fe      	b.n	80024c4 <UsageFault_Handler>

080024c6 <SVC_Handler>:
 80024c6:	4770      	bx	lr

080024c8 <DebugMon_Handler>:
 80024c8:	4770      	bx	lr

080024ca <PendSV_Handler>:
 80024ca:	4770      	bx	lr

080024cc <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 80024cc:	f000 bbec 	b.w	8002ca8 <HAL_IncTick>

080024d0 <OTG_HS_IRQHandler>:
#else
void OTG_HS_IRQHandler(void)
#endif
#endif
{
  HAL_PCD_IRQHandler(&hpcd);
 80024d0:	4801      	ldr	r0, [pc, #4]	; (80024d8 <OTG_HS_IRQHandler+0x8>)
 80024d2:	f001 bbd5 	b.w	8003c80 <HAL_PCD_IRQHandler>
 80024d6:	bf00      	nop
 80024d8:	20000c0c 	.word	0x20000c0c

080024dc <DMA2_Stream1_IRQHandler>:
  * @param None
  * @retval None
  */
void AUDIO_OUT_SAIx_DMAx_IRQHandler(void)
{
  HAL_DMA_IRQHandler(haudio_out_sai.hdmatx);
 80024dc:	4b01      	ldr	r3, [pc, #4]	; (80024e4 <DMA2_Stream1_IRQHandler+0x8>)
 80024de:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80024e0:	f000 bdc4 	b.w	800306c <HAL_DMA_IRQHandler>
 80024e4:	200005ec 	.word	0x200005ec

080024e8 <DMA2_Stream0_IRQHandler>:
  * @param None
  * @retval None
  */
void AUDIO_DFSDMx_DMAx_TOP_LEFT_IRQHandler(void)
{
  HAL_DMA_IRQHandler(hAudioInTopLeftFilter.hdmaReg);
 80024e8:	4b01      	ldr	r3, [pc, #4]	; (80024f0 <DMA2_Stream0_IRQHandler+0x8>)
 80024ea:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80024ec:	f000 bdbe 	b.w	800306c <HAL_DMA_IRQHandler>
 80024f0:	20000670 	.word	0x20000670

080024f4 <DMA2_Stream5_IRQHandler>:
  * @param None
  * @retval None
  */
void AUDIO_DFSDMx_DMAx_TOP_RIGHT_IRQHandler(void)
{
  HAL_DMA_IRQHandler(hAudioInTopRightFilter.hdmaReg);
 80024f4:	4b01      	ldr	r3, [pc, #4]	; (80024fc <DMA2_Stream5_IRQHandler+0x8>)
 80024f6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80024f8:	f000 bdb8 	b.w	800306c <HAL_DMA_IRQHandler>
 80024fc:	20000884 	.word	0x20000884

08002500 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002500:	490f      	ldr	r1, [pc, #60]	; (8002540 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002502:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002504:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002508:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800250c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8002510:	4b0c      	ldr	r3, [pc, #48]	; (8002544 <SystemInit+0x44>)
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	f042 0201 	orr.w	r2, r2, #1
 8002518:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800251a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002522:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002526:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002528:	4a07      	ldr	r2, [pc, #28]	; (8002548 <SystemInit+0x48>)
 800252a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002532:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002534:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002536:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800253a:	608b      	str	r3, [r1, #8]
#endif
}
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	e000ed00 	.word	0xe000ed00
 8002544:	40023800 	.word	0x40023800
 8002548:	24003010 	.word	0x24003010

0800254c <HAL_PCD_MspInit>:
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef *hpcd)
{
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  if(hpcd->Instance == USB_OTG_FS)
 800254c:	6803      	ldr	r3, [r0, #0]
 800254e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 8002552:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002556:	b090      	sub	sp, #64	; 0x40
  if(hpcd->Instance == USB_OTG_FS)
 8002558:	d14a      	bne.n	80025f0 <HAL_PCD_MspInit+0xa4>
  {
    /* Configure USB FS GPIOs */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800255a:	4c6a      	ldr	r4, [pc, #424]	; (8002704 <HAL_PCD_MspInit+0x1b8>)
    
    /* Configure DM DP Pins */
    GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800255c:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8002560:	2500      	movs	r5, #0
 8002562:	2603      	movs	r6, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002564:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002566:	270a      	movs	r7, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002568:	a90b      	add	r1, sp, #44	; 0x2c
 800256a:	4867      	ldr	r0, [pc, #412]	; (8002708 <HAL_PCD_MspInit+0x1bc>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800256c:	f043 0301 	orr.w	r3, r3, #1
 8002570:	6323      	str	r3, [r4, #48]	; 0x30
 8002572:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002574:	970f      	str	r7, [sp, #60]	; 0x3c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	9301      	str	r3, [sp, #4]
 800257c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800257e:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8002580:	e9cd 560d 	strd	r5, r6, [sp, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002584:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002588:	f000 fe2e 	bl	80031e8 <HAL_GPIO_Init>

    /* Configure VBUS Pin */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800258c:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002590:	a90b      	add	r1, sp, #44	; 0x2c
 8002592:	485d      	ldr	r0, [pc, #372]	; (8002708 <HAL_PCD_MspInit+0x1bc>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002594:	950d      	str	r5, [sp, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002596:	e9cd 350b 	strd	r3, r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800259a:	f000 fe25 	bl	80031e8 <HAL_GPIO_Init>
    
    /* Configure ID pin */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800259e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80025a2:	2312      	movs	r3, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025a4:	4858      	ldr	r0, [pc, #352]	; (8002708 <HAL_PCD_MspInit+0x1bc>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80025a6:	970f      	str	r7, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025a8:	e9cd 130b 	strd	r1, r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025ac:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ae:	a90b      	add	r1, sp, #44	; 0x2c
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025b0:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025b2:	f000 fe19 	bl	80031e8 <HAL_GPIO_Init>

    /* Enable USB FS Clock */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80025b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
    
    /* Set USBFS Interrupt priority */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, USB_IRQ_PREPRIO, 0);
 80025b8:	2043      	movs	r0, #67	; 0x43
 80025ba:	462a      	mov	r2, r5
 80025bc:	4631      	mov	r1, r6
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80025be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025c2:	6363      	str	r3, [r4, #52]	; 0x34
 80025c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80025c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ca:	9302      	str	r3, [sp, #8]
 80025cc:	9b02      	ldr	r3, [sp, #8]
 80025ce:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80025d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025d4:	6463      	str	r3, [r4, #68]	; 0x44
 80025d6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80025d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025dc:	9303      	str	r3, [sp, #12]
 80025de:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, USB_IRQ_PREPRIO, 0);
 80025e0:	f000 fb98 	bl	8002d14 <HAL_NVIC_SetPriority>
    
    /* Enable USBFS Interrupt */
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80025e4:	2043      	movs	r0, #67	; 0x43
    
    /* Set USBHS Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, USB_IRQ_PREPRIO, 0);
    
    /* Enable USBHS Interrupt */
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 80025e6:	f000 fbc7 	bl	8002d78 <HAL_NVIC_EnableIRQ>
  }   
}
 80025ea:	b010      	add	sp, #64	; 0x40
 80025ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if(hpcd->Instance == USB_OTG_HS)
 80025f0:	4a46      	ldr	r2, [pc, #280]	; (800270c <HAL_PCD_MspInit+0x1c0>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d1f9      	bne.n	80025ea <HAL_PCD_MspInit+0x9e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025f6:	4c43      	ldr	r4, [pc, #268]	; (8002704 <HAL_PCD_MspInit+0x1b8>)
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80025f8:	2500      	movs	r5, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025fa:	2702      	movs	r7, #2
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80025fc:	260a      	movs	r6, #10
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025fe:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8002600:	f04f 0803 	mov.w	r8, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002604:	a90b      	add	r1, sp, #44	; 0x2c
 8002606:	4840      	ldr	r0, [pc, #256]	; (8002708 <HAL_PCD_MspInit+0x1bc>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002608:	f043 0301 	orr.w	r3, r3, #1
 800260c:	6323      	str	r3, [r4, #48]	; 0x30
 800260e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002610:	f003 0301 	and.w	r3, r3, #1
 8002614:	9304      	str	r3, [sp, #16]
 8002616:	9b04      	ldr	r3, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002618:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800261a:	f043 0302 	orr.w	r3, r3, #2
 800261e:	6323      	str	r3, [r4, #48]	; 0x30
 8002620:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	9305      	str	r3, [sp, #20]
 8002628:	9b05      	ldr	r3, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800262a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800262c:	f043 0304 	orr.w	r3, r3, #4
 8002630:	6323      	str	r3, [r4, #48]	; 0x30
 8002632:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002634:	f003 0304 	and.w	r3, r3, #4
 8002638:	9306      	str	r3, [sp, #24]
 800263a:	9b06      	ldr	r3, [sp, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800263c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800263e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002642:	6323      	str	r3, [r4, #48]	; 0x30
 8002644:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800264a:	9307      	str	r3, [sp, #28]
 800264c:	9b07      	ldr	r3, [sp, #28]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800264e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002650:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002654:	6323      	str	r3, [r4, #48]	; 0x30
 8002656:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002658:	960f      	str	r6, [sp, #60]	; 0x3c
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800265a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800265e:	9308      	str	r3, [sp, #32]
 8002660:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002662:	2320      	movs	r3, #32
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8002664:	e9cd 580d 	strd	r5, r8, [sp, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002668:	e9cd 370b 	strd	r3, r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800266c:	f000 fdbc 	bl	80031e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002670:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002672:	a90b      	add	r1, sp, #44	; 0x2c
 8002674:	4824      	ldr	r0, [pc, #144]	; (8002708 <HAL_PCD_MspInit+0x1bc>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002676:	960f      	str	r6, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002678:	e9cd 370b 	strd	r3, r7, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800267c:	e9cd 580d 	strd	r5, r8, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002680:	f000 fdb2 	bl	80031e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_5 |\
 8002684:	f643 4323 	movw	r3, #15395	; 0x3c23
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002688:	a90b      	add	r1, sp, #44	; 0x2c
 800268a:	4821      	ldr	r0, [pc, #132]	; (8002710 <HAL_PCD_MspInit+0x1c4>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268c:	950d      	str	r5, [sp, #52]	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800268e:	960f      	str	r6, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002690:	e9cd 370b 	strd	r3, r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002694:	f000 fda8 	bl	80031e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002698:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800269a:	a90b      	add	r1, sp, #44	; 0x2c
 800269c:	481d      	ldr	r0, [pc, #116]	; (8002714 <HAL_PCD_MspInit+0x1c8>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269e:	950d      	str	r5, [sp, #52]	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80026a0:	960f      	str	r6, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a2:	e9cd 370b 	strd	r3, r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026a6:	f000 fd9f 	bl	80031e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80026aa:	2310      	movs	r3, #16
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80026ac:	a90b      	add	r1, sp, #44	; 0x2c
 80026ae:	481a      	ldr	r0, [pc, #104]	; (8002718 <HAL_PCD_MspInit+0x1cc>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b0:	950d      	str	r5, [sp, #52]	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80026b2:	960f      	str	r6, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b4:	e9cd 370b 	strd	r3, r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80026b8:	f000 fd96 	bl	80031e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80026bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80026c0:	a90b      	add	r1, sp, #44	; 0x2c
 80026c2:	4816      	ldr	r0, [pc, #88]	; (800271c <HAL_PCD_MspInit+0x1d0>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c4:	950d      	str	r5, [sp, #52]	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80026c6:	960f      	str	r6, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c8:	e9cd 370b 	strd	r3, r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80026cc:	f000 fd8c 	bl	80031e8 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 80026d0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    HAL_NVIC_SetPriority(OTG_HS_IRQn, USB_IRQ_PREPRIO, 0);
 80026d2:	204d      	movs	r0, #77	; 0x4d
 80026d4:	462a      	mov	r2, r5
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 80026d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    HAL_NVIC_SetPriority(OTG_HS_IRQn, USB_IRQ_PREPRIO, 0);
 80026da:	4641      	mov	r1, r8
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 80026dc:	6323      	str	r3, [r4, #48]	; 0x30
 80026de:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80026e0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80026e4:	9309      	str	r3, [sp, #36]	; 0x24
 80026e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80026e8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80026ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80026ee:	6323      	str	r3, [r4, #48]	; 0x30
 80026f0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80026f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026f6:	930a      	str	r3, [sp, #40]	; 0x28
 80026f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    HAL_NVIC_SetPriority(OTG_HS_IRQn, USB_IRQ_PREPRIO, 0);
 80026fa:	f000 fb0b 	bl	8002d14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 80026fe:	204d      	movs	r0, #77	; 0x4d
 8002700:	e771      	b.n	80025e6 <HAL_PCD_MspInit+0x9a>
 8002702:	bf00      	nop
 8002704:	40023800 	.word	0x40023800
 8002708:	40020000 	.word	0x40020000
 800270c:	40040000 	.word	0x40040000
 8002710:	40020400 	.word	0x40020400
 8002714:	40020800 	.word	0x40020800
 8002718:	40021c00 	.word	0x40021c00
 800271c:	40022000 	.word	0x40022000

08002720 <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage(hpcd->pData, (uint8_t *)hpcd->Setup);
 8002720:	f500 7170 	add.w	r1, r0, #960	; 0x3c0
 8002724:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8002728:	f7fe ba61 	b.w	8000bee <USBD_LL_SetupStage>

0800272c <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800272c:	231c      	movs	r3, #28
 800272e:	fb03 0301 	mla	r3, r3, r1, r0
 8002732:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8002736:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800273a:	f7fe ba85 	b.w	8000c48 <USBD_LL_DataOutStage>

0800273e <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800273e:	231c      	movs	r3, #28
 8002740:	fb03 0301 	mla	r3, r3, r1, r0
 8002744:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8002748:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800274a:	f7fe baad 	b.w	8000ca8 <USBD_LL_DataInStage>

0800274e <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF(hpcd->pData);
 800274e:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8002752:	f7fe bb29 	b.w	8000da8 <USBD_LL_SOF>

08002756 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{   
 8002756:	b513      	push	{r0, r1, r4, lr}
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
  
  /* Set USB Current Speed */
  switch(hpcd->Init.speed)
 8002758:	68c1      	ldr	r1, [r0, #12]
{   
 800275a:	4604      	mov	r4, r0
    speed = USBD_SPEED_FULL;
    break;
  }
  
  /* Reset Device */
  USBD_LL_Reset(hpcd->pData);
 800275c:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
    speed = USBD_SPEED_HIGH;
 8002760:	3900      	subs	r1, #0
 8002762:	bf18      	it	ne
 8002764:	2101      	movne	r1, #1
 8002766:	9101      	str	r1, [sp, #4]
  USBD_LL_Reset(hpcd->pData);
 8002768:	f7fe faed 	bl	8000d46 <USBD_LL_Reset>
  
  USBD_LL_SetSpeed(hpcd->pData, speed);
 800276c:	9901      	ldr	r1, [sp, #4]
 800276e:	f8d4 03fc 	ldr.w	r0, [r4, #1020]	; 0x3fc
}
 8002772:	b002      	add	sp, #8
 8002774:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_SetSpeed(hpcd->pData, speed);
 8002778:	f7fe bb04 	b.w	8000d84 <USBD_LL_SetSpeed>

0800277c <HAL_PCD_SuspendCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_Suspend(hpcd->pData);
 800277c:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8002780:	f7fe bb03 	b.w	8000d8a <USBD_LL_Suspend>

08002784 <HAL_PCD_ResumeCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_Resume(hpcd->pData);
 8002784:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8002788:	f7fe bb08 	b.w	8000d9c <USBD_LL_Resume>

0800278c <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoOUTIncomplete(hpcd->pData, epnum);
 800278c:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8002790:	f7fe bb22 	b.w	8000dd8 <USBD_LL_IsoOUTIncomplete>

08002794 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoINIncomplete(hpcd->pData, epnum);
 8002794:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8002798:	f7fe bb12 	b.w	8000dc0 <USBD_LL_IsoINIncomplete>

0800279c <HAL_PCD_ConnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevConnected(hpcd->pData);
 800279c:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 80027a0:	f7fe bb26 	b.w	8000df0 <USBD_LL_DevConnected>

080027a4 <HAL_PCD_DisconnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevDisconnected(hpcd->pData);
 80027a4:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 80027a8:	f7fe bb24 	b.w	8000df4 <USBD_LL_DevDisconnected>

080027ac <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80027ac:	4603      	mov	r3, r0
#ifdef USE_USB_FS_INTO_HS
  /* Set LL Driver parameters */
  hpcd.Instance = USB_OTG_HS;
  hpcd.Init.dev_endpoints = 6;
 80027ae:	491d      	ldr	r1, [pc, #116]	; (8002824 <USBD_LL_Init+0x78>)
  hpcd.Instance = USB_OTG_HS;
 80027b0:	481d      	ldr	r0, [pc, #116]	; (8002828 <USBD_LL_Init+0x7c>)
  hpcd.Init.dev_endpoints = 6;
 80027b2:	2206      	movs	r2, #6
{
 80027b4:	b510      	push	{r4, lr}
  hpcd.Init.use_dedicated_ep1 = 0;
 80027b6:	2400      	movs	r4, #0
  hpcd.Init.Sof_enable = 1;
  hpcd.Init.speed = PCD_SPEED_FULL;
  hpcd.Init.vbus_sensing_enable = 1;
  
  /* Link The driver to the stack */
  hpcd.pData = pdev;
 80027b8:	f8c0 33fc 	str.w	r3, [r0, #1020]	; 0x3fc
  pdev->pData = &hpcd;
 80027bc:	f8c3 0298 	str.w	r0, [r3, #664]	; 0x298
  hpcd.Init.use_dedicated_ep1 = 0;
 80027c0:	6304      	str	r4, [r0, #48]	; 0x30
  hpcd.Init.dev_endpoints = 6;
 80027c2:	e9c0 1200 	strd	r1, r2, [r0]
  hpcd.Init.ep0_mps = 0x40;
 80027c6:	2240      	movs	r2, #64	; 0x40
  hpcd.Init.speed = PCD_SPEED_FULL;
 80027c8:	2102      	movs	r1, #2
  hpcd.Init.dma_enable = 0;
 80027ca:	e9c0 4204 	strd	r4, r2, [r0, #16]
  hpcd.Init.phy_itface = PCD_PHY_ULPI;
 80027ce:	2201      	movs	r2, #1
  hpcd.Init.speed = PCD_SPEED_FULL;
 80027d0:	60c1      	str	r1, [r0, #12]
  hpcd.Init.lpm_enable = 0;
 80027d2:	e9c0 4408 	strd	r4, r4, [r0, #32]
  hpcd.Init.Sof_enable = 1;
 80027d6:	e9c0 2206 	strd	r2, r2, [r0, #24]
  hpcd.Init.vbus_sensing_enable = 1;
 80027da:	62c2      	str	r2, [r0, #44]	; 0x2c
  
  /* Initialize LL Driver */
  HAL_PCD_Init(&hpcd);
 80027dc:	f001 f9c5 	bl	8003b6a <HAL_PCD_Init>
  max_tx_ep_num = USB_AUDIO_CONFIG_RECORD_EP_IN&0x7F;  
 }
 tx_fifo_size[USB_AUDIO_CONFIG_RECORD_EP_IN&0x7F] = (USBD_AUDIO_CONFIG_RECORD_MAX_PACKET_SIZE + 3U)/4;
#endif /* USE_USB_AUDIO_RECORDING */
 
  tx_fifo_used_size = (USB_AUDIO_GetConfigDescriptor(0)+3)/4 ;
 80027e0:	4620      	mov	r0, r4
 80027e2:	f7fe fe29 	bl	8001438 <USB_AUDIO_GetConfigDescriptor>
 80027e6:	3003      	adds	r0, #3
 80027e8:	f3c0 048f 	ubfx	r4, r0, #2, #16
 {
   if(tx_fifo_size[i]<16)
   {
     tx_fifo_size[i] = 16;
   }
   tx_fifo_used_size += tx_fifo_size[i];
 80027ec:	f104 0110 	add.w	r1, r4, #16
 80027f0:	b289      	uxth	r1, r1
 }
 
 rx_fifo_size += (5*1/*number of control endpoints*/+8
                    +1/* for status information*/+2*8/*number of OUT endpoints*/+1/*for Global NAK*/);
 
  if(tx_fifo_used_size + rx_fifo_size<=USB_FIFO_WORD_SIZE)
 80027f2:	29f0      	cmp	r1, #240	; 0xf0
 80027f4:	d811      	bhi.n	800281a <USBD_LL_Init+0x6e>
  {
#if  USE_USB_AUDIO_RECORDING   
 tx_fifo_size[USB_AUDIO_CONFIG_RECORD_EP_IN&0x7F] += USB_FIFO_WORD_SIZE - (tx_fifo_used_size + rx_fifo_size);
#else /* USE_USB_AUDIO_RECORDING */
#if USE_USB_AUDIO_PLAYBACK
  rx_fifo_size = USB_FIFO_WORD_SIZE - tx_fifo_used_size;
 80027f6:	f5c1 71a0 	rsb	r1, r1, #320	; 0x140
 80027fa:	b289      	uxth	r1, r1
  {
     Error_Handler();
  }
  
  
 HAL_PCDEx_SetRxFiFo(&hpcd, rx_fifo_size);
 80027fc:	480a      	ldr	r0, [pc, #40]	; (8002828 <USBD_LL_Init+0x7c>)
 80027fe:	f001 fedd 	bl	80045bc <HAL_PCDEx_SetRxFiFo>
 for(int i = 0; i<= max_tx_ep_num; i++)
 {
   HAL_PCD_SetTxFiFo(&hpcd, i, tx_fifo_size[i]);
 8002802:	4622      	mov	r2, r4
 8002804:	2100      	movs	r1, #0
 8002806:	4808      	ldr	r0, [pc, #32]	; (8002828 <USBD_LL_Init+0x7c>)
 8002808:	f001 feb8 	bl	800457c <HAL_PCDEx_SetTxFiFo>
 800280c:	2210      	movs	r2, #16
 800280e:	2101      	movs	r1, #1
 8002810:	4805      	ldr	r0, [pc, #20]	; (8002828 <USBD_LL_Init+0x7c>)
 8002812:	f001 feb3 	bl	800457c <HAL_PCDEx_SetTxFiFo>
}
 8002816:	2000      	movs	r0, #0
 8002818:	bd10      	pop	{r4, pc}
     Error_Handler();
 800281a:	f7ff fe4d 	bl	80024b8 <Error_Handler>
 rx_fifo_size += (5*1/*number of control endpoints*/+8
 800281e:	2150      	movs	r1, #80	; 0x50
 8002820:	e7ec      	b.n	80027fc <USBD_LL_Init+0x50>
 8002822:	bf00      	nop
 8002824:	40040000 	.word	0x40040000
 8002828:	20000c0c 	.word	0x20000c0c

0800282c <USBD_LL_Start>:
{
 800282c:	b508      	push	{r3, lr}
  HAL_PCD_Start(pdev->pData);
 800282e:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8002832:	f001 fa0f 	bl	8003c54 <HAL_PCD_Start>
}
 8002836:	2000      	movs	r0, #0
 8002838:	bd08      	pop	{r3, pc}

0800283a <USBD_LL_OpenEP>:
{
 800283a:	b510      	push	{r4, lr}
 800283c:	4614      	mov	r4, r2
  HAL_PCD_EP_Open(pdev->pData,
 800283e:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
{
 8002842:	461a      	mov	r2, r3
  HAL_PCD_EP_Open(pdev->pData,
 8002844:	4623      	mov	r3, r4
 8002846:	f001 fd5f 	bl	8004308 <HAL_PCD_EP_Open>
}
 800284a:	2000      	movs	r0, #0
 800284c:	bd10      	pop	{r4, pc}
	...

08002850 <USBD_LL_CloseEP>:
{
 8002850:	b508      	push	{r3, lr}
  USB_DISABLE_EP_BEFORE_CLOSE(ep_addr);
 8002852:	060b      	lsls	r3, r1, #24
 8002854:	d50b      	bpl.n	800286e <USBD_LL_CloseEP+0x1e>
 8002856:	f001 027f 	and.w	r2, r1, #127	; 0x7f
 800285a:	4b08      	ldr	r3, [pc, #32]	; (800287c <USBD_LL_CloseEP+0x2c>)
 800285c:	4413      	add	r3, r2
 800285e:	015b      	lsls	r3, r3, #5
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	2a00      	cmp	r2, #0
 8002864:	da03      	bge.n	800286e <USBD_LL_CloseEP+0x1e>
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800286c:	601a      	str	r2, [r3, #0]
  HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800286e:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8002872:	f001 fd81 	bl	8004378 <HAL_PCD_EP_Close>
}
 8002876:	2000      	movs	r0, #0
 8002878:	bd08      	pop	{r3, pc}
 800287a:	bf00      	nop
 800287c:	02002048 	.word	0x02002048

08002880 <USBD_LL_FlushEP>:
{
 8002880:	b508      	push	{r3, lr}
  HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8002882:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8002886:	f001 fe60 	bl	800454a <HAL_PCD_EP_Flush>
}
 800288a:	2000      	movs	r0, #0
 800288c:	bd08      	pop	{r3, pc}

0800288e <USBD_LL_StallEP>:
{
 800288e:	b508      	push	{r3, lr}
  HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8002890:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8002894:	f001 fdeb 	bl	800446e <HAL_PCD_EP_SetStall>
}
 8002898:	2000      	movs	r0, #0
 800289a:	bd08      	pop	{r3, pc}

0800289c <USBD_LL_ClearStallEP>:
{
 800289c:	b508      	push	{r3, lr}
  HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800289e:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 80028a2:	f001 fe1c 	bl	80044de <HAL_PCD_EP_ClrStall>
}
 80028a6:	2000      	movs	r0, #0
 80028a8:	bd08      	pop	{r3, pc}

080028aa <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 80028aa:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80028ae:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
  if((ep_addr & 0x80) == 0x80)
 80028b2:	f04f 021c 	mov.w	r2, #28
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80028b6:	bf17      	itett	ne
 80028b8:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80028bc:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80028c0:	fb02 3101 	mlane	r1, r2, r1, r3
 80028c4:	f891 003e 	ldrbne.w	r0, [r1, #62]	; 0x3e
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80028c8:	bf08      	it	eq
 80028ca:	f891 01fe 	ldrbeq.w	r0, [r1, #510]	; 0x1fe
}
 80028ce:	4770      	bx	lr

080028d0 <USBD_LL_SetUSBAddress>:
{
 80028d0:	b508      	push	{r3, lr}
  HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80028d2:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 80028d6:	f001 fd03 	bl	80042e0 <HAL_PCD_SetAddress>
}
 80028da:	2000      	movs	r0, #0
 80028dc:	bd08      	pop	{r3, pc}

080028de <USBD_LL_Transmit>:
{
 80028de:	b508      	push	{r3, lr}
  HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80028e0:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 80028e4:	f001 fda3 	bl	800442e <HAL_PCD_EP_Transmit>
}
 80028e8:	2000      	movs	r0, #0
 80028ea:	bd08      	pop	{r3, pc}

080028ec <USBD_LL_PrepareReceive>:
{
 80028ec:	b508      	push	{r3, lr}
  HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80028ee:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 80028f2:	f001 fd70 	bl	80043d6 <HAL_PCD_EP_Receive>
}
 80028f6:	2000      	movs	r0, #0
 80028f8:	bd08      	pop	{r3, pc}

080028fa <USBD_LL_GetRxDataSize>:
{
 80028fa:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount(pdev->pData, ep_addr);
 80028fc:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8002900:	f001 fd8d 	bl	800441e <HAL_PCD_EP_GetRxCount>
}
 8002904:	bd08      	pop	{r3, pc}
	...

08002908 <USBD_AUDIO_DeviceDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_AUDIO_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_DeviceDesc);
 8002908:	2312      	movs	r3, #18
  return (uint8_t*)USBD_DeviceDesc;
}
 800290a:	4801      	ldr	r0, [pc, #4]	; (8002910 <USBD_AUDIO_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_DeviceDesc);
 800290c:	800b      	strh	r3, [r1, #0]
}
 800290e:	4770      	bx	lr
 8002910:	20000108 	.word	0x20000108

08002914 <USBD_AUDIO_LangIDStrDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_AUDIO_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);  
 8002914:	2304      	movs	r3, #4
  return (uint8_t*)USBD_LangIDDesc;
}
 8002916:	4801      	ldr	r0, [pc, #4]	; (800291c <USBD_AUDIO_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);  
 8002918:	800b      	strh	r3, [r1, #0]
}
 800291a:	4770      	bx	lr
 800291c:	2000011c 	.word	0x2000011c

08002920 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
 8002920:	2300      	movs	r3, #0
 8002922:	b570      	push	{r4, r5, r6, lr}
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8002924:	1c4d      	adds	r5, r1, #1
 8002926:	461e      	mov	r6, r3
    if( ((value >> 28)) < 0xA )
 8002928:	0f04      	lsrs	r4, r0, #28
 800292a:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
    value = value << 4;
 800292e:	ea4f 1000 	mov.w	r0, r0, lsl #4
      pbuf[ 2* idx] = (value >> 28) + '0';
 8002932:	bf34      	ite	cc
 8002934:	3430      	addcc	r4, #48	; 0x30
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 8002936:	3437      	addcs	r4, #55	; 0x37
 8002938:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[ 2* idx + 1] = 0;
 800293c:	f805 6013 	strb.w	r6, [r5, r3, lsl #1]
  for( idx = 0; idx < len; idx ++)
 8002940:	3301      	adds	r3, #1
 8002942:	b2dc      	uxtb	r4, r3
 8002944:	42a2      	cmp	r2, r4
 8002946:	d8ef      	bhi.n	8002928 <IntToUnicode+0x8>
  }
}
 8002948:	bd70      	pop	{r4, r5, r6, pc}
	...

0800294c <USBD_AUDIO_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 800294c:	231a      	movs	r3, #26
{
 800294e:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8002950:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t*)DEVICE_ID1;
 8002952:	4b09      	ldr	r3, [pc, #36]	; (8002978 <USBD_AUDIO_SerialStrDescriptor+0x2c>)
 8002954:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t*)DEVICE_ID3;
 8002956:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 8002958:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 800295a:	18c0      	adds	r0, r0, r3
 800295c:	d00a      	beq.n	8002974 <USBD_AUDIO_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t*)DEVICE_ID2;
 800295e:	4b07      	ldr	r3, [pc, #28]	; (800297c <USBD_AUDIO_SerialStrDescriptor+0x30>)
    IntToUnicode (deviceserial0, (uint8_t*)&USBD_StringSerial[2] ,8);
 8002960:	2208      	movs	r2, #8
 8002962:	4907      	ldr	r1, [pc, #28]	; (8002980 <USBD_AUDIO_SerialStrDescriptor+0x34>)
  deviceserial1 = *(uint32_t*)DEVICE_ID2;
 8002964:	681c      	ldr	r4, [r3, #0]
    IntToUnicode (deviceserial0, (uint8_t*)&USBD_StringSerial[2] ,8);
 8002966:	f7ff ffdb 	bl	8002920 <IntToUnicode>
    IntToUnicode (deviceserial1, (uint8_t*)&USBD_StringSerial[18] ,4);
 800296a:	2204      	movs	r2, #4
 800296c:	4905      	ldr	r1, [pc, #20]	; (8002984 <USBD_AUDIO_SerialStrDescriptor+0x38>)
 800296e:	4620      	mov	r0, r4
 8002970:	f7ff ffd6 	bl	8002920 <IntToUnicode>
}
 8002974:	4804      	ldr	r0, [pc, #16]	; (8002988 <USBD_AUDIO_SerialStrDescriptor+0x3c>)
 8002976:	bd10      	pop	{r4, pc}
 8002978:	1fff7a10 	.word	0x1fff7a10
 800297c:	1fff7a14 	.word	0x1fff7a14
 8002980:	20000122 	.word	0x20000122
 8002984:	20000132 	.word	0x20000132
 8002988:	20000120 	.word	0x20000120

0800298c <USBD_AUDIO_ManufacturerStrDescriptor>:
{
 800298c:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800298e:	4c04      	ldr	r4, [pc, #16]	; (80029a0 <USBD_AUDIO_ManufacturerStrDescriptor+0x14>)
{
 8002990:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8002992:	4804      	ldr	r0, [pc, #16]	; (80029a4 <USBD_AUDIO_ManufacturerStrDescriptor+0x18>)
 8002994:	4621      	mov	r1, r4
 8002996:	f003 fca4 	bl	80062e2 <USBD_GetString>
}
 800299a:	4620      	mov	r0, r4
 800299c:	bd10      	pop	{r4, pc}
 800299e:	bf00      	nop
 80029a0:	2000100c 	.word	0x2000100c
 80029a4:	08006614 	.word	0x08006614

080029a8 <USBD_AUDIO_ProductStrDescriptor>:
{
 80029a8:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_HS_STRING, USBD_StrDesc, length);
 80029aa:	4905      	ldr	r1, [pc, #20]	; (80029c0 <USBD_AUDIO_ProductStrDescriptor+0x18>)
{
 80029ac:	b508      	push	{r3, lr}
  if(speed == USBD_SPEED_HIGH)
 80029ae:	b920      	cbnz	r0, 80029ba <USBD_AUDIO_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_HS_STRING, USBD_StrDesc, length);
 80029b0:	4804      	ldr	r0, [pc, #16]	; (80029c4 <USBD_AUDIO_ProductStrDescriptor+0x1c>)
    USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);    
 80029b2:	f003 fc96 	bl	80062e2 <USBD_GetString>
}
 80029b6:	4802      	ldr	r0, [pc, #8]	; (80029c0 <USBD_AUDIO_ProductStrDescriptor+0x18>)
 80029b8:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);    
 80029ba:	4803      	ldr	r0, [pc, #12]	; (80029c8 <USBD_AUDIO_ProductStrDescriptor+0x20>)
 80029bc:	e7f9      	b.n	80029b2 <USBD_AUDIO_ProductStrDescriptor+0xa>
 80029be:	bf00      	nop
 80029c0:	2000100c 	.word	0x2000100c
 80029c4:	08006627 	.word	0x08006627
 80029c8:	08006648 	.word	0x08006648

080029cc <USBD_AUDIO_ConfigStrDescriptor>:
{
 80029cc:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_HS_STRING, USBD_StrDesc, length);
 80029ce:	4c04      	ldr	r4, [pc, #16]	; (80029e0 <USBD_AUDIO_ConfigStrDescriptor+0x14>)
{
 80029d0:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_HS_STRING, USBD_StrDesc, length);
 80029d2:	4804      	ldr	r0, [pc, #16]	; (80029e4 <USBD_AUDIO_ConfigStrDescriptor+0x18>)
 80029d4:	4621      	mov	r1, r4
 80029d6:	f003 fc84 	bl	80062e2 <USBD_GetString>
}
 80029da:	4620      	mov	r0, r4
 80029dc:	bd10      	pop	{r4, pc}
 80029de:	bf00      	nop
 80029e0:	2000100c 	.word	0x2000100c
 80029e4:	08006669 	.word	0x08006669

080029e8 <USBD_AUDIO_InterfaceStrDescriptor>:
{
 80029e8:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_HS_STRING, USBD_StrDesc, length);
 80029ea:	4c04      	ldr	r4, [pc, #16]	; (80029fc <USBD_AUDIO_InterfaceStrDescriptor+0x14>)
{
 80029ec:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_HS_STRING, USBD_StrDesc, length);
 80029ee:	4804      	ldr	r0, [pc, #16]	; (8002a00 <USBD_AUDIO_InterfaceStrDescriptor+0x18>)
 80029f0:	4621      	mov	r1, r4
 80029f2:	f003 fc76 	bl	80062e2 <USBD_GetString>
}
 80029f6:	4620      	mov	r0, r4
 80029f8:	bd10      	pop	{r4, pc}
 80029fa:	bf00      	nop
 80029fc:	2000100c 	.word	0x2000100c
 8002a00:	08006676 	.word	0x08006676

08002a04 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002a04:	b570      	push	{r4, r5, r6, lr}
 8002a06:	b08a      	sub	sp, #40	; 0x28
 8002a08:	4605      	mov	r5, r0
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8002a0a:	f001 f8ab 	bl	8003b64 <HAL_I2C_GetState>
 8002a0e:	2800      	cmp	r0, #0
 8002a10:	d160      	bne.n	8002ad4 <I2Cx_Init+0xd0>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002a12:	4b50      	ldr	r3, [pc, #320]	; (8002b54 <I2Cx_Init+0x150>)
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
    i2c_handler->Init.OwnAddress1      = 0;
 8002a14:	2600      	movs	r6, #0
 8002a16:	4c50      	ldr	r4, [pc, #320]	; (8002b58 <I2Cx_Init+0x154>)
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002a18:	429d      	cmp	r5, r3
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
    i2c_handler->Init.OwnAddress2      = 0;
 8002a1a:	616e      	str	r6, [r5, #20]
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8002a1c:	bf0c      	ite	eq
 8002a1e:	4a4f      	ldreq	r2, [pc, #316]	; (8002b5c <I2Cx_Init+0x158>)
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8002a20:	4a4f      	ldrne	r2, [pc, #316]	; (8002b60 <I2Cx_Init+0x15c>)
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002a22:	429d      	cmp	r5, r3
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8002a24:	602a      	str	r2, [r5, #0]
    i2c_handler->Init.OwnAddress1      = 0;
 8002a26:	4a4f      	ldr	r2, [pc, #316]	; (8002b64 <I2Cx_Init+0x160>)
 8002a28:	e9c5 2601 	strd	r2, r6, [r5, #4]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002a2c:	f04f 0201 	mov.w	r2, #1
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002a30:	e9c5 6607 	strd	r6, r6, [r5, #28]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002a34:	e9c5 2603 	strd	r2, r6, [r5, #12]
  DISCOVERY_AUDIO_I2Cx_SCL_GPIO_CLK_ENABLE();
 8002a38:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002a3a:	d14d      	bne.n	8002ad8 <I2Cx_Init+0xd4>
  DISCOVERY_AUDIO_I2Cx_SCL_GPIO_CLK_ENABLE();
 8002a3c:	f043 0308 	orr.w	r3, r3, #8
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002a40:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_AF;
 8002a44:	f04f 0c02 	mov.w	ip, #2
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_GPIO_PORT, &gpio_init_structure);
 8002a48:	a905      	add	r1, sp, #20
  DISCOVERY_AUDIO_I2Cx_SCL_GPIO_CLK_ENABLE();
 8002a4a:	6323      	str	r3, [r4, #48]	; 0x30
 8002a4c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002a4e:	f003 0308 	and.w	r3, r3, #8
 8002a52:	9300      	str	r3, [sp, #0]
 8002a54:	9b00      	ldr	r3, [sp, #0]
  DISCOVERY_AUDIO_I2Cx_SDA_GPIO_CLK_ENABLE();
 8002a56:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002a58:	f043 0302 	orr.w	r3, r3, #2
 8002a5c:	6323      	str	r3, [r4, #48]	; 0x30
 8002a5e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  gpio_init_structure.Pull = GPIO_NOPULL;
 8002a60:	9607      	str	r6, [sp, #28]
  DISCOVERY_AUDIO_I2Cx_SDA_GPIO_CLK_ENABLE();
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	9301      	str	r3, [sp, #4]
 8002a68:	9b01      	ldr	r3, [sp, #4]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002a6a:	2312      	movs	r3, #18
 8002a6c:	e9cd 0305 	strd	r0, r3, [sp, #20]
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_AF;
 8002a70:	2304      	movs	r3, #4
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_GPIO_PORT, &gpio_init_structure);
 8002a72:	483d      	ldr	r0, [pc, #244]	; (8002b68 <I2Cx_Init+0x164>)
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_AF;
 8002a74:	e9cd c308 	strd	ip, r3, [sp, #32]
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_GPIO_PORT, &gpio_init_structure);
 8002a78:	f000 fbb6 	bl	80031e8 <HAL_GPIO_Init>
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8002a7c:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SDA_GPIO_PORT, &gpio_init_structure);
 8002a7e:	a905      	add	r1, sp, #20
 8002a80:	483a      	ldr	r0, [pc, #232]	; (8002b6c <I2Cx_Init+0x168>)
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8002a82:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SDA_AF;
 8002a84:	230b      	movs	r3, #11
 8002a86:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SDA_GPIO_PORT, &gpio_init_structure);
 8002a88:	f000 fbae 	bl	80031e8 <HAL_GPIO_Init>
  DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8002a8c:	6c23      	ldr	r3, [r4, #64]	; 0x40
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8002a8e:	4632      	mov	r2, r6
 8002a90:	210f      	movs	r1, #15
 8002a92:	205f      	movs	r0, #95	; 0x5f
  DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8002a94:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a98:	6423      	str	r3, [r4, #64]	; 0x40
 8002a9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002a9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002aa0:	9302      	str	r3, [sp, #8]
 8002aa2:	9b02      	ldr	r3, [sp, #8]
  DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8002aa4:	6a23      	ldr	r3, [r4, #32]
 8002aa6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002aaa:	6223      	str	r3, [r4, #32]
  DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8002aac:	6a23      	ldr	r3, [r4, #32]
 8002aae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ab2:	6223      	str	r3, [r4, #32]
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8002ab4:	f000 f92e 	bl	8002d14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8002ab8:	205f      	movs	r0, #95	; 0x5f
 8002aba:	f000 f95d 	bl	8002d78 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8002abe:	2060      	movs	r0, #96	; 0x60
 8002ac0:	4632      	mov	r2, r6
 8002ac2:	210f      	movs	r1, #15
 8002ac4:	f000 f926 	bl	8002d14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);    
 8002ac8:	2060      	movs	r0, #96	; 0x60
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8002aca:	f000 f955 	bl	8002d78 <HAL_NVIC_EnableIRQ>

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
    HAL_I2C_Init(i2c_handler);
 8002ace:	4628      	mov	r0, r5
 8002ad0:	f000 fe66 	bl	80037a0 <HAL_I2C_Init>
  }
}
 8002ad4:	b00a      	add	sp, #40	; 0x28
 8002ad6:	bd70      	pop	{r4, r5, r6, pc}
  DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002ad8:	f043 0302 	orr.w	r3, r3, #2
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002adc:	f44f 7280 	mov.w	r2, #256	; 0x100
  gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8002ae0:	2102      	movs	r1, #2
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002ae2:	4822      	ldr	r0, [pc, #136]	; (8002b6c <I2Cx_Init+0x168>)
  DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002ae4:	6323      	str	r3, [r4, #48]	; 0x30
 8002ae6:	6b23      	ldr	r3, [r4, #48]	; 0x30
  gpio_init_structure.Pull = GPIO_NOPULL;
 8002ae8:	9607      	str	r6, [sp, #28]
  DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	9303      	str	r3, [sp, #12]
 8002af0:	9b03      	ldr	r3, [sp, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002af2:	2312      	movs	r3, #18
 8002af4:	e9cd 2305 	strd	r2, r3, [sp, #20]
  gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8002af8:	2304      	movs	r3, #4
 8002afa:	e9cd 1308 	strd	r1, r3, [sp, #32]
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002afe:	a905      	add	r1, sp, #20
 8002b00:	f000 fb72 	bl	80031e8 <HAL_GPIO_Init>
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8002b04:	f44f 7300 	mov.w	r3, #512	; 0x200
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002b08:	a905      	add	r1, sp, #20
 8002b0a:	4818      	ldr	r0, [pc, #96]	; (8002b6c <I2Cx_Init+0x168>)
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8002b0c:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002b0e:	f000 fb6b 	bl	80031e8 <HAL_GPIO_Init>
  DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8002b12:	6c23      	ldr	r3, [r4, #64]	; 0x40
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8002b14:	4632      	mov	r2, r6
 8002b16:	210f      	movs	r1, #15
 8002b18:	201f      	movs	r0, #31
  DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8002b1a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b1e:	6423      	str	r3, [r4, #64]	; 0x40
 8002b20:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002b22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b26:	9304      	str	r3, [sp, #16]
 8002b28:	9b04      	ldr	r3, [sp, #16]
  DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8002b2a:	6a23      	ldr	r3, [r4, #32]
 8002b2c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b30:	6223      	str	r3, [r4, #32]
  DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8002b32:	6a23      	ldr	r3, [r4, #32]
 8002b34:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002b38:	6223      	str	r3, [r4, #32]
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8002b3a:	f000 f8eb 	bl	8002d14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8002b3e:	201f      	movs	r0, #31
 8002b40:	f000 f91a 	bl	8002d78 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8002b44:	2020      	movs	r0, #32
 8002b46:	4632      	mov	r2, r6
 8002b48:	210f      	movs	r1, #15
 8002b4a:	f000 f8e3 	bl	8002d14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8002b4e:	2020      	movs	r0, #32
 8002b50:	e7bb      	b.n	8002aca <I2Cx_Init+0xc6>
 8002b52:	bf00      	nop
 8002b54:	200003ec 	.word	0x200003ec
 8002b58:	40023800 	.word	0x40023800
 8002b5c:	40006000 	.word	0x40006000
 8002b60:	40005400 	.word	0x40005400
 8002b64:	40912732 	.word	0x40912732
 8002b68:	40020c00 	.word	0x40020c00
 8002b6c:	40020400 	.word	0x40020400

08002b70 <I2Cx_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002b70:	b530      	push	{r4, r5, lr}
  HAL_StatusTypeDef status = HAL_OK;

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002b72:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
{
 8002b76:	b085      	sub	sp, #20
 8002b78:	4605      	mov	r5, r0
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002b7a:	9402      	str	r4, [sp, #8]
 8002b7c:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8002b80:	9401      	str	r4, [sp, #4]
 8002b82:	9c08      	ldr	r4, [sp, #32]
 8002b84:	9400      	str	r4, [sp, #0]
 8002b86:	f000 ff2f 	bl	80039e8 <HAL_I2C_Mem_Read>

  /* Check the communication status */
  if(status != HAL_OK)
 8002b8a:	4604      	mov	r4, r0
 8002b8c:	b128      	cbz	r0, 8002b9a <I2Cx_ReadMultiple+0x2a>
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002b8e:	4628      	mov	r0, r5
 8002b90:	f000 fe58 	bl	8003844 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8002b94:	4628      	mov	r0, r5
 8002b96:	f7ff ff35 	bl	8002a04 <I2Cx_Init>
}
 8002b9a:	4620      	mov	r0, r4
 8002b9c:	b005      	add	sp, #20
 8002b9e:	bd30      	pop	{r4, r5, pc}

08002ba0 <I2Cx_WriteMultiple>:
{
 8002ba0:	b530      	push	{r4, r5, lr}
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002ba2:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
{
 8002ba6:	b085      	sub	sp, #20
 8002ba8:	4605      	mov	r5, r0
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002baa:	9402      	str	r4, [sp, #8]
 8002bac:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8002bb0:	9401      	str	r4, [sp, #4]
 8002bb2:	9c08      	ldr	r4, [sp, #32]
 8002bb4:	9400      	str	r4, [sp, #0]
 8002bb6:	f000 fe5e 	bl	8003876 <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 8002bba:	4604      	mov	r4, r0
 8002bbc:	b128      	cbz	r0, 8002bca <I2Cx_WriteMultiple+0x2a>
  HAL_I2C_DeInit(i2c_handler);
 8002bbe:	4628      	mov	r0, r5
 8002bc0:	f000 fe40 	bl	8003844 <HAL_I2C_DeInit>
  I2Cx_Init(i2c_handler);
 8002bc4:	4628      	mov	r0, r5
 8002bc6:	f7ff ff1d 	bl	8002a04 <I2Cx_Init>
}
 8002bca:	4620      	mov	r0, r4
 8002bcc:	b005      	add	sp, #20
 8002bce:	bd30      	pop	{r4, r5, pc}

08002bd0 <AUDIO_IO_Init>:
/**
  * @brief  Initializes Audio low level.
  */
void AUDIO_IO_Init(void)
{
  I2Cx_Init(&hI2cAudioHandler);
 8002bd0:	4801      	ldr	r0, [pc, #4]	; (8002bd8 <AUDIO_IO_Init+0x8>)
 8002bd2:	f7ff bf17 	b.w	8002a04 <I2Cx_Init>
 8002bd6:	bf00      	nop
 8002bd8:	200003ec 	.word	0x200003ec

08002bdc <AUDIO_IO_DeInit>:
  * @brief  DeInitializes Audio low level.
  */
void AUDIO_IO_DeInit(void)
{

}
 8002bdc:	4770      	bx	lr
	...

08002be0 <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8002be0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint16_t tmp = Value;
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 8002be2:	ba52      	rev16	r2, r2
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 8002be4:	2302      	movs	r3, #2
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 8002be6:	f8ad 200e 	strh.w	r2, [sp, #14]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 8002bea:	f10d 020e 	add.w	r2, sp, #14
 8002bee:	9301      	str	r3, [sp, #4]
 8002bf0:	9200      	str	r2, [sp, #0]
 8002bf2:	460a      	mov	r2, r1
 8002bf4:	4601      	mov	r1, r0
 8002bf6:	4803      	ldr	r0, [pc, #12]	; (8002c04 <AUDIO_IO_Write+0x24>)
 8002bf8:	f7ff ffd2 	bl	8002ba0 <I2Cx_WriteMultiple>
}
 8002bfc:	b005      	add	sp, #20
 8002bfe:	f85d fb04 	ldr.w	pc, [sp], #4
 8002c02:	bf00      	nop
 8002c04:	200003ec 	.word	0x200003ec

08002c08 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 8002c08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint16_t read_value = 0, tmp = 0;
 8002c0a:	2300      	movs	r3, #0
{
 8002c0c:	460a      	mov	r2, r1
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 8002c0e:	f10d 010e 	add.w	r1, sp, #14
  uint16_t read_value = 0, tmp = 0;
 8002c12:	f8ad 300e 	strh.w	r3, [sp, #14]
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 8002c16:	2302      	movs	r3, #2
 8002c18:	9100      	str	r1, [sp, #0]
 8002c1a:	4601      	mov	r1, r0
 8002c1c:	9301      	str	r3, [sp, #4]
 8002c1e:	4805      	ldr	r0, [pc, #20]	; (8002c34 <AUDIO_IO_Read+0x2c>)
 8002c20:	f7ff ffa6 	bl	8002b70 <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 8002c24:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8002c28:	ba40      	rev16	r0, r0
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
  
  read_value = tmp;
  
  return read_value;
}
 8002c2a:	b280      	uxth	r0, r0
 8002c2c:	b005      	add	sp, #20
 8002c2e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002c32:	bf00      	nop
 8002c34:	200003ec 	.word	0x200003ec

08002c38 <AUDIO_IO_Delay>:
  * @brief  AUDIO Codec delay
  * @param  Delay: Delay in ms
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 8002c38:	f000 b848 	b.w	8002ccc <HAL_Delay>

08002c3c <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8002c3c:	4770      	bx	lr
	...

08002c40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c40:	b570      	push	{r4, r5, r6, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c42:	4e0e      	ldr	r6, [pc, #56]	; (8002c7c <HAL_InitTick+0x3c>)
{
 8002c44:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c4a:	4a0d      	ldr	r2, [pc, #52]	; (8002c80 <HAL_InitTick+0x40>)
 8002c4c:	7830      	ldrb	r0, [r6, #0]
 8002c4e:	fbb3 f3f0 	udiv	r3, r3, r0
 8002c52:	6810      	ldr	r0, [r2, #0]
 8002c54:	fbb0 f0f3 	udiv	r0, r0, r3
 8002c58:	f000 f8b0 	bl	8002dbc <HAL_SYSTICK_Config>
 8002c5c:	4604      	mov	r4, r0
 8002c5e:	b950      	cbnz	r0, 8002c76 <HAL_InitTick+0x36>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c60:	2d0f      	cmp	r5, #15
 8002c62:	d808      	bhi.n	8002c76 <HAL_InitTick+0x36>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c64:	4602      	mov	r2, r0
 8002c66:	4629      	mov	r1, r5
 8002c68:	f04f 30ff 	mov.w	r0, #4294967295
 8002c6c:	f000 f852 	bl	8002d14 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c70:	4620      	mov	r0, r4
 8002c72:	6075      	str	r5, [r6, #4]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002c74:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002c76:	2001      	movs	r0, #1
 8002c78:	e7fc      	b.n	8002c74 <HAL_InitTick+0x34>
 8002c7a:	bf00      	nop
 8002c7c:	20000158 	.word	0x20000158
 8002c80:	20000104 	.word	0x20000104

08002c84 <HAL_Init>:
   __HAL_FLASH_ART_ENABLE();
 8002c84:	4a07      	ldr	r2, [pc, #28]	; (8002ca4 <HAL_Init+0x20>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c86:	2003      	movs	r0, #3
{
 8002c88:	b508      	push	{r3, lr}
   __HAL_FLASH_ART_ENABLE();
 8002c8a:	6813      	ldr	r3, [r2, #0]
 8002c8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c90:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c92:	f000 f82d 	bl	8002cf0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c96:	2000      	movs	r0, #0
 8002c98:	f7ff ffd2 	bl	8002c40 <HAL_InitTick>
  HAL_MspInit();
 8002c9c:	f7ff ffce 	bl	8002c3c <HAL_MspInit>
}
 8002ca0:	2000      	movs	r0, #0
 8002ca2:	bd08      	pop	{r3, pc}
 8002ca4:	40023c00 	.word	0x40023c00

08002ca8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002ca8:	4a03      	ldr	r2, [pc, #12]	; (8002cb8 <HAL_IncTick+0x10>)
 8002caa:	4b04      	ldr	r3, [pc, #16]	; (8002cbc <HAL_IncTick+0x14>)
 8002cac:	6811      	ldr	r1, [r2, #0]
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	440b      	add	r3, r1
 8002cb2:	6013      	str	r3, [r2, #0]
}
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	2000110c 	.word	0x2000110c
 8002cbc:	20000158 	.word	0x20000158

08002cc0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002cc0:	4b01      	ldr	r3, [pc, #4]	; (8002cc8 <HAL_GetTick+0x8>)
 8002cc2:	6818      	ldr	r0, [r3, #0]
}
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	2000110c 	.word	0x2000110c

08002ccc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ccc:	b538      	push	{r3, r4, r5, lr}
 8002cce:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002cd0:	f7ff fff6 	bl	8002cc0 <HAL_GetTick>
 8002cd4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cd6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8002cd8:	bf1e      	ittt	ne
 8002cda:	4b04      	ldrne	r3, [pc, #16]	; (8002cec <HAL_Delay+0x20>)
 8002cdc:	781b      	ldrbne	r3, [r3, #0]
 8002cde:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ce0:	f7ff ffee 	bl	8002cc0 <HAL_GetTick>
 8002ce4:	1b43      	subs	r3, r0, r5
 8002ce6:	42a3      	cmp	r3, r4
 8002ce8:	d3fa      	bcc.n	8002ce0 <HAL_Delay+0x14>
  {
  }
}
 8002cea:	bd38      	pop	{r3, r4, r5, pc}
 8002cec:	20000158 	.word	0x20000158

08002cf0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cf0:	4907      	ldr	r1, [pc, #28]	; (8002d10 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8002cf2:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cf4:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8002cf6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cfa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002cfe:	0412      	lsls	r2, r2, #16
 8002d00:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002d0c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002d0e:	4770      	bx	lr
 8002d10:	e000ed00 	.word	0xe000ed00

08002d14 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d14:	4b16      	ldr	r3, [pc, #88]	; (8002d70 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d16:	b530      	push	{r4, r5, lr}
 8002d18:	68dc      	ldr	r4, [r3, #12]
 8002d1a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d1e:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d22:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d24:	2d04      	cmp	r5, #4
 8002d26:	bf28      	it	cs
 8002d28:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d2a:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d2c:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d30:	bf8c      	ite	hi
 8002d32:	3c03      	subhi	r4, #3
 8002d34:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d36:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
 8002d3a:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d3c:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d40:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d44:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d48:	fa01 f104 	lsl.w	r1, r1, r4
 8002d4c:	ea41 0302 	orr.w	r3, r1, r2
 8002d50:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002d54:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8002d56:	db06      	blt.n	8002d66 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d58:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002d5c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002d60:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002d64:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d66:	f000 000f 	and.w	r0, r0, #15
 8002d6a:	4a02      	ldr	r2, [pc, #8]	; (8002d74 <HAL_NVIC_SetPriority+0x60>)
 8002d6c:	5413      	strb	r3, [r2, r0]
 8002d6e:	e7f9      	b.n	8002d64 <HAL_NVIC_SetPriority+0x50>
 8002d70:	e000ed00 	.word	0xe000ed00
 8002d74:	e000ed14 	.word	0xe000ed14

08002d78 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002d78:	2800      	cmp	r0, #0
 8002d7a:	db08      	blt.n	8002d8e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002d7c:	0942      	lsrs	r2, r0, #5
 8002d7e:	2301      	movs	r3, #1
 8002d80:	f000 001f 	and.w	r0, r0, #31
 8002d84:	fa03 f000 	lsl.w	r0, r3, r0
 8002d88:	4b01      	ldr	r3, [pc, #4]	; (8002d90 <HAL_NVIC_EnableIRQ+0x18>)
 8002d8a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002d8e:	4770      	bx	lr
 8002d90:	e000e100 	.word	0xe000e100

08002d94 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002d94:	2800      	cmp	r0, #0
 8002d96:	db0d      	blt.n	8002db4 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002d98:	0943      	lsrs	r3, r0, #5
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f000 001f 	and.w	r0, r0, #31
 8002da0:	3320      	adds	r3, #32
 8002da2:	fa02 f000 	lsl.w	r0, r2, r0
 8002da6:	4a04      	ldr	r2, [pc, #16]	; (8002db8 <HAL_NVIC_DisableIRQ+0x24>)
 8002da8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002dac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002db0:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	e000e100 	.word	0xe000e100

08002dbc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002dbc:	3801      	subs	r0, #1
 8002dbe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002dc2:	d20a      	bcs.n	8002dda <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dc4:	4b06      	ldr	r3, [pc, #24]	; (8002de0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dc6:	21f0      	movs	r1, #240	; 0xf0
 8002dc8:	4a06      	ldr	r2, [pc, #24]	; (8002de4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dca:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002dcc:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dce:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dd2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002dd4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dd8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002dda:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	e000e010 	.word	0xe000e010
 8002de4:	e000ed00 	.word	0xe000ed00

08002de8 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002de8:	6803      	ldr	r3, [r0, #0]
{
 8002dea:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002dec:	2018      	movs	r0, #24
 8002dee:	b2d9      	uxtb	r1, r3
 8002df0:	3910      	subs	r1, #16
 8002df2:	fbb1 f0f0 	udiv	r0, r1, r0
{
 8002df6:	b510      	push	{r4, lr}
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002df8:	4c05      	ldr	r4, [pc, #20]	; (8002e10 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8002dfa:	295f      	cmp	r1, #95	; 0x5f
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002dfc:	5c20      	ldrb	r0, [r4, r0]
 8002dfe:	65d0      	str	r0, [r2, #92]	; 0x5c
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e00:	f423 707f 	bic.w	r0, r3, #1020	; 0x3fc
 8002e04:	f020 0003 	bic.w	r0, r0, #3
 8002e08:	bf88      	it	hi
 8002e0a:	3004      	addhi	r0, #4
 8002e0c:	6590      	str	r0, [r2, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8002e0e:	bd10      	pop	{r4, pc}
 8002e10:	0800660c 	.word	0x0800660c

08002e14 <HAL_DMA_Init>:
{
 8002e14:	b570      	push	{r4, r5, r6, lr}
 8002e16:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002e18:	f7ff ff52 	bl	8002cc0 <HAL_GetTick>
 8002e1c:	4605      	mov	r5, r0
  if(hdma == NULL)
 8002e1e:	2c00      	cmp	r4, #0
 8002e20:	d073      	beq.n	8002f0a <HAL_DMA_Init+0xf6>
  __HAL_UNLOCK(hdma);
 8002e22:	2300      	movs	r3, #0
  __HAL_DMA_DISABLE(hdma);
 8002e24:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 8002e26:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8002e30:	6813      	ldr	r3, [r2, #0]
 8002e32:	f023 0301 	bic.w	r3, r3, #1
 8002e36:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e38:	6821      	ldr	r1, [r4, #0]
 8002e3a:	680b      	ldr	r3, [r1, #0]
 8002e3c:	07d8      	lsls	r0, r3, #31
 8002e3e:	d42f      	bmi.n	8002ea0 <HAL_DMA_Init+0x8c>
  tmp = hdma->Instance->CR;
 8002e40:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e42:	4d33      	ldr	r5, [pc, #204]	; (8002f10 <HAL_DMA_Init+0xfc>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e44:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e46:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e48:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	68e2      	ldr	r2, [r4, #12]
 8002e50:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e52:	6922      	ldr	r2, [r4, #16]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	6962      	ldr	r2, [r4, #20]
 8002e58:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e5a:	69e2      	ldr	r2, [r4, #28]
 8002e5c:	4303      	orrs	r3, r0
 8002e5e:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e60:	6a22      	ldr	r2, [r4, #32]
 8002e62:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e64:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002e66:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e68:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e6c:	bf02      	ittt	eq
 8002e6e:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 8002e72:	4335      	orreq	r5, r6
 8002e74:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e76:	2a04      	cmp	r2, #4
  hdma->Instance->CR = tmp;  
 8002e78:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8002e7a:	694b      	ldr	r3, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e7c:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8002e80:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e84:	d133      	bne.n	8002eee <HAL_DMA_Init+0xda>
    tmp |= hdma->Init.FIFOThreshold;
 8002e86:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e88:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8002e8a:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e8c:	b37d      	cbz	r5, 8002eee <HAL_DMA_Init+0xda>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e8e:	b990      	cbnz	r0, 8002eb6 <HAL_DMA_Init+0xa2>
  {
    switch (tmp)
 8002e90:	2a01      	cmp	r2, #1
 8002e92:	d021      	beq.n	8002ed8 <HAL_DMA_Init+0xc4>
 8002e94:	f032 0202 	bics.w	r2, r2, #2
 8002e98:	d129      	bne.n	8002eee <HAL_DMA_Init+0xda>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e9a:	01ea      	lsls	r2, r5, #7
 8002e9c:	d527      	bpl.n	8002eee <HAL_DMA_Init+0xda>
 8002e9e:	e01e      	b.n	8002ede <HAL_DMA_Init+0xca>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ea0:	f7ff ff0e 	bl	8002cc0 <HAL_GetTick>
 8002ea4:	1b40      	subs	r0, r0, r5
 8002ea6:	2805      	cmp	r0, #5
 8002ea8:	d9c6      	bls.n	8002e38 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002eaa:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002eac:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002eae:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8002eb0:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8002eb4:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002eb6:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8002eba:	d114      	bne.n	8002ee6 <HAL_DMA_Init+0xd2>
    switch (tmp)
 8002ebc:	2a03      	cmp	r2, #3
 8002ebe:	d816      	bhi.n	8002eee <HAL_DMA_Init+0xda>
 8002ec0:	a001      	add	r0, pc, #4	; (adr r0, 8002ec8 <HAL_DMA_Init+0xb4>)
 8002ec2:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8002ec6:	bf00      	nop
 8002ec8:	08002edf 	.word	0x08002edf
 8002ecc:	08002e9b 	.word	0x08002e9b
 8002ed0:	08002edf 	.word	0x08002edf
 8002ed4:	08002ed9 	.word	0x08002ed9
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ed8:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8002edc:	d107      	bne.n	8002eee <HAL_DMA_Init+0xda>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ede:	2340      	movs	r3, #64	; 0x40
        hdma->State = HAL_DMA_STATE_READY;
 8002ee0:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ee2:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8002ee4:	e7e4      	b.n	8002eb0 <HAL_DMA_Init+0x9c>
    switch (tmp)
 8002ee6:	2a02      	cmp	r2, #2
 8002ee8:	d9f9      	bls.n	8002ede <HAL_DMA_Init+0xca>
 8002eea:	2a03      	cmp	r2, #3
 8002eec:	d0d5      	beq.n	8002e9a <HAL_DMA_Init+0x86>
  hdma->Instance->FCR = tmp;
 8002eee:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ef0:	4620      	mov	r0, r4
 8002ef2:	f7ff ff79 	bl	8002de8 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ef6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002ef8:	233f      	movs	r3, #63	; 0x3f
 8002efa:	4093      	lsls	r3, r2
 8002efc:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002efe:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8002f00:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f02:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8002f04:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8002f08:	e7d4      	b.n	8002eb4 <HAL_DMA_Init+0xa0>
    return HAL_ERROR;
 8002f0a:	2001      	movs	r0, #1
 8002f0c:	e7d2      	b.n	8002eb4 <HAL_DMA_Init+0xa0>
 8002f0e:	bf00      	nop
 8002f10:	e010803f 	.word	0xe010803f

08002f14 <HAL_DMA_DeInit>:
{
 8002f14:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 8002f16:	4605      	mov	r5, r0
 8002f18:	b320      	cbz	r0, 8002f64 <HAL_DMA_DeInit+0x50>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002f1a:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	b2dc      	uxtb	r4, r3
 8002f22:	d01d      	beq.n	8002f60 <HAL_DMA_DeInit+0x4c>
  __HAL_DMA_DISABLE(hdma);
 8002f24:	6803      	ldr	r3, [r0, #0]
  hdma->Instance->CR   = 0U;
 8002f26:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	f022 0201 	bic.w	r2, r2, #1
 8002f2e:	601a      	str	r2, [r3, #0]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8002f30:	2221      	movs	r2, #33	; 0x21
  hdma->Instance->CR   = 0U;
 8002f32:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 8002f34:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 8002f36:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 8002f38:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 8002f3a:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8002f3c:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f3e:	f7ff ff53 	bl	8002de8 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f42:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8002f44:	233f      	movs	r3, #63	; 0x3f
 8002f46:	4093      	lsls	r3, r2
 8002f48:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f4a:	656c      	str	r4, [r5, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 8002f4c:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 8002f50:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
  hdma->XferHalfCpltCallback = NULL;
 8002f54:	e9c5 440f 	strd	r4, r4, [r5, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 8002f58:	e9c5 4411 	strd	r4, r4, [r5, #68]	; 0x44
  hdma->XferAbortCallback = NULL;  
 8002f5c:	e9c5 4413 	strd	r4, r4, [r5, #76]	; 0x4c
}
 8002f60:	4620      	mov	r0, r4
 8002f62:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002f64:	2401      	movs	r4, #1
 8002f66:	e7fb      	b.n	8002f60 <HAL_DMA_DeInit+0x4c>

08002f68 <HAL_DMA_Start_IT>:
{
 8002f68:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8002f6a:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f6e:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8002f70:	2c01      	cmp	r4, #1
 8002f72:	d034      	beq.n	8002fde <HAL_DMA_Start_IT+0x76>
 8002f74:	2401      	movs	r4, #1
 8002f76:	2500      	movs	r5, #0
 8002f78:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8002f7c:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8002f80:	2c01      	cmp	r4, #1
 8002f82:	f04f 0402 	mov.w	r4, #2
 8002f86:	d128      	bne.n	8002fda <HAL_DMA_Start_IT+0x72>
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f88:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002f8c:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f8e:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002f90:	6825      	ldr	r5, [r4, #0]
 8002f92:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8002f96:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8002f98:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f9a:	6883      	ldr	r3, [r0, #8]
 8002f9c:	2b40      	cmp	r3, #64	; 0x40
 8002f9e:	d119      	bne.n	8002fd4 <HAL_DMA_Start_IT+0x6c>
    hdma->Instance->PAR = DstAddress;
 8002fa0:	60a2      	str	r2, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 8002fa2:	60e1      	str	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fa4:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8002fa6:	233f      	movs	r3, #63	; 0x3f
 8002fa8:	4093      	lsls	r3, r2
 8002faa:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002fac:	6823      	ldr	r3, [r4, #0]
 8002fae:	f043 0316 	orr.w	r3, r3, #22
 8002fb2:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002fb4:	6963      	ldr	r3, [r4, #20]
 8002fb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fba:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8002fbc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002fbe:	b11b      	cbz	r3, 8002fc8 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 8002fc0:	6823      	ldr	r3, [r4, #0]
 8002fc2:	f043 0308 	orr.w	r3, r3, #8
 8002fc6:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8002fc8:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fca:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8002fcc:	f043 0301 	orr.w	r3, r3, #1
 8002fd0:	6023      	str	r3, [r4, #0]
}
 8002fd2:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->PAR = SrcAddress;
 8002fd4:	60a1      	str	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8002fd6:	60e2      	str	r2, [r4, #12]
 8002fd8:	e7e4      	b.n	8002fa4 <HAL_DMA_Start_IT+0x3c>
    __HAL_UNLOCK(hdma);	  
 8002fda:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 8002fde:	2002      	movs	r0, #2
 8002fe0:	e7f7      	b.n	8002fd2 <HAL_DMA_Start_IT+0x6a>

08002fe2 <HAL_DMA_Abort>:
{
 8002fe2:	b570      	push	{r4, r5, r6, lr}
 8002fe4:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fe6:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 8002fe8:	f7ff fe6a 	bl	8002cc0 <HAL_GetTick>
 8002fec:	4605      	mov	r5, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fee:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d006      	beq.n	8003004 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ff6:	2380      	movs	r3, #128	; 0x80
    return HAL_ERROR;
 8002ff8:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ffa:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8003002:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003004:	6823      	ldr	r3, [r4, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	f022 0216 	bic.w	r2, r2, #22
 800300c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800300e:	695a      	ldr	r2, [r3, #20]
 8003010:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003014:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003016:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003018:	b90a      	cbnz	r2, 800301e <HAL_DMA_Abort+0x3c>
 800301a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800301c:	b11a      	cbz	r2, 8003026 <HAL_DMA_Abort+0x44>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	f022 0208 	bic.w	r2, r2, #8
 8003024:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	f022 0201 	bic.w	r2, r2, #1
 800302c:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800302e:	6823      	ldr	r3, [r4, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f013 0301 	ands.w	r3, r3, #1
 8003036:	d10a      	bne.n	800304e <HAL_DMA_Abort+0x6c>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003038:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800303a:	223f      	movs	r2, #63	; 0x3f
  return HAL_OK;
 800303c:	4618      	mov	r0, r3
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800303e:	408a      	lsls	r2, r1
 8003040:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8003042:	2201      	movs	r2, #1
    __HAL_UNLOCK(hdma);
 8003044:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 8003048:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  return HAL_OK;
 800304c:	e7d9      	b.n	8003002 <HAL_DMA_Abort+0x20>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800304e:	f7ff fe37 	bl	8002cc0 <HAL_GetTick>
 8003052:	1b40      	subs	r0, r0, r5
 8003054:	2805      	cmp	r0, #5
 8003056:	d9ea      	bls.n	800302e <HAL_DMA_Abort+0x4c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003058:	2320      	movs	r3, #32
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800305a:	2003      	movs	r0, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800305c:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 800305e:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003060:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8003064:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 8003068:	e7cb      	b.n	8003002 <HAL_DMA_Abort+0x20>
	...

0800306c <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0;
 800306c:	2300      	movs	r3, #0
{
 800306e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0;
 8003070:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003072:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
 8003074:	4b5b      	ldr	r3, [pc, #364]	; (80031e4 <HAL_DMA_IRQHandler+0x178>)
{
 8003076:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003078:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600;
 800307a:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800307c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 800307e:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003080:	409a      	lsls	r2, r3
 8003082:	4232      	tst	r2, r6
 8003084:	d00c      	beq.n	80030a0 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003086:	6801      	ldr	r1, [r0, #0]
 8003088:	6808      	ldr	r0, [r1, #0]
 800308a:	0740      	lsls	r0, r0, #29
 800308c:	d508      	bpl.n	80030a0 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800308e:	6808      	ldr	r0, [r1, #0]
 8003090:	f020 0004 	bic.w	r0, r0, #4
 8003094:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003096:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003098:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800309a:	f042 0201 	orr.w	r2, r2, #1
 800309e:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80030a0:	2201      	movs	r2, #1
 80030a2:	409a      	lsls	r2, r3
 80030a4:	4232      	tst	r2, r6
 80030a6:	d008      	beq.n	80030ba <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80030a8:	6821      	ldr	r1, [r4, #0]
 80030aa:	6949      	ldr	r1, [r1, #20]
 80030ac:	0609      	lsls	r1, r1, #24
 80030ae:	d504      	bpl.n	80030ba <HAL_DMA_IRQHandler+0x4e>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80030b0:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80030b2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80030b4:	f042 0202 	orr.w	r2, r2, #2
 80030b8:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80030ba:	2204      	movs	r2, #4
 80030bc:	409a      	lsls	r2, r3
 80030be:	4232      	tst	r2, r6
 80030c0:	d008      	beq.n	80030d4 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80030c2:	6821      	ldr	r1, [r4, #0]
 80030c4:	6809      	ldr	r1, [r1, #0]
 80030c6:	0788      	lsls	r0, r1, #30
 80030c8:	d504      	bpl.n	80030d4 <HAL_DMA_IRQHandler+0x68>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80030ca:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80030cc:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80030ce:	f042 0204 	orr.w	r2, r2, #4
 80030d2:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80030d4:	2210      	movs	r2, #16
 80030d6:	409a      	lsls	r2, r3
 80030d8:	4232      	tst	r2, r6
 80030da:	d010      	beq.n	80030fe <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80030dc:	6823      	ldr	r3, [r4, #0]
 80030de:	6819      	ldr	r1, [r3, #0]
 80030e0:	0709      	lsls	r1, r1, #28
 80030e2:	d50c      	bpl.n	80030fe <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80030e4:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	0350      	lsls	r0, r2, #13
 80030ea:	d537      	bpl.n	800315c <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	0319      	lsls	r1, r3, #12
 80030f0:	d401      	bmi.n	80030f6 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 80030f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80030f4:	e000      	b.n	80030f8 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80030f6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 80030f8:	b10b      	cbz	r3, 80030fe <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 80030fa:	4620      	mov	r0, r4
 80030fc:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80030fe:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8003100:	2220      	movs	r2, #32
 8003102:	408a      	lsls	r2, r1
 8003104:	4232      	tst	r2, r6
 8003106:	d03a      	beq.n	800317e <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003108:	6823      	ldr	r3, [r4, #0]
 800310a:	6818      	ldr	r0, [r3, #0]
 800310c:	06c6      	lsls	r6, r0, #27
 800310e:	d536      	bpl.n	800317e <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003110:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003112:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8003116:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003118:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800311a:	d127      	bne.n	800316c <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800311c:	f022 0216 	bic.w	r2, r2, #22
 8003120:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003122:	695a      	ldr	r2, [r3, #20]
 8003124:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003128:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800312a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800312c:	b90a      	cbnz	r2, 8003132 <HAL_DMA_IRQHandler+0xc6>
 800312e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8003130:	b11a      	cbz	r2, 800313a <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	f022 0208 	bic.w	r2, r2, #8
 8003138:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800313a:	233f      	movs	r3, #63	; 0x3f
 800313c:	408b      	lsls	r3, r1
 800313e:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8003140:	2300      	movs	r3, #0
 8003142:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8003146:	2301      	movs	r3, #1
 8003148:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 800314c:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 800314e:	2b00      	cmp	r3, #0
 8003150:	d045      	beq.n	80031de <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 8003152:	4620      	mov	r0, r4
}
 8003154:	b003      	add	sp, #12
 8003156:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 800315a:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	05d2      	lsls	r2, r2, #23
 8003160:	d4c7      	bmi.n	80030f2 <HAL_DMA_IRQHandler+0x86>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	f022 0208 	bic.w	r2, r2, #8
 8003168:	601a      	str	r2, [r3, #0]
 800316a:	e7c2      	b.n	80030f2 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800316c:	0350      	lsls	r0, r2, #13
 800316e:	d527      	bpl.n	80031c0 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	0319      	lsls	r1, r3, #12
 8003174:	d431      	bmi.n	80031da <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 8003176:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8003178:	b10b      	cbz	r3, 800317e <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 800317a:	4620      	mov	r0, r4
 800317c:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800317e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003180:	b36b      	cbz	r3, 80031de <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003182:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003184:	07da      	lsls	r2, r3, #31
 8003186:	d519      	bpl.n	80031bc <HAL_DMA_IRQHandler+0x150>
  uint32_t timeout = SystemCoreClock / 9600;
 8003188:	f44f 5316 	mov.w	r3, #9600	; 0x2580
      __HAL_DMA_DISABLE(hdma);
 800318c:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 800318e:	fbb7 f7f3 	udiv	r7, r7, r3
      hdma->State = HAL_DMA_STATE_ABORT;
 8003192:	2305      	movs	r3, #5
 8003194:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8003198:	6813      	ldr	r3, [r2, #0]
 800319a:	f023 0301 	bic.w	r3, r3, #1
 800319e:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 80031a0:	9b01      	ldr	r3, [sp, #4]
 80031a2:	3301      	adds	r3, #1
 80031a4:	42bb      	cmp	r3, r7
 80031a6:	9301      	str	r3, [sp, #4]
 80031a8:	d802      	bhi.n	80031b0 <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80031aa:	6813      	ldr	r3, [r2, #0]
 80031ac:	07db      	lsls	r3, r3, #31
 80031ae:	d4f7      	bmi.n	80031a0 <HAL_DMA_IRQHandler+0x134>
      __HAL_UNLOCK(hdma);
 80031b0:	2300      	movs	r3, #0
 80031b2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80031b6:	2301      	movs	r3, #1
 80031b8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 80031bc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80031be:	e7c6      	b.n	800314e <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 80031c6:	d108      	bne.n	80031da <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80031c8:	6819      	ldr	r1, [r3, #0]
 80031ca:	f021 0110 	bic.w	r1, r1, #16
 80031ce:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80031d0:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 80031d2:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80031d6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 80031da:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80031dc:	e7cc      	b.n	8003178 <HAL_DMA_IRQHandler+0x10c>
}
 80031de:	b003      	add	sp, #12
 80031e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031e2:	bf00      	nop
 80031e4:	20000104 	.word	0x20000104

080031e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80031ec:	2300      	movs	r3, #0
{
 80031ee:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031f0:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 80033c4 <HAL_GPIO_Init+0x1dc>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031f4:	4a71      	ldr	r2, [pc, #452]	; (80033bc <HAL_GPIO_Init+0x1d4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80031f6:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 80033c8 <HAL_GPIO_Init+0x1e0>
    ioposition = ((uint32_t)0x01) << position;
 80031fa:	2701      	movs	r7, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031fc:	680c      	ldr	r4, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 80031fe:	409f      	lsls	r7, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003200:	ea07 0504 	and.w	r5, r7, r4
    if(iocurrent == ioposition)
 8003204:	ea37 0404 	bics.w	r4, r7, r4
 8003208:	f040 80be 	bne.w	8003388 <HAL_GPIO_Init+0x1a0>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800320c:	684c      	ldr	r4, [r1, #4]
 800320e:	f024 0a10 	bic.w	sl, r4, #16
 8003212:	f1ba 0f02 	cmp.w	sl, #2
 8003216:	d116      	bne.n	8003246 <HAL_GPIO_Init+0x5e>
        temp = GPIOx->AFR[position >> 3];
 8003218:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800321c:	f003 0b07 	and.w	fp, r3, #7
 8003220:	f04f 0c0f 	mov.w	ip, #15
 8003224:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8003228:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 800322c:	f8de 6020 	ldr.w	r6, [lr, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003230:	fa0c fc0b 	lsl.w	ip, ip, fp
 8003234:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003238:	690e      	ldr	r6, [r1, #16]
 800323a:	fa06 f60b 	lsl.w	r6, r6, fp
 800323e:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3] = temp;
 8003242:	f8ce 6020 	str.w	r6, [lr, #32]
      temp = GPIOx->MODER;
 8003246:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800324a:	f04f 0c03 	mov.w	ip, #3
      temp = GPIOx->MODER;
 800324e:	f8d0 b000 	ldr.w	fp, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003252:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003256:	fa0c fc0e 	lsl.w	ip, ip, lr
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800325a:	f1ba 0f01 	cmp.w	sl, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800325e:	ea6f 060c 	mvn.w	r6, ip
 8003262:	ea2b 0b0c 	bic.w	fp, fp, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003266:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800326a:	9601      	str	r6, [sp, #4]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800326c:	fa0c fc0e 	lsl.w	ip, ip, lr
 8003270:	ea4c 0c0b 	orr.w	ip, ip, fp
      GPIOx->MODER = temp;
 8003274:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003278:	d815      	bhi.n	80032a6 <HAL_GPIO_Init+0xbe>
        temp = GPIOx->OSPEEDR; 
 800327a:	f8d0 c008 	ldr.w	ip, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800327e:	ea06 0c0c 	and.w	ip, r6, ip
        temp |= (GPIO_Init->Speed << (position * 2));
 8003282:	68ce      	ldr	r6, [r1, #12]
 8003284:	fa06 fa0e 	lsl.w	sl, r6, lr
 8003288:	ea4a 0c0c 	orr.w	ip, sl, ip
        GPIOx->OSPEEDR = temp;
 800328c:	f8c0 c008 	str.w	ip, [r0, #8]
        temp = GPIOx->OTYPER;
 8003290:	f8d0 c004 	ldr.w	ip, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003294:	ea2c 0707 	bic.w	r7, ip, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003298:	f3c4 1c00 	ubfx	ip, r4, #4, #1
 800329c:	fa0c fc03 	lsl.w	ip, ip, r3
 80032a0:	ea4c 0707 	orr.w	r7, ip, r7
        GPIOx->OTYPER = temp;
 80032a4:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80032a6:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80032a8:	9e01      	ldr	r6, [sp, #4]
 80032aa:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80032ac:	688e      	ldr	r6, [r1, #8]
 80032ae:	fa06 f60e 	lsl.w	r6, r6, lr
 80032b2:	433e      	orrs	r6, r7
      GPIOx->PUPDR = temp;
 80032b4:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80032b6:	00e6      	lsls	r6, r4, #3
 80032b8:	d566      	bpl.n	8003388 <HAL_GPIO_Init+0x1a0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032ba:	f8d8 6044 	ldr.w	r6, [r8, #68]	; 0x44
 80032be:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80032c2:	f003 0c03 	and.w	ip, r3, #3
 80032c6:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032ca:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 80032ce:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80032d2:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032d6:	f8c8 6044 	str.w	r6, [r8, #68]	; 0x44
 80032da:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 80032de:	f8d8 6044 	ldr.w	r6, [r8, #68]	; 0x44
 80032e2:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 80032e6:	9603      	str	r6, [sp, #12]
 80032e8:	9e03      	ldr	r6, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80032ea:	fa0e f60c 	lsl.w	r6, lr, ip
        temp = SYSCFG->EXTICR[position >> 2];
 80032ee:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80032f2:	ea2a 0e06 	bic.w	lr, sl, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80032f6:	4e32      	ldr	r6, [pc, #200]	; (80033c0 <HAL_GPIO_Init+0x1d8>)
 80032f8:	42b0      	cmp	r0, r6
 80032fa:	d04c      	beq.n	8003396 <HAL_GPIO_Init+0x1ae>
 80032fc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003300:	42b0      	cmp	r0, r6
 8003302:	d04a      	beq.n	800339a <HAL_GPIO_Init+0x1b2>
 8003304:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003308:	42b0      	cmp	r0, r6
 800330a:	d048      	beq.n	800339e <HAL_GPIO_Init+0x1b6>
 800330c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003310:	42b0      	cmp	r0, r6
 8003312:	d046      	beq.n	80033a2 <HAL_GPIO_Init+0x1ba>
 8003314:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003318:	42b0      	cmp	r0, r6
 800331a:	d044      	beq.n	80033a6 <HAL_GPIO_Init+0x1be>
 800331c:	4548      	cmp	r0, r9
 800331e:	d044      	beq.n	80033aa <HAL_GPIO_Init+0x1c2>
 8003320:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8003324:	42b0      	cmp	r0, r6
 8003326:	d042      	beq.n	80033ae <HAL_GPIO_Init+0x1c6>
 8003328:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800332c:	42b0      	cmp	r0, r6
 800332e:	d040      	beq.n	80033b2 <HAL_GPIO_Init+0x1ca>
 8003330:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003334:	42b0      	cmp	r0, r6
 8003336:	d03e      	beq.n	80033b6 <HAL_GPIO_Init+0x1ce>
 8003338:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800333c:	42b0      	cmp	r0, r6
 800333e:	bf0c      	ite	eq
 8003340:	2609      	moveq	r6, #9
 8003342:	260a      	movne	r6, #10
 8003344:	fa06 f60c 	lsl.w	r6, r6, ip
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003348:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800334c:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8003350:	60be      	str	r6, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 8003352:	ea6f 0705 	mvn.w	r7, r5
        temp = EXTI->IMR;
 8003356:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8003358:	bf0c      	ite	eq
 800335a:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 800335c:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800335e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 8003362:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 8003364:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8003366:	bf0c      	ite	eq
 8003368:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 800336a:	432e      	orrne	r6, r5
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800336c:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 8003370:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 8003372:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8003374:	bf0c      	ite	eq
 8003376:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8003378:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800337a:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 800337c:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 800337e:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8003380:	bf54      	ite	pl
 8003382:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8003384:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 8003386:	60d6      	str	r6, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003388:	3301      	adds	r3, #1
 800338a:	2b10      	cmp	r3, #16
 800338c:	f47f af35 	bne.w	80031fa <HAL_GPIO_Init+0x12>
      }
    }
  }
}
 8003390:	b005      	add	sp, #20
 8003392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003396:	2600      	movs	r6, #0
 8003398:	e7d4      	b.n	8003344 <HAL_GPIO_Init+0x15c>
 800339a:	2601      	movs	r6, #1
 800339c:	e7d2      	b.n	8003344 <HAL_GPIO_Init+0x15c>
 800339e:	2602      	movs	r6, #2
 80033a0:	e7d0      	b.n	8003344 <HAL_GPIO_Init+0x15c>
 80033a2:	2603      	movs	r6, #3
 80033a4:	e7ce      	b.n	8003344 <HAL_GPIO_Init+0x15c>
 80033a6:	2604      	movs	r6, #4
 80033a8:	e7cc      	b.n	8003344 <HAL_GPIO_Init+0x15c>
 80033aa:	2605      	movs	r6, #5
 80033ac:	e7ca      	b.n	8003344 <HAL_GPIO_Init+0x15c>
 80033ae:	2606      	movs	r6, #6
 80033b0:	e7c8      	b.n	8003344 <HAL_GPIO_Init+0x15c>
 80033b2:	2607      	movs	r6, #7
 80033b4:	e7c6      	b.n	8003344 <HAL_GPIO_Init+0x15c>
 80033b6:	2608      	movs	r6, #8
 80033b8:	e7c4      	b.n	8003344 <HAL_GPIO_Init+0x15c>
 80033ba:	bf00      	nop
 80033bc:	40013c00 	.word	0x40013c00
 80033c0:	40020000 	.word	0x40020000
 80033c4:	40023800 	.word	0x40023800
 80033c8:	40021400 	.word	0x40021400

080033cc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80033cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80033d0:	2200      	movs	r2, #0
{
 80033d2:	468e      	mov	lr, r1
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));

      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80033d4:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8003500 <HAL_GPIO_DeInit+0x134>
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80033d8:	4947      	ldr	r1, [pc, #284]	; (80034f8 <HAL_GPIO_DeInit+0x12c>)
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80033da:	f8df a128 	ldr.w	sl, [pc, #296]	; 8003504 <HAL_GPIO_DeInit+0x138>
 80033de:	f8df b128 	ldr.w	fp, [pc, #296]	; 8003508 <HAL_GPIO_DeInit+0x13c>
    ioposition = ((uint32_t)0x01) << position;
 80033e2:	f04f 0801 	mov.w	r8, #1
 80033e6:	fa08 fc02 	lsl.w	ip, r8, r2
    if(iocurrent == ioposition)
 80033ea:	ea3c 030e 	bics.w	r3, ip, lr
 80033ee:	d16b      	bne.n	80034c8 <HAL_GPIO_DeInit+0xfc>
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80033f0:	2303      	movs	r3, #3
 80033f2:	fa02 f508 	lsl.w	r5, r2, r8
 80033f6:	6804      	ldr	r4, [r0, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80033f8:	f002 0607 	and.w	r6, r2, #7
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80033fc:	fa03 f505 	lsl.w	r5, r3, r5
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003400:	fa22 f703 	lsr.w	r7, r2, r3
 8003404:	00b6      	lsls	r6, r6, #2
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003406:	ea24 0405 	bic.w	r4, r4, r5
 800340a:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 800340e:	6004      	str	r4, [r0, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003410:	6a3c      	ldr	r4, [r7, #32]
 8003412:	4623      	mov	r3, r4
 8003414:	240f      	movs	r4, #15
 8003416:	fa04 f606 	lsl.w	r6, r4, r6
 800341a:	ea23 0606 	bic.w	r6, r3, r6
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800341e:	4b37      	ldr	r3, [pc, #220]	; (80034fc <HAL_GPIO_DeInit+0x130>)
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003420:	623e      	str	r6, [r7, #32]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8003422:	4298      	cmp	r0, r3
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003424:	6886      	ldr	r6, [r0, #8]
 8003426:	ea26 0605 	bic.w	r6, r6, r5
 800342a:	6086      	str	r6, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800342c:	ea6f 060c 	mvn.w	r6, ip
 8003430:	6847      	ldr	r7, [r0, #4]
 8003432:	ea27 070c 	bic.w	r7, r7, ip
 8003436:	6047      	str	r7, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003438:	68c7      	ldr	r7, [r0, #12]
 800343a:	ea27 0505 	bic.w	r5, r7, r5
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800343e:	f002 0703 	and.w	r7, r2, #3
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003442:	60c5      	str	r5, [r0, #12]
      tmp = SYSCFG->EXTICR[position >> 2];
 8003444:	f022 0503 	bic.w	r5, r2, #3
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003448:	ea4f 0787 	mov.w	r7, r7, lsl #2
 800344c:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8003450:	fa04 f407 	lsl.w	r4, r4, r7
 8003454:	f505 359c 	add.w	r5, r5, #79872	; 0x13800
      tmp = SYSCFG->EXTICR[position >> 2];
 8003458:	f8d5 c008 	ldr.w	ip, [r5, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800345c:	ea04 0c0c 	and.w	ip, r4, ip
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8003460:	d037      	beq.n	80034d2 <HAL_GPIO_DeInit+0x106>
 8003462:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003466:	4298      	cmp	r0, r3
 8003468:	d035      	beq.n	80034d6 <HAL_GPIO_DeInit+0x10a>
 800346a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800346e:	4298      	cmp	r0, r3
 8003470:	d033      	beq.n	80034da <HAL_GPIO_DeInit+0x10e>
 8003472:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003476:	4298      	cmp	r0, r3
 8003478:	d031      	beq.n	80034de <HAL_GPIO_DeInit+0x112>
 800347a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800347e:	4298      	cmp	r0, r3
 8003480:	d02f      	beq.n	80034e2 <HAL_GPIO_DeInit+0x116>
 8003482:	4548      	cmp	r0, r9
 8003484:	d02f      	beq.n	80034e6 <HAL_GPIO_DeInit+0x11a>
 8003486:	4550      	cmp	r0, sl
 8003488:	d02f      	beq.n	80034ea <HAL_GPIO_DeInit+0x11e>
 800348a:	4558      	cmp	r0, fp
 800348c:	d02f      	beq.n	80034ee <HAL_GPIO_DeInit+0x122>
 800348e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003492:	4298      	cmp	r0, r3
 8003494:	d02d      	beq.n	80034f2 <HAL_GPIO_DeInit+0x126>
 8003496:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800349a:	4298      	cmp	r0, r3
 800349c:	bf0c      	ite	eq
 800349e:	2309      	moveq	r3, #9
 80034a0:	230a      	movne	r3, #10
 80034a2:	40bb      	lsls	r3, r7
 80034a4:	4563      	cmp	r3, ip
 80034a6:	d10f      	bne.n	80034c8 <HAL_GPIO_DeInit+0xfc>
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80034a8:	68ab      	ldr	r3, [r5, #8]
 80034aa:	ea23 0404 	bic.w	r4, r3, r4
 80034ae:	60ac      	str	r4, [r5, #8]
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80034b0:	680b      	ldr	r3, [r1, #0]
 80034b2:	4033      	ands	r3, r6
 80034b4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80034b6:	684b      	ldr	r3, [r1, #4]
 80034b8:	4033      	ands	r3, r6
 80034ba:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80034bc:	688b      	ldr	r3, [r1, #8]
 80034be:	4033      	ands	r3, r6
 80034c0:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80034c2:	68cb      	ldr	r3, [r1, #12]
 80034c4:	401e      	ands	r6, r3
 80034c6:	60ce      	str	r6, [r1, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80034c8:	3201      	adds	r2, #1
 80034ca:	2a10      	cmp	r2, #16
 80034cc:	d189      	bne.n	80033e2 <HAL_GPIO_DeInit+0x16>
	  }
    }
  }
}
 80034ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80034d2:	2300      	movs	r3, #0
 80034d4:	e7e5      	b.n	80034a2 <HAL_GPIO_DeInit+0xd6>
 80034d6:	4643      	mov	r3, r8
 80034d8:	e7e3      	b.n	80034a2 <HAL_GPIO_DeInit+0xd6>
 80034da:	2302      	movs	r3, #2
 80034dc:	e7e1      	b.n	80034a2 <HAL_GPIO_DeInit+0xd6>
 80034de:	2303      	movs	r3, #3
 80034e0:	e7df      	b.n	80034a2 <HAL_GPIO_DeInit+0xd6>
 80034e2:	2304      	movs	r3, #4
 80034e4:	e7dd      	b.n	80034a2 <HAL_GPIO_DeInit+0xd6>
 80034e6:	2305      	movs	r3, #5
 80034e8:	e7db      	b.n	80034a2 <HAL_GPIO_DeInit+0xd6>
 80034ea:	2306      	movs	r3, #6
 80034ec:	e7d9      	b.n	80034a2 <HAL_GPIO_DeInit+0xd6>
 80034ee:	2307      	movs	r3, #7
 80034f0:	e7d7      	b.n	80034a2 <HAL_GPIO_DeInit+0xd6>
 80034f2:	2308      	movs	r3, #8
 80034f4:	e7d5      	b.n	80034a2 <HAL_GPIO_DeInit+0xd6>
 80034f6:	bf00      	nop
 80034f8:	40013c00 	.word	0x40013c00
 80034fc:	40020000 	.word	0x40020000
 8003500:	40021400 	.word	0x40021400
 8003504:	40021800 	.word	0x40021800
 8003508:	40021c00 	.word	0x40021c00

0800350c <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800350c:	6803      	ldr	r3, [r0, #0]
 800350e:	699a      	ldr	r2, [r3, #24]
 8003510:	0791      	lsls	r1, r2, #30
 8003512:	d501      	bpl.n	8003518 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003514:	2200      	movs	r2, #0
 8003516:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003518:	699a      	ldr	r2, [r3, #24]
 800351a:	07d2      	lsls	r2, r2, #31
 800351c:	d403      	bmi.n	8003526 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800351e:	699a      	ldr	r2, [r3, #24]
 8003520:	f042 0201 	orr.w	r2, r2, #1
 8003524:	619a      	str	r2, [r3, #24]
  }
}
 8003526:	4770      	bx	lr

08003528 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8003528:	b530      	push	{r4, r5, lr}
 800352a:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800352c:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8003530:	6804      	ldr	r4, [r0, #0]
 8003532:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
 8003536:	6860      	ldr	r0, [r4, #4]
 8003538:	431a      	orrs	r2, r3
 800353a:	4b04      	ldr	r3, [pc, #16]	; (800354c <I2C_TransferConfig+0x24>)
 800353c:	ea43 5355 	orr.w	r3, r3, r5, lsr #21
 8003540:	430a      	orrs	r2, r1
 8003542:	ea20 0003 	bic.w	r0, r0, r3
 8003546:	4302      	orrs	r2, r0
 8003548:	6062      	str	r2, [r4, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800354a:	bd30      	pop	{r4, r5, pc}
 800354c:	03ff63ff 	.word	0x03ff63ff

08003550 <I2C_WaitOnFlagUntilTimeout>:
{
 8003550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003554:	9f06      	ldr	r7, [sp, #24]
 8003556:	4604      	mov	r4, r0
 8003558:	4688      	mov	r8, r1
 800355a:	4616      	mov	r6, r2
 800355c:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800355e:	6822      	ldr	r2, [r4, #0]
 8003560:	6993      	ldr	r3, [r2, #24]
 8003562:	ea38 0303 	bics.w	r3, r8, r3
 8003566:	bf0c      	ite	eq
 8003568:	2301      	moveq	r3, #1
 800356a:	2300      	movne	r3, #0
 800356c:	42b3      	cmp	r3, r6
 800356e:	d001      	beq.n	8003574 <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 8003570:	2000      	movs	r0, #0
 8003572:	e00b      	b.n	800358c <I2C_WaitOnFlagUntilTimeout+0x3c>
    if (Timeout != HAL_MAX_DELAY)
 8003574:	1c6b      	adds	r3, r5, #1
 8003576:	d0f3      	beq.n	8003560 <I2C_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003578:	b955      	cbnz	r5, 8003590 <I2C_WaitOnFlagUntilTimeout+0x40>
        hi2c->State = HAL_I2C_STATE_READY;
 800357a:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 800357c:	2003      	movs	r0, #3
        hi2c->State = HAL_I2C_STATE_READY;
 800357e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003582:	2300      	movs	r3, #0
 8003584:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8003588:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800358c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003590:	f7ff fb96 	bl	8002cc0 <HAL_GetTick>
 8003594:	1bc0      	subs	r0, r0, r7
 8003596:	42a8      	cmp	r0, r5
 8003598:	d9e1      	bls.n	800355e <I2C_WaitOnFlagUntilTimeout+0xe>
 800359a:	e7ee      	b.n	800357a <I2C_WaitOnFlagUntilTimeout+0x2a>

0800359c <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800359c:	6803      	ldr	r3, [r0, #0]
{
 800359e:	b570      	push	{r4, r5, r6, lr}
 80035a0:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035a2:	6998      	ldr	r0, [r3, #24]
{
 80035a4:	460d      	mov	r5, r1
 80035a6:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035a8:	f010 0010 	ands.w	r0, r0, #16
 80035ac:	d112      	bne.n	80035d4 <I2C_IsAcknowledgeFailed+0x38>
}
 80035ae:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 80035b0:	1c69      	adds	r1, r5, #1
 80035b2:	d010      	beq.n	80035d6 <I2C_IsAcknowledgeFailed+0x3a>
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80035b4:	b125      	cbz	r5, 80035c0 <I2C_IsAcknowledgeFailed+0x24>
 80035b6:	f7ff fb83 	bl	8002cc0 <HAL_GetTick>
 80035ba:	1b80      	subs	r0, r0, r6
 80035bc:	4285      	cmp	r5, r0
 80035be:	d209      	bcs.n	80035d4 <I2C_IsAcknowledgeFailed+0x38>
          hi2c->State = HAL_I2C_STATE_READY;
 80035c0:	2320      	movs	r3, #32
          return HAL_TIMEOUT;
 80035c2:	2003      	movs	r0, #3
          hi2c->State = HAL_I2C_STATE_READY;
 80035c4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80035c8:	2300      	movs	r3, #0
 80035ca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 80035ce:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          return HAL_TIMEOUT;
 80035d2:	e7ec      	b.n	80035ae <I2C_IsAcknowledgeFailed+0x12>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035d4:	6823      	ldr	r3, [r4, #0]
 80035d6:	699a      	ldr	r2, [r3, #24]
 80035d8:	0692      	lsls	r2, r2, #26
 80035da:	d5e9      	bpl.n	80035b0 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035dc:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035de:	2520      	movs	r5, #32
    I2C_Flush_TXDR(hi2c);
 80035e0:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035e2:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035e4:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80035e6:	f7ff ff91 	bl	800350c <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80035ea:	6822      	ldr	r2, [r4, #0]
    return HAL_ERROR;
 80035ec:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 80035ee:	6853      	ldr	r3, [r2, #4]
 80035f0:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80035f4:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80035f8:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80035fc:	f023 0301 	bic.w	r3, r3, #1
 8003600:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003602:	2304      	movs	r3, #4
 8003604:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003606:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8003608:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800360c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003610:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    return HAL_ERROR;
 8003614:	e7cb      	b.n	80035ae <I2C_IsAcknowledgeFailed+0x12>

08003616 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8003616:	b570      	push	{r4, r5, r6, lr}
 8003618:	4604      	mov	r4, r0
 800361a:	460d      	mov	r5, r1
 800361c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800361e:	6823      	ldr	r3, [r4, #0]
 8003620:	699b      	ldr	r3, [r3, #24]
 8003622:	079b      	lsls	r3, r3, #30
 8003624:	d501      	bpl.n	800362a <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8003626:	2000      	movs	r0, #0
 8003628:	e015      	b.n	8003656 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800362a:	4632      	mov	r2, r6
 800362c:	4629      	mov	r1, r5
 800362e:	4620      	mov	r0, r4
 8003630:	f7ff ffb4 	bl	800359c <I2C_IsAcknowledgeFailed>
 8003634:	b9b0      	cbnz	r0, 8003664 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 8003636:	1c6a      	adds	r2, r5, #1
 8003638:	d0f1      	beq.n	800361e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800363a:	b96d      	cbnz	r5, 8003658 <I2C_WaitOnTXISFlagUntilTimeout+0x42>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800363c:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800363e:	2003      	movs	r0, #3
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003640:	f043 0320 	orr.w	r3, r3, #32
 8003644:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003646:	2320      	movs	r3, #32
 8003648:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800364c:	2300      	movs	r3, #0
 800364e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8003652:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8003656:	bd70      	pop	{r4, r5, r6, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003658:	f7ff fb32 	bl	8002cc0 <HAL_GetTick>
 800365c:	1b80      	subs	r0, r0, r6
 800365e:	42a8      	cmp	r0, r5
 8003660:	d9dd      	bls.n	800361e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
 8003662:	e7eb      	b.n	800363c <I2C_WaitOnTXISFlagUntilTimeout+0x26>
      return HAL_ERROR;
 8003664:	2001      	movs	r0, #1
 8003666:	e7f6      	b.n	8003656 <I2C_WaitOnTXISFlagUntilTimeout+0x40>

08003668 <I2C_RequestMemoryWrite>:
{
 8003668:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800366c:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800366e:	4b1a      	ldr	r3, [pc, #104]	; (80036d8 <I2C_RequestMemoryWrite+0x70>)
{
 8003670:	4604      	mov	r4, r0
 8003672:	4615      	mov	r5, r2
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003674:	9300      	str	r3, [sp, #0]
 8003676:	b2f2      	uxtb	r2, r6
 8003678:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
{
 800367c:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003680:	f7ff ff52 	bl	8003528 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003684:	4620      	mov	r0, r4
 8003686:	4642      	mov	r2, r8
 8003688:	4639      	mov	r1, r7
 800368a:	f7ff ffc4 	bl	8003616 <I2C_WaitOnTXISFlagUntilTimeout>
 800368e:	b140      	cbz	r0, 80036a2 <I2C_RequestMemoryWrite+0x3a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003690:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003692:	2b04      	cmp	r3, #4
 8003694:	d003      	beq.n	800369e <I2C_RequestMemoryWrite+0x36>
      return HAL_TIMEOUT;
 8003696:	2003      	movs	r0, #3
}
 8003698:	b002      	add	sp, #8
 800369a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_ERROR;
 800369e:	2001      	movs	r0, #1
 80036a0:	e7fa      	b.n	8003698 <I2C_RequestMemoryWrite+0x30>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80036a2:	2e01      	cmp	r6, #1
 80036a4:	6823      	ldr	r3, [r4, #0]
 80036a6:	d10c      	bne.n	80036c2 <I2C_RequestMemoryWrite+0x5a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80036a8:	b2ed      	uxtb	r5, r5
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80036aa:	2200      	movs	r2, #0
 80036ac:	2180      	movs	r1, #128	; 0x80
 80036ae:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80036b0:	629d      	str	r5, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80036b2:	463b      	mov	r3, r7
 80036b4:	f8cd 8000 	str.w	r8, [sp]
 80036b8:	f7ff ff4a 	bl	8003550 <I2C_WaitOnFlagUntilTimeout>
 80036bc:	2800      	cmp	r0, #0
 80036be:	d0eb      	beq.n	8003698 <I2C_RequestMemoryWrite+0x30>
 80036c0:	e7e9      	b.n	8003696 <I2C_RequestMemoryWrite+0x2e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80036c2:	0a2a      	lsrs	r2, r5, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036c4:	4639      	mov	r1, r7
 80036c6:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80036c8:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036ca:	4642      	mov	r2, r8
 80036cc:	f7ff ffa3 	bl	8003616 <I2C_WaitOnTXISFlagUntilTimeout>
 80036d0:	2800      	cmp	r0, #0
 80036d2:	d1dd      	bne.n	8003690 <I2C_RequestMemoryWrite+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80036d4:	6823      	ldr	r3, [r4, #0]
 80036d6:	e7e7      	b.n	80036a8 <I2C_RequestMemoryWrite+0x40>
 80036d8:	80002000 	.word	0x80002000

080036dc <I2C_RequestMemoryRead>:
{
 80036dc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80036e0:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80036e2:	4b1a      	ldr	r3, [pc, #104]	; (800374c <I2C_RequestMemoryRead+0x70>)
{
 80036e4:	4604      	mov	r4, r0
 80036e6:	4615      	mov	r5, r2
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80036e8:	9300      	str	r3, [sp, #0]
 80036ea:	b2f2      	uxtb	r2, r6
 80036ec:	2300      	movs	r3, #0
{
 80036ee:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80036f2:	f7ff ff19 	bl	8003528 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036f6:	4620      	mov	r0, r4
 80036f8:	4642      	mov	r2, r8
 80036fa:	4639      	mov	r1, r7
 80036fc:	f7ff ff8b 	bl	8003616 <I2C_WaitOnTXISFlagUntilTimeout>
 8003700:	b140      	cbz	r0, 8003714 <I2C_RequestMemoryRead+0x38>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003702:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003704:	2b04      	cmp	r3, #4
 8003706:	d003      	beq.n	8003710 <I2C_RequestMemoryRead+0x34>
      return HAL_TIMEOUT;
 8003708:	2003      	movs	r0, #3
}
 800370a:	b002      	add	sp, #8
 800370c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_ERROR;
 8003710:	2001      	movs	r0, #1
 8003712:	e7fa      	b.n	800370a <I2C_RequestMemoryRead+0x2e>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003714:	2e01      	cmp	r6, #1
 8003716:	6823      	ldr	r3, [r4, #0]
 8003718:	d10c      	bne.n	8003734 <I2C_RequestMemoryRead+0x58>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800371a:	b2ed      	uxtb	r5, r5
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800371c:	2200      	movs	r2, #0
 800371e:	2140      	movs	r1, #64	; 0x40
 8003720:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003722:	629d      	str	r5, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003724:	463b      	mov	r3, r7
 8003726:	f8cd 8000 	str.w	r8, [sp]
 800372a:	f7ff ff11 	bl	8003550 <I2C_WaitOnFlagUntilTimeout>
 800372e:	2800      	cmp	r0, #0
 8003730:	d0eb      	beq.n	800370a <I2C_RequestMemoryRead+0x2e>
 8003732:	e7e9      	b.n	8003708 <I2C_RequestMemoryRead+0x2c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003734:	0a2a      	lsrs	r2, r5, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003736:	4639      	mov	r1, r7
 8003738:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800373a:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800373c:	4642      	mov	r2, r8
 800373e:	f7ff ff6a 	bl	8003616 <I2C_WaitOnTXISFlagUntilTimeout>
 8003742:	2800      	cmp	r0, #0
 8003744:	d1dd      	bne.n	8003702 <I2C_RequestMemoryRead+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003746:	6823      	ldr	r3, [r4, #0]
 8003748:	e7e7      	b.n	800371a <I2C_RequestMemoryRead+0x3e>
 800374a:	bf00      	nop
 800374c:	80002000 	.word	0x80002000

08003750 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8003750:	b570      	push	{r4, r5, r6, lr}
 8003752:	4604      	mov	r4, r0
 8003754:	460d      	mov	r5, r1
 8003756:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003758:	6823      	ldr	r3, [r4, #0]
 800375a:	699b      	ldr	r3, [r3, #24]
 800375c:	069b      	lsls	r3, r3, #26
 800375e:	d501      	bpl.n	8003764 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8003760:	2000      	movs	r0, #0
 8003762:	e013      	b.n	800378c <I2C_WaitOnSTOPFlagUntilTimeout+0x3c>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003764:	4632      	mov	r2, r6
 8003766:	4629      	mov	r1, r5
 8003768:	4620      	mov	r0, r4
 800376a:	f7ff ff17 	bl	800359c <I2C_IsAcknowledgeFailed>
 800376e:	b9a0      	cbnz	r0, 800379a <I2C_WaitOnSTOPFlagUntilTimeout+0x4a>
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003770:	b96d      	cbnz	r5, 800378e <I2C_WaitOnSTOPFlagUntilTimeout+0x3e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003772:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8003774:	2003      	movs	r0, #3
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003776:	f043 0320 	orr.w	r3, r3, #32
 800377a:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800377c:	2320      	movs	r3, #32
 800377e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003782:	2300      	movs	r3, #0
 8003784:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8003788:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800378c:	bd70      	pop	{r4, r5, r6, pc}
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800378e:	f7ff fa97 	bl	8002cc0 <HAL_GetTick>
 8003792:	1b80      	subs	r0, r0, r6
 8003794:	42a8      	cmp	r0, r5
 8003796:	d9df      	bls.n	8003758 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
 8003798:	e7eb      	b.n	8003772 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
      return HAL_ERROR;
 800379a:	2001      	movs	r0, #1
 800379c:	e7f6      	b.n	800378c <I2C_WaitOnSTOPFlagUntilTimeout+0x3c>

0800379e <HAL_I2C_MspInit>:
}
 800379e:	4770      	bx	lr

080037a0 <HAL_I2C_Init>:
{
 80037a0:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 80037a2:	4604      	mov	r4, r0
 80037a4:	2800      	cmp	r0, #0
 80037a6:	d04a      	beq.n	800383e <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037a8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80037ac:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80037b0:	b91b      	cbnz	r3, 80037ba <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 80037b2:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80037b6:	f7ff fff2 	bl	800379e <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80037ba:	2324      	movs	r3, #36	; 0x24
 80037bc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80037c0:	6823      	ldr	r3, [r4, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	f022 0201 	bic.w	r2, r2, #1
 80037c8:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80037ca:	6862      	ldr	r2, [r4, #4]
 80037cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80037d0:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80037d2:	689a      	ldr	r2, [r3, #8]
 80037d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037d8:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80037da:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80037de:	2901      	cmp	r1, #1
 80037e0:	d124      	bne.n	800382c <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80037e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037e6:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80037e8:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037ea:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80037ec:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80037f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037f4:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80037f6:	68da      	ldr	r2, [r3, #12]
 80037f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037fc:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80037fe:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8003802:	430a      	orrs	r2, r1
 8003804:	69a1      	ldr	r1, [r4, #24]
 8003806:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800380a:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800380c:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8003810:	430a      	orrs	r2, r1
 8003812:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	f042 0201 	orr.w	r2, r2, #1
 800381a:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800381c:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800381e:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003820:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003824:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003826:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 800382a:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800382c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003830:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003832:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003834:	d1d8      	bne.n	80037e8 <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003836:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800383a:	605a      	str	r2, [r3, #4]
 800383c:	e7d4      	b.n	80037e8 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 800383e:	2001      	movs	r0, #1
 8003840:	e7f3      	b.n	800382a <HAL_I2C_Init+0x8a>

08003842 <HAL_I2C_MspDeInit>:
 8003842:	4770      	bx	lr

08003844 <HAL_I2C_DeInit>:
{
 8003844:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8003846:	4604      	mov	r4, r0
 8003848:	b198      	cbz	r0, 8003872 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 800384a:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800384c:	2324      	movs	r3, #36	; 0x24
 800384e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8003852:	6813      	ldr	r3, [r2, #0]
 8003854:	f023 0301 	bic.w	r3, r3, #1
 8003858:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 800385a:	f7ff fff2 	bl	8003842 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800385e:	2000      	movs	r0, #0
 8003860:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 8003862:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 8003866:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800386a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800386c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8003870:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003872:	2001      	movs	r0, #1
 8003874:	e7fc      	b.n	8003870 <HAL_I2C_DeInit+0x2c>

08003876 <HAL_I2C_Mem_Write>:
{
 8003876:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800387a:	b085      	sub	sp, #20
 800387c:	469b      	mov	fp, r3
 800387e:	4604      	mov	r4, r0
 8003880:	460f      	mov	r7, r1
 8003882:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8003886:	4692      	mov	sl, r2
 8003888:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 800388c:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800388e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003892:	2b20      	cmp	r3, #32
 8003894:	f040 80a5 	bne.w	80039e2 <HAL_I2C_Mem_Write+0x16c>
    if ((pData == NULL) || (Size == 0U))
 8003898:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800389a:	b91b      	cbnz	r3, 80038a4 <HAL_I2C_Mem_Write+0x2e>
      return  HAL_ERROR;
 800389c:	2001      	movs	r0, #1
}
 800389e:	b005      	add	sp, #20
 80038a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((pData == NULL) || (Size == 0U))
 80038a4:	9b03      	ldr	r3, [sp, #12]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d0f8      	beq.n	800389c <HAL_I2C_Mem_Write+0x26>
    __HAL_LOCK(hi2c);
 80038aa:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	f000 8097 	beq.w	80039e2 <HAL_I2C_Mem_Write+0x16c>
 80038b4:	2501      	movs	r5, #1
 80038b6:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80038ba:	f7ff fa01 	bl	8002cc0 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80038be:	2319      	movs	r3, #25
 80038c0:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 80038c2:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80038c4:	462a      	mov	r2, r5
 80038c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80038ca:	4620      	mov	r0, r4
 80038cc:	f7ff fe40 	bl	8003550 <I2C_WaitOnFlagUntilTimeout>
 80038d0:	4680      	mov	r8, r0
 80038d2:	b9c8      	cbnz	r0, 8003908 <HAL_I2C_Mem_Write+0x92>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80038d4:	2321      	movs	r3, #33	; 0x21
    hi2c->XferISR   = NULL;
 80038d6:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80038d8:	4652      	mov	r2, sl
 80038da:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80038dc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80038e0:	2340      	movs	r3, #64	; 0x40
 80038e2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 80038e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038e8:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80038ea:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 80038ec:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80038ee:	9b03      	ldr	r3, [sp, #12]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80038f0:	e9cd 9600 	strd	r9, r6, [sp]
    hi2c->XferCount = Size;
 80038f4:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80038f6:	465b      	mov	r3, fp
 80038f8:	f7ff feb6 	bl	8003668 <I2C_RequestMemoryWrite>
 80038fc:	b130      	cbz	r0, 800390c <HAL_I2C_Mem_Write+0x96>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038fe:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8003900:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003904:	2b04      	cmp	r3, #4
 8003906:	d0c9      	beq.n	800389c <HAL_I2C_Mem_Write+0x26>
          return HAL_TIMEOUT;
 8003908:	2003      	movs	r0, #3
 800390a:	e7c8      	b.n	800389e <HAL_I2C_Mem_Write+0x28>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800390c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800390e:	b29b      	uxth	r3, r3
 8003910:	2bff      	cmp	r3, #255	; 0xff
 8003912:	d910      	bls.n	8003936 <HAL_I2C_Mem_Write+0xc0>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003914:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003916:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800391a:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800391c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800391e:	4639      	mov	r1, r7
 8003920:	4620      	mov	r0, r4
 8003922:	f7ff fe01 	bl	8003528 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003926:	4632      	mov	r2, r6
 8003928:	4649      	mov	r1, r9
 800392a:	4620      	mov	r0, r4
 800392c:	f7ff fe73 	bl	8003616 <I2C_WaitOnTXISFlagUntilTimeout>
 8003930:	b148      	cbz	r0, 8003946 <HAL_I2C_Mem_Write+0xd0>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003932:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003934:	e7e6      	b.n	8003904 <HAL_I2C_Mem_Write+0x8e>
      hi2c->XferSize = hi2c->XferCount;
 8003936:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003938:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800393c:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 800393e:	b292      	uxth	r2, r2
 8003940:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003942:	b2d2      	uxtb	r2, r2
 8003944:	e7eb      	b.n	800391e <HAL_I2C_Mem_Write+0xa8>
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8003946:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003948:	1c5a      	adds	r2, r3, #1
 800394a:	6262      	str	r2, [r4, #36]	; 0x24
 800394c:	6822      	ldr	r2, [r4, #0]
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferSize--;
 8003952:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8003954:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003956:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8003958:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800395a:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 800395c:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800395e:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8003960:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8003962:	b9ba      	cbnz	r2, 8003994 <HAL_I2C_Mem_Write+0x11e>
 8003964:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003966:	b29b      	uxth	r3, r3
 8003968:	b1a3      	cbz	r3, 8003994 <HAL_I2C_Mem_Write+0x11e>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800396a:	464b      	mov	r3, r9
 800396c:	2180      	movs	r1, #128	; 0x80
 800396e:	4620      	mov	r0, r4
 8003970:	9600      	str	r6, [sp, #0]
 8003972:	f7ff fded 	bl	8003550 <I2C_WaitOnFlagUntilTimeout>
 8003976:	2800      	cmp	r0, #0
 8003978:	d1c6      	bne.n	8003908 <HAL_I2C_Mem_Write+0x92>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800397a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800397c:	b29b      	uxth	r3, r3
 800397e:	2bff      	cmp	r3, #255	; 0xff
 8003980:	d927      	bls.n	80039d2 <HAL_I2C_Mem_Write+0x15c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003982:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003984:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003988:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800398a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800398c:	4639      	mov	r1, r7
 800398e:	4620      	mov	r0, r4
 8003990:	f7ff fdca 	bl	8003528 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8003994:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003996:	b29b      	uxth	r3, r3
 8003998:	2b00      	cmp	r3, #0
 800399a:	d1c4      	bne.n	8003926 <HAL_I2C_Mem_Write+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800399c:	4632      	mov	r2, r6
 800399e:	4649      	mov	r1, r9
 80039a0:	4620      	mov	r0, r4
 80039a2:	f7ff fed5 	bl	8003750 <I2C_WaitOnSTOPFlagUntilTimeout>
 80039a6:	2800      	cmp	r0, #0
 80039a8:	d1c3      	bne.n	8003932 <HAL_I2C_Mem_Write+0xbc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039aa:	6823      	ldr	r3, [r4, #0]
 80039ac:	2120      	movs	r1, #32
 80039ae:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80039b0:	685a      	ldr	r2, [r3, #4]
 80039b2:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80039b6:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80039ba:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80039be:	f022 0201 	bic.w	r2, r2, #1
 80039c2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80039c4:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80039c8:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80039cc:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80039d0:	e765      	b.n	800389e <HAL_I2C_Mem_Write+0x28>
          hi2c->XferSize = hi2c->XferCount;
 80039d2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80039d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80039d8:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80039da:	b292      	uxth	r2, r2
 80039dc:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80039de:	b2d2      	uxtb	r2, r2
 80039e0:	e7d4      	b.n	800398c <HAL_I2C_Mem_Write+0x116>
    return HAL_BUSY;
 80039e2:	2002      	movs	r0, #2
 80039e4:	e75b      	b.n	800389e <HAL_I2C_Mem_Write+0x28>
	...

080039e8 <HAL_I2C_Mem_Read>:
{
 80039e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039ec:	b085      	sub	sp, #20
 80039ee:	469b      	mov	fp, r3
 80039f0:	4604      	mov	r4, r0
 80039f2:	460f      	mov	r7, r1
 80039f4:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80039f8:	4692      	mov	sl, r2
 80039fa:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 80039fe:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a00:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003a04:	2b20      	cmp	r3, #32
 8003a06:	f040 80a8 	bne.w	8003b5a <HAL_I2C_Mem_Read+0x172>
    if ((pData == NULL) || (Size == 0U))
 8003a0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003a0c:	b91b      	cbnz	r3, 8003a16 <HAL_I2C_Mem_Read+0x2e>
      return  HAL_ERROR;
 8003a0e:	2001      	movs	r0, #1
}
 8003a10:	b005      	add	sp, #20
 8003a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((pData == NULL) || (Size == 0U))
 8003a16:	9b03      	ldr	r3, [sp, #12]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d0f8      	beq.n	8003a0e <HAL_I2C_Mem_Read+0x26>
    __HAL_LOCK(hi2c);
 8003a1c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	f000 809a 	beq.w	8003b5a <HAL_I2C_Mem_Read+0x172>
 8003a26:	2501      	movs	r5, #1
 8003a28:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8003a2c:	f7ff f948 	bl	8002cc0 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003a30:	2319      	movs	r3, #25
 8003a32:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8003a34:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003a36:	462a      	mov	r2, r5
 8003a38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003a3c:	4620      	mov	r0, r4
 8003a3e:	f7ff fd87 	bl	8003550 <I2C_WaitOnFlagUntilTimeout>
 8003a42:	4680      	mov	r8, r0
 8003a44:	b9c8      	cbnz	r0, 8003a7a <HAL_I2C_Mem_Read+0x92>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003a46:	2322      	movs	r3, #34	; 0x22
    hi2c->XferISR   = NULL;
 8003a48:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a4a:	4652      	mov	r2, sl
 8003a4c:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003a4e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a52:	2340      	movs	r3, #64	; 0x40
 8003a54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8003a58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a5a:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a5c:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8003a5e:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8003a60:	9b03      	ldr	r3, [sp, #12]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a62:	e9cd 9600 	strd	r9, r6, [sp]
    hi2c->XferCount = Size;
 8003a66:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a68:	465b      	mov	r3, fp
 8003a6a:	f7ff fe37 	bl	80036dc <I2C_RequestMemoryRead>
 8003a6e:	b130      	cbz	r0, 8003a7e <HAL_I2C_Mem_Read+0x96>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a70:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8003a72:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a76:	2b04      	cmp	r3, #4
 8003a78:	d0c9      	beq.n	8003a0e <HAL_I2C_Mem_Read+0x26>
        return HAL_TIMEOUT;
 8003a7a:	2003      	movs	r0, #3
 8003a7c:	e7c8      	b.n	8003a10 <HAL_I2C_Mem_Read+0x28>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a7e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	2bff      	cmp	r3, #255	; 0xff
 8003a84:	4b36      	ldr	r3, [pc, #216]	; (8003b60 <HAL_I2C_Mem_Read+0x178>)
 8003a86:	d944      	bls.n	8003b12 <HAL_I2C_Mem_Read+0x12a>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a88:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003a8a:	9300      	str	r3, [sp, #0]
 8003a8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a90:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003a92:	4639      	mov	r1, r7
 8003a94:	4620      	mov	r0, r4
 8003a96:	f7ff fd47 	bl	8003528 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003a9a:	464b      	mov	r3, r9
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	2104      	movs	r1, #4
 8003aa0:	4620      	mov	r0, r4
 8003aa2:	9600      	str	r6, [sp, #0]
 8003aa4:	f7ff fd54 	bl	8003550 <I2C_WaitOnFlagUntilTimeout>
 8003aa8:	2800      	cmp	r0, #0
 8003aaa:	d1e6      	bne.n	8003a7a <HAL_I2C_Mem_Read+0x92>
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8003aac:	6823      	ldr	r3, [r4, #0]
 8003aae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ab0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ab2:	1c59      	adds	r1, r3, #1
 8003ab4:	6261      	str	r1, [r4, #36]	; 0x24
 8003ab6:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 8003ab8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8003aba:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003abc:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8003abe:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8003ac0:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8003ac2:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8003ac4:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8003ac6:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8003ac8:	b9ba      	cbnz	r2, 8003afa <HAL_I2C_Mem_Read+0x112>
 8003aca:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	b1a3      	cbz	r3, 8003afa <HAL_I2C_Mem_Read+0x112>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003ad0:	464b      	mov	r3, r9
 8003ad2:	2180      	movs	r1, #128	; 0x80
 8003ad4:	4620      	mov	r0, r4
 8003ad6:	9600      	str	r6, [sp, #0]
 8003ad8:	f7ff fd3a 	bl	8003550 <I2C_WaitOnFlagUntilTimeout>
 8003adc:	2800      	cmp	r0, #0
 8003ade:	d1cc      	bne.n	8003a7a <HAL_I2C_Mem_Read+0x92>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ae0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	2bff      	cmp	r3, #255	; 0xff
 8003ae6:	d91c      	bls.n	8003b22 <HAL_I2C_Mem_Read+0x13a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ae8:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003aea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003aee:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003af0:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003af2:	4639      	mov	r1, r7
 8003af4:	4620      	mov	r0, r4
 8003af6:	f7ff fd17 	bl	8003528 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8003afa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d1cb      	bne.n	8003a9a <HAL_I2C_Mem_Read+0xb2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b02:	4632      	mov	r2, r6
 8003b04:	4649      	mov	r1, r9
 8003b06:	4620      	mov	r0, r4
 8003b08:	f7ff fe22 	bl	8003750 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003b0c:	b188      	cbz	r0, 8003b32 <HAL_I2C_Mem_Read+0x14a>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b0e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003b10:	e7b1      	b.n	8003a76 <HAL_I2C_Mem_Read+0x8e>
      hi2c->XferSize = hi2c->XferCount;
 8003b12:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003b14:	9300      	str	r3, [sp, #0]
 8003b16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 8003b1a:	b292      	uxth	r2, r2
 8003b1c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003b1e:	b2d2      	uxtb	r2, r2
 8003b20:	e7b7      	b.n	8003a92 <HAL_I2C_Mem_Read+0xaa>
          hi2c->XferSize = hi2c->XferCount;
 8003b22:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003b24:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b28:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8003b2a:	b292      	uxth	r2, r2
 8003b2c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003b2e:	b2d2      	uxtb	r2, r2
 8003b30:	e7df      	b.n	8003af2 <HAL_I2C_Mem_Read+0x10a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b32:	6823      	ldr	r3, [r4, #0]
 8003b34:	2120      	movs	r1, #32
 8003b36:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8003b38:	685a      	ldr	r2, [r3, #4]
 8003b3a:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8003b3e:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8003b42:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8003b46:	f022 0201 	bic.w	r2, r2, #1
 8003b4a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003b4c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8003b50:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003b54:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8003b58:	e75a      	b.n	8003a10 <HAL_I2C_Mem_Read+0x28>
    return HAL_BUSY;
 8003b5a:	2002      	movs	r0, #2
 8003b5c:	e758      	b.n	8003a10 <HAL_I2C_Mem_Read+0x28>
 8003b5e:	bf00      	nop
 8003b60:	80002400 	.word	0x80002400

08003b64 <HAL_I2C_GetState>:
  return hi2c->State;
 8003b64:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 8003b68:	4770      	bx	lr

08003b6a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003b6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t i;

  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8003b6e:	4604      	mov	r4, r0
{
 8003b70:	b08a      	sub	sp, #40	; 0x28
  if(hpcd == NULL)
 8003b72:	2800      	cmp	r0, #0
 8003b74:	d06c      	beq.n	8003c50 <HAL_PCD_Init+0xe6>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 8003b76:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 8003b7a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003b7e:	b91b      	cbnz	r3, 8003b88 <HAL_PCD_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003b80:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003b84:	f7fe fce2 	bl	800254c <HAL_PCD_MspInit>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003b88:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003b8a:	4625      	mov	r5, r4

  /*Init the Core (common init.) */
  (void)USB_CoreInit(hpcd->Instance, hpcd->Init);
 8003b8c:	466e      	mov	r6, sp
 8003b8e:	f104 0804 	add.w	r8, r4, #4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8003b92:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  __HAL_PCD_DISABLE(hpcd);
 8003b96:	f855 0b10 	ldr.w	r0, [r5], #16
 8003b9a:	f001 fde2 	bl	8005762 <USB_DisableGlobalInt>
  (void)USB_CoreInit(hpcd->Instance, hpcd->Init);
 8003b9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ba0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003ba2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ba4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003ba6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003baa:	f104 0510 	add.w	r5, r4, #16
 8003bae:	e886 0003 	stmia.w	r6, {r0, r1}
 8003bb2:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8003bb6:	6820      	ldr	r0, [r4, #0]

  /* Init endpoints structures */
  for (i = 0U; i < 15U; i++)
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003bb8:	2601      	movs	r6, #1
  (void)USB_CoreInit(hpcd->Instance, hpcd->Init);
 8003bba:	f001 fd91 	bl	80056e0 <USB_CoreInit>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003bbe:	2100      	movs	r1, #0
 8003bc0:	6820      	ldr	r0, [r4, #0]
 8003bc2:	f001 fdd4 	bl	800576e <USB_SetCurrentMode>
 8003bc6:	2100      	movs	r1, #0
 8003bc8:	4622      	mov	r2, r4
 8003bca:	4623      	mov	r3, r4
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003bcc:	4608      	mov	r0, r1
    hpcd->IN_ep[i].num = i;
 8003bce:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003bd2:	f8a3 1042 	strh.w	r1, [r3, #66]	; 0x42
 8003bd6:	3101      	adds	r1, #1
    hpcd->IN_ep[i].is_in = 1U;
 8003bd8:	f883 603d 	strb.w	r6, [r3, #61]	; 0x3d
  for (i = 0U; i < 15U; i++)
 8003bdc:	290f      	cmp	r1, #15
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003bde:	f883 003f 	strb.w	r0, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
    hpcd->IN_ep[i].xfer_buff = 0U;
    hpcd->IN_ep[i].xfer_len = 0U;
 8003be2:	6518      	str	r0, [r3, #80]	; 0x50
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003be4:	e9c3 0011 	strd	r0, r0, [r3, #68]	; 0x44
  for (i = 0U; i < 15U; i++)
 8003be8:	f103 031c 	add.w	r3, r3, #28
 8003bec:	d1ef      	bne.n	8003bce <HAL_PCD_Init+0x64>
 8003bee:	2300      	movs	r3, #0
  }

  for (i = 0U; i < 15U; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003bf0:	461f      	mov	r7, r3
    hpcd->OUT_ep[i].num = i;
 8003bf2:	f882 31fc 	strb.w	r3, [r2, #508]	; 0x1fc
 8003bf6:	3301      	adds	r3, #1
    hpcd->OUT_ep[i].is_in = 0U;
 8003bf8:	f882 71fd 	strb.w	r7, [r2, #509]	; 0x1fd
  for (i = 0U; i < 15U; i++)
 8003bfc:	2b0f      	cmp	r3, #15
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003bfe:	f882 71ff 	strb.w	r7, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003c02:	f8c2 7210 	str.w	r7, [r2, #528]	; 0x210
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003c06:	e9c2 7781 	strd	r7, r7, [r2, #516]	; 0x204
  for (i = 0U; i < 15U; i++)
 8003c0a:	f102 021c 	add.w	r2, r2, #28
 8003c0e:	d1f0      	bne.n	8003bf2 <HAL_PCD_Init+0x88>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003c10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c12:	466e      	mov	r6, sp
 8003c14:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003c16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c18:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003c1a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003c1e:	e886 0003 	stmia.w	r6, {r0, r1}
 8003c22:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8003c26:	6820      	ldr	r0, [r4, #0]
 8003c28:	f001 fde2 	bl	80057f0 <USB_DevInit>

  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
 8003c2c:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 8003c2e:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003c32:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003c36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d102      	bne.n	8003c42 <HAL_PCD_Init+0xd8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003c3c:	4620      	mov	r0, r4
 8003c3e:	f000 fcc1 	bl	80045c4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect (hpcd->Instance);
 8003c42:	6820      	ldr	r0, [r4, #0]
 8003c44:	f002 f8dc 	bl	8005e00 <USB_DevDisconnect>

  return HAL_OK;
 8003c48:	2000      	movs	r0, #0
}
 8003c4a:	b00a      	add	sp, #40	; 0x28
 8003c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8003c50:	2001      	movs	r0, #1
 8003c52:	e7fa      	b.n	8003c4a <HAL_PCD_Init+0xe0>

08003c54 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003c54:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8003c56:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
{
 8003c5a:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d00c      	beq.n	8003c7a <HAL_PCD_Start+0x26>
 8003c60:	2301      	movs	r3, #1
 8003c62:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_DevConnect (hpcd->Instance);
 8003c66:	6800      	ldr	r0, [r0, #0]
 8003c68:	f002 f8be 	bl	8005de8 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8003c6c:	6820      	ldr	r0, [r4, #0]
 8003c6e:	f001 fd72 	bl	8005756 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8003c72:	2000      	movs	r0, #0
 8003c74:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
}
 8003c78:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8003c7a:	2002      	movs	r0, #2
 8003c7c:	e7fc      	b.n	8003c78 <HAL_PCD_Start+0x24>
	...

08003c80 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c84:	6807      	ldr	r7, [r0, #0]
{
 8003c86:	b087      	sub	sp, #28
 8003c88:	4604      	mov	r4, r0
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;
  uint32_t hclk;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003c8a:	4638      	mov	r0, r7
  uint32_t gSNPSiD = *(uint32_t *) TempReg;
 8003c8c:	f8d7 b040 	ldr.w	fp, [r7, #64]	; 0x40
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003c90:	f002 f8f1 	bl	8005e76 <USB_GetMode>
 8003c94:	9002      	str	r0, [sp, #8]
 8003c96:	2800      	cmp	r0, #0
 8003c98:	f040 8152 	bne.w	8003f40 <HAL_PCD_IRQHandler+0x2c0>
  {
    /* avoid spurious interrupt */
    if(__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003c9c:	6820      	ldr	r0, [r4, #0]
 8003c9e:	f002 f8bb 	bl	8005e18 <USB_ReadInterrupts>
 8003ca2:	2800      	cmp	r0, #0
 8003ca4:	f000 814c 	beq.w	8003f40 <HAL_PCD_IRQHandler+0x2c0>
    {
      return;
    }

    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003ca8:	6820      	ldr	r0, [r4, #0]
 8003caa:	f002 f8b5 	bl	8005e18 <USB_ReadInterrupts>
 8003cae:	0781      	lsls	r1, r0, #30
 8003cb0:	d504      	bpl.n	8003cbc <HAL_PCD_IRQHandler+0x3c>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003cb2:	6822      	ldr	r2, [r4, #0]
 8003cb4:	6953      	ldr	r3, [r2, #20]
 8003cb6:	f003 0302 	and.w	r3, r3, #2
 8003cba:	6153      	str	r3, [r2, #20]
    }

    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003cbc:	6820      	ldr	r0, [r4, #0]
 8003cbe:	f002 f8ab 	bl	8005e18 <USB_ReadInterrupts>
 8003cc2:	f410 2500 	ands.w	r5, r0, #524288	; 0x80000
 8003cc6:	d00d      	beq.n	8003ce4 <HAL_PCD_IRQHandler+0x64>
    {
      epnum = 0U;

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003cc8:	f507 6a30 	add.w	sl, r7, #2816	; 0xb00
 8003ccc:	f504 7601 	add.w	r6, r4, #516	; 0x204
      epnum = 0U;
 8003cd0:	2500      	movs	r5, #0
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003cd2:	6820      	ldr	r0, [r4, #0]

      while (ep_intr != 0U)
 8003cd4:	46d0      	mov	r8, sl
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003cd6:	f002 f8a3 	bl	8005e20 <USB_ReadDevAllOutEpInterrupt>
 8003cda:	9003      	str	r0, [sp, #12]
      while (ep_intr != 0U)
 8003cdc:	9b03      	ldr	r3, [sp, #12]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	f040 8131 	bne.w	8003f46 <HAL_PCD_IRQHandler+0x2c6>
        epnum++;
        ep_intr >>= 1U;
      }
    }

    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003ce4:	6820      	ldr	r0, [r4, #0]
 8003ce6:	f002 f897 	bl	8005e18 <USB_ReadInterrupts>
 8003cea:	0340      	lsls	r0, r0, #13
 8003cec:	d50b      	bpl.n	8003d06 <HAL_PCD_IRQHandler+0x86>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003cee:	4626      	mov	r6, r4
 8003cf0:	f507 6910 	add.w	r9, r7, #2304	; 0x900

      epnum = 0U;
 8003cf4:	2500      	movs	r5, #0
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003cf6:	6820      	ldr	r0, [r4, #0]
 8003cf8:	f002 f89a 	bl	8005e30 <USB_ReadDevAllInEpInterrupt>
 8003cfc:	9003      	str	r0, [sp, #12]

      while (ep_intr != 0U)
 8003cfe:	9b03      	ldr	r3, [sp, #12]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	f040 819c 	bne.w	800403e <HAL_PCD_IRQHandler+0x3be>
        ep_intr >>= 1U;
      }
    }

    /* Handle Resume Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003d06:	6820      	ldr	r0, [r4, #0]
 8003d08:	f002 f886 	bl	8005e18 <USB_ReadInterrupts>
 8003d0c:	2800      	cmp	r0, #0
 8003d0e:	da15      	bge.n	8003d3c <HAL_PCD_IRQHandler+0xbc>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003d10:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8003d14:	f023 0301 	bic.w	r3, r3, #1
 8003d18:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804

      if(hpcd->LPM_State == LPM_L1)
 8003d1c:	f894 33f0 	ldrb.w	r3, [r4, #1008]	; 0x3f0
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	f040 8222 	bne.w	800416a <HAL_PCD_IRQHandler+0x4ea>
      {
        hpcd->LPM_State = LPM_L0;
 8003d26:	2100      	movs	r1, #0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003d28:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L0;
 8003d2a:	f884 13f0 	strb.w	r1, [r4, #1008]	; 0x3f0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003d2e:	f000 fc5c 	bl	80045ea <HAL_PCDEx_LPM_Callback>
      else
      {
        HAL_PCD_ResumeCallback(hpcd);
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003d32:	6822      	ldr	r2, [r4, #0]
 8003d34:	6953      	ldr	r3, [r2, #20]
 8003d36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d3a:	6153      	str	r3, [r2, #20]
    }

    /* Handle Suspend Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003d3c:	6820      	ldr	r0, [r4, #0]
 8003d3e:	f002 f86b 	bl	8005e18 <USB_ReadInterrupts>
 8003d42:	0502      	lsls	r2, r0, #20
 8003d44:	d50b      	bpl.n	8003d5e <HAL_PCD_IRQHandler+0xde>
    {
      if((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003d46:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8003d4a:	07db      	lsls	r3, r3, #31
 8003d4c:	d502      	bpl.n	8003d54 <HAL_PCD_IRQHandler+0xd4>
      {

        HAL_PCD_SuspendCallback(hpcd);
 8003d4e:	4620      	mov	r0, r4
 8003d50:	f7fe fd14 	bl	800277c <HAL_PCD_SuspendCallback>
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003d54:	6822      	ldr	r2, [r4, #0]
 8003d56:	6953      	ldr	r3, [r2, #20]
 8003d58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d5c:	6153      	str	r3, [r2, #20]
    }

    /* Handle LPM Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003d5e:	6820      	ldr	r0, [r4, #0]
 8003d60:	f002 f85a 	bl	8005e18 <USB_ReadInterrupts>
 8003d64:	0106      	lsls	r6, r0, #4
 8003d66:	d514      	bpl.n	8003d92 <HAL_PCD_IRQHandler+0x112>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003d68:	6823      	ldr	r3, [r4, #0]
 8003d6a:	695a      	ldr	r2, [r3, #20]
 8003d6c:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003d70:	615a      	str	r2, [r3, #20]
      if( hpcd->LPM_State == LPM_L0)
 8003d72:	f894 23f0 	ldrb.w	r2, [r4, #1008]	; 0x3f0
 8003d76:	2a00      	cmp	r2, #0
 8003d78:	f040 81fb 	bne.w	8004172 <HAL_PCD_IRQHandler+0x4f2>
      {
        hpcd->LPM_State = LPM_L1;
 8003d7c:	2101      	movs	r1, #1
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003d7e:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L1;
 8003d80:	f884 13f0 	strb.w	r1, [r4, #1008]	; 0x3f0
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d86:	f3c3 0383 	ubfx	r3, r3, #2, #4
 8003d8a:	f8c4 33f4 	str.w	r3, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003d8e:	f000 fc2c 	bl	80045ea <HAL_PCDEx_LPM_Callback>
        HAL_PCD_SuspendCallback(hpcd);
      }
    }

    /* Handle Reset Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003d92:	6820      	ldr	r0, [r4, #0]
 8003d94:	f002 f840 	bl	8005e18 <USB_ReadInterrupts>
 8003d98:	04c0      	lsls	r0, r0, #19
 8003d9a:	d536      	bpl.n	8003e0a <HAL_PCD_IRQHandler+0x18a>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003d9c:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003da0:	2110      	movs	r1, #16
 8003da2:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003da4:	f507 6600 	add.w	r6, r7, #2048	; 0x800
 8003da8:	f023 0301 	bic.w	r3, r3, #1
 8003dac:	6073      	str	r3, [r6, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003dae:	f001 fcf5 	bl	800579c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003db2:	f507 6310 	add.w	r3, r7, #2304	; 0x900
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003db6:	f64f 317f 	movw	r1, #64383	; 0xfb7f
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003dba:	6862      	ldr	r2, [r4, #4]
 8003dbc:	9802      	ldr	r0, [sp, #8]
 8003dbe:	4282      	cmp	r2, r0
 8003dc0:	f200 81db 	bhi.w	800417a <HAL_PCD_IRQHandler+0x4fa>
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003dc4:	69f3      	ldr	r3, [r6, #28]
 8003dc6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003dca:	61f3      	str	r3, [r6, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003dcc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	f000 81e7 	beq.w	80041a2 <HAL_PCD_IRQHandler+0x522>
      {
        USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 8003dd4:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
 8003dd8:	f043 030b 	orr.w	r3, r3, #11
 8003ddc:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 8003de0:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8003de2:	f043 030b 	orr.w	r3, r3, #11
 8003de6:	6473      	str	r3, [r6, #68]	; 0x44
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003de8:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003dec:	f504 7270 	add.w	r2, r4, #960	; 0x3c0
 8003df0:	7c21      	ldrb	r1, [r4, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003df2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003df6:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003df8:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003dfc:	f002 f85a 	bl	8005eb4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003e00:	6822      	ldr	r2, [r4, #0]
 8003e02:	6953      	ldr	r3, [r2, #20]
 8003e04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e08:	6153      	str	r3, [r2, #20]
    }

    /* Handle Enumeration done Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003e0a:	6820      	ldr	r0, [r4, #0]
 8003e0c:	f002 f804 	bl	8005e18 <USB_ReadInterrupts>
 8003e10:	0481      	lsls	r1, r0, #18
 8003e12:	d51d      	bpl.n	8003e50 <HAL_PCD_IRQHandler+0x1d0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003e14:	6820      	ldr	r0, [r4, #0]
 8003e16:	f002 f832 	bl	8005e7e <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003e1a:	6820      	ldr	r0, [r4, #0]
 8003e1c:	68c3      	ldr	r3, [r0, #12]
 8003e1e:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8003e22:	60c3      	str	r3, [r0, #12]

      if ( USB_GetDevSpeed(hpcd->Instance) == USB_OTG_SPEED_HIGH)
 8003e24:	f001 fd9c 	bl	8005960 <USB_GetDevSpeed>
 8003e28:	2800      	cmp	r0, #0
 8003e2a:	f040 81c3 	bne.w	80041b4 <HAL_PCD_IRQHandler+0x534>
      {
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE;
 8003e2e:	f44f 7300 	mov.w	r3, #512	; 0x200
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10U) & USB_OTG_GUSBCFG_TRDT);
 8003e32:	6822      	ldr	r2, [r4, #0]
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
 8003e34:	60e0      	str	r0, [r4, #12]
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE;
 8003e36:	6163      	str	r3, [r4, #20]
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10U) & USB_OTG_GUSBCFG_TRDT);
 8003e38:	68d3      	ldr	r3, [r2, #12]
 8003e3a:	f443 5310 	orr.w	r3, r3, #9216	; 0x2400
 8003e3e:	60d3      	str	r3, [r2, #12]
          /* hclk Clock Range between 32-200 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10) & USB_OTG_GUSBCFG_TRDT);
        }
      }

      HAL_PCD_ResetCallback(hpcd);
 8003e40:	4620      	mov	r0, r4
 8003e42:	f7fe fc88 	bl	8002756 <HAL_PCD_ResetCallback>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003e46:	6822      	ldr	r2, [r4, #0]
 8003e48:	6953      	ldr	r3, [r2, #20]
 8003e4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e4e:	6153      	str	r3, [r2, #20]
    }

    /* Handle RxQLevel Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003e50:	6820      	ldr	r0, [r4, #0]
 8003e52:	f001 ffe1 	bl	8005e18 <USB_ReadInterrupts>
 8003e56:	06c3      	lsls	r3, r0, #27
 8003e58:	d52c      	bpl.n	8003eb4 <HAL_PCD_IRQHandler+0x234>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003e5a:	6822      	ldr	r2, [r4, #0]
 8003e5c:	6993      	ldr	r3, [r2, #24]
 8003e5e:	f023 0310 	bic.w	r3, r3, #16
 8003e62:	6193      	str	r3, [r2, #24]

      temp = USBx->GRXSTSP;
 8003e64:	f8d7 8020 	ldr.w	r8, [r7, #32]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];

      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003e68:	f3c8 4343 	ubfx	r3, r8, #17, #4
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003e6c:	f008 060f 	and.w	r6, r8, #15
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	f040 8218 	bne.w	80042a6 <HAL_PCD_IRQHandler+0x626>
      {
        if((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003e76:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003e7a:	ea18 0f03 	tst.w	r8, r3
 8003e7e:	d014      	beq.n	8003eaa <HAL_PCD_IRQHandler+0x22a>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff, (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003e80:	231c      	movs	r3, #28
 8003e82:	f3c8 190a 	ubfx	r9, r8, #4, #11
 8003e86:	4638      	mov	r0, r7
 8003e88:	fb03 4606 	mla	r6, r3, r6, r4
 8003e8c:	464a      	mov	r2, r9
 8003e8e:	f8d6 1208 	ldr.w	r1, [r6, #520]	; 0x208
 8003e92:	f001 ff37 	bl	8005d04 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003e96:	f8d6 2208 	ldr.w	r2, [r6, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003e9a:	f8d6 3214 	ldr.w	r3, [r6, #532]	; 0x214
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003e9e:	444a      	add	r2, r9
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ea0:	444b      	add	r3, r9
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ea2:	f8c6 2208 	str.w	r2, [r6, #520]	; 0x208
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ea6:	f8c6 3214 	str.w	r3, [r6, #532]	; 0x214
      }
      else
      {
         /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003eaa:	6822      	ldr	r2, [r4, #0]
 8003eac:	6993      	ldr	r3, [r2, #24]
 8003eae:	f043 0310 	orr.w	r3, r3, #16
 8003eb2:	6193      	str	r3, [r2, #24]
    }

    /* Handle SOF Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003eb4:	6820      	ldr	r0, [r4, #0]
 8003eb6:	f001 ffaf 	bl	8005e18 <USB_ReadInterrupts>
 8003eba:	0707      	lsls	r7, r0, #28
 8003ebc:	d507      	bpl.n	8003ece <HAL_PCD_IRQHandler+0x24e>
    {
      HAL_PCD_SOFCallback(hpcd);
 8003ebe:	4620      	mov	r0, r4
 8003ec0:	f7fe fc45 	bl	800274e <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003ec4:	6822      	ldr	r2, [r4, #0]
 8003ec6:	6953      	ldr	r3, [r2, #20]
 8003ec8:	f003 0308 	and.w	r3, r3, #8
 8003ecc:	6153      	str	r3, [r2, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003ece:	6820      	ldr	r0, [r4, #0]
 8003ed0:	f001 ffa2 	bl	8005e18 <USB_ReadInterrupts>
 8003ed4:	02c6      	lsls	r6, r0, #11
 8003ed6:	d508      	bpl.n	8003eea <HAL_PCD_IRQHandler+0x26a>
    {
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003ed8:	b2e9      	uxtb	r1, r5
 8003eda:	4620      	mov	r0, r4
 8003edc:	f7fe fc5a 	bl	8002794 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003ee0:	6822      	ldr	r2, [r4, #0]
 8003ee2:	6953      	ldr	r3, [r2, #20]
 8003ee4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ee8:	6153      	str	r3, [r2, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003eea:	6820      	ldr	r0, [r4, #0]
 8003eec:	f001 ff94 	bl	8005e18 <USB_ReadInterrupts>
 8003ef0:	0280      	lsls	r0, r0, #10
 8003ef2:	d508      	bpl.n	8003f06 <HAL_PCD_IRQHandler+0x286>
    {
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003ef4:	b2e9      	uxtb	r1, r5
 8003ef6:	4620      	mov	r0, r4
 8003ef8:	f7fe fc48 	bl	800278c <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003efc:	6822      	ldr	r2, [r4, #0]
 8003efe:	6953      	ldr	r3, [r2, #20]
 8003f00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f04:	6153      	str	r3, [r2, #20]
    }

    /* Handle Connection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003f06:	6820      	ldr	r0, [r4, #0]
 8003f08:	f001 ff86 	bl	8005e18 <USB_ReadInterrupts>
 8003f0c:	0041      	lsls	r1, r0, #1
 8003f0e:	d507      	bpl.n	8003f20 <HAL_PCD_IRQHandler+0x2a0>
    {
      HAL_PCD_ConnectCallback(hpcd);
 8003f10:	4620      	mov	r0, r4
 8003f12:	f7fe fc43 	bl	800279c <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003f16:	6822      	ldr	r2, [r4, #0]
 8003f18:	6953      	ldr	r3, [r2, #20]
 8003f1a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003f1e:	6153      	str	r3, [r2, #20]
    }

    /* Handle Disconnection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003f20:	6820      	ldr	r0, [r4, #0]
 8003f22:	f001 ff79 	bl	8005e18 <USB_ReadInterrupts>
 8003f26:	0742      	lsls	r2, r0, #29
 8003f28:	d50a      	bpl.n	8003f40 <HAL_PCD_IRQHandler+0x2c0>
    {
      temp = hpcd->Instance->GOTGINT;
 8003f2a:	6823      	ldr	r3, [r4, #0]
 8003f2c:	685d      	ldr	r5, [r3, #4]

      if((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003f2e:	076b      	lsls	r3, r5, #29
 8003f30:	d502      	bpl.n	8003f38 <HAL_PCD_IRQHandler+0x2b8>
      {
        HAL_PCD_DisconnectCallback(hpcd);
 8003f32:	4620      	mov	r0, r4
 8003f34:	f7fe fc36 	bl	80027a4 <HAL_PCD_DisconnectCallback>
      }
      hpcd->Instance->GOTGINT |= temp;
 8003f38:	6822      	ldr	r2, [r4, #0]
 8003f3a:	6853      	ldr	r3, [r2, #4]
 8003f3c:	432b      	orrs	r3, r5
 8003f3e:	6053      	str	r3, [r2, #4]
    }
  }
}
 8003f40:	b007      	add	sp, #28
 8003f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((ep_intr & 0x1U) != 0U)
 8003f46:	9b03      	ldr	r3, [sp, #12]
 8003f48:	07da      	lsls	r2, r3, #31
 8003f4a:	d570      	bpl.n	800402e <HAL_PCD_IRQHandler+0x3ae>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003f4c:	b2e9      	uxtb	r1, r5
 8003f4e:	6820      	ldr	r0, [r4, #0]
 8003f50:	9104      	str	r1, [sp, #16]
 8003f52:	f001 ff75 	bl	8005e40 <USB_ReadDevOutEPInterrupt>
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003f56:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003f5a:	4681      	mov	r9, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003f5c:	d032      	beq.n	8003fc4 <HAL_PCD_IRQHandler+0x344>
            if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8003f5e:	4bb6      	ldr	r3, [pc, #728]	; (8004238 <HAL_PCD_IRQHandler+0x5b8>)
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003f60:	2201      	movs	r2, #1
            if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8003f62:	9904      	ldr	r1, [sp, #16]
 8003f64:	459b      	cmp	fp, r3
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003f66:	f8c8 2008 	str.w	r2, [r8, #8]
            if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8003f6a:	6922      	ldr	r2, [r4, #16]
 8003f6c:	d944      	bls.n	8003ff8 <HAL_PCD_IRQHandler+0x378>
              if (hpcd->Init.dma_enable == 1U)
 8003f6e:	2a01      	cmp	r2, #1
 8003f70:	d111      	bne.n	8003f96 <HAL_PCD_IRQHandler+0x316>
                if ((USBx_OUTEP(0U)->DOEPINT & (1U << 15)) != 0U)
 8003f72:	f8da 2008 	ldr.w	r2, [sl, #8]
 8003f76:	0413      	lsls	r3, r2, #16
 8003f78:	d503      	bpl.n	8003f82 <HAL_PCD_IRQHandler+0x302>
                  CLEAR_OUT_EP_INTR(epnum, (1U << 15));
 8003f7a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003f7e:	f8c8 2008 	str.w	r2, [r8, #8]
              hpcd->OUT_ep[epnum].xfer_count = hpcd->OUT_ep[epnum].maxpacket- (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003f82:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8003f86:	6830      	ldr	r0, [r6, #0]
 8003f88:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8003f8c:	1a82      	subs	r2, r0, r2
 8003f8e:	6132      	str	r2, [r6, #16]
              hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003f90:	6872      	ldr	r2, [r6, #4]
 8003f92:	4410      	add	r0, r2
 8003f94:	6070      	str	r0, [r6, #4]
            if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003f96:	4ba9      	ldr	r3, [pc, #676]	; (800423c <HAL_PCD_IRQHandler+0x5bc>)
 8003f98:	459b      	cmp	fp, r3
 8003f9a:	d12f      	bne.n	8003ffc <HAL_PCD_IRQHandler+0x37c>
              if ((USBx_OUTEP(0U)->DOEPINT & (1U << 15)) != 0U)
 8003f9c:	f8da 2008 	ldr.w	r2, [sl, #8]
 8003fa0:	0410      	lsls	r0, r2, #16
 8003fa2:	d52b      	bpl.n	8003ffc <HAL_PCD_IRQHandler+0x37c>
                CLEAR_OUT_EP_INTR(epnum, (1U << 15));
 8003fa4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003fa8:	f8c8 2008 	str.w	r2, [r8, #8]
            if(hpcd->Init.dma_enable == 1U)
 8003fac:	6921      	ldr	r1, [r4, #16]
 8003fae:	2901      	cmp	r1, #1
 8003fb0:	d108      	bne.n	8003fc4 <HAL_PCD_IRQHandler+0x344>
              if((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003fb2:	b93d      	cbnz	r5, 8003fc4 <HAL_PCD_IRQHandler+0x344>
 8003fb4:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 8003fb8:	b922      	cbnz	r2, 8003fc4 <HAL_PCD_IRQHandler+0x344>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003fba:	f504 7270 	add.w	r2, r4, #960	; 0x3c0
 8003fbe:	6820      	ldr	r0, [r4, #0]
 8003fc0:	f001 ff78 	bl	8005eb4 <USB_EP0_OutStart>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003fc4:	f019 0f08 	tst.w	r9, #8
 8003fc8:	d025      	beq.n	8004016 <HAL_PCD_IRQHandler+0x396>
            if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003fca:	4b9c      	ldr	r3, [pc, #624]	; (800423c <HAL_PCD_IRQHandler+0x5bc>)
 8003fcc:	459b      	cmp	fp, r3
 8003fce:	d119      	bne.n	8004004 <HAL_PCD_IRQHandler+0x384>
              if ((USBx_OUTEP(0U)->DOEPINT & (1U << 15)) != 0U)
 8003fd0:	f8da 2008 	ldr.w	r2, [sl, #8]
 8003fd4:	0412      	lsls	r2, r2, #16
 8003fd6:	d503      	bpl.n	8003fe0 <HAL_PCD_IRQHandler+0x360>
                CLEAR_OUT_EP_INTR(epnum, (1U << 15));
 8003fd8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003fdc:	f8c8 2008 	str.w	r2, [r8, #8]
              if (hpcd->Init.dma_enable == 1U)
 8003fe0:	6922      	ldr	r2, [r4, #16]
 8003fe2:	2a01      	cmp	r2, #1
 8003fe4:	d111      	bne.n	800400a <HAL_PCD_IRQHandler+0x38a>
                if ((USBx_OUTEP(0U)->DOEPINT & (1U << 15)) != 0U)
 8003fe6:	f8da 2008 	ldr.w	r2, [sl, #8]
 8003fea:	0413      	lsls	r3, r2, #16
 8003fec:	d50d      	bpl.n	800400a <HAL_PCD_IRQHandler+0x38a>
                  CLEAR_OUT_EP_INTR(epnum, (1U << 15));
 8003fee:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003ff2:	f8c8 2008 	str.w	r2, [r8, #8]
 8003ff6:	e008      	b.n	800400a <HAL_PCD_IRQHandler+0x38a>
            if(hpcd->Init.dma_enable == 1U)
 8003ff8:	2a01      	cmp	r2, #1
 8003ffa:	d0c2      	beq.n	8003f82 <HAL_PCD_IRQHandler+0x302>
              HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003ffc:	4620      	mov	r0, r4
 8003ffe:	f7fe fb95 	bl	800272c <HAL_PCD_DataOutStageCallback>
 8004002:	e7d3      	b.n	8003fac <HAL_PCD_IRQHandler+0x32c>
            if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004004:	4b8c      	ldr	r3, [pc, #560]	; (8004238 <HAL_PCD_IRQHandler+0x5b8>)
 8004006:	459b      	cmp	fp, r3
 8004008:	d8ea      	bhi.n	8003fe0 <HAL_PCD_IRQHandler+0x360>
            HAL_PCD_SetupStageCallback(hpcd);
 800400a:	4620      	mov	r0, r4
 800400c:	f7fe fb88 	bl	8002720 <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004010:	2208      	movs	r2, #8
 8004012:	f8c8 2008 	str.w	r2, [r8, #8]
          if(( epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004016:	f019 0f10 	tst.w	r9, #16
 800401a:	d002      	beq.n	8004022 <HAL_PCD_IRQHandler+0x3a2>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800401c:	2210      	movs	r2, #16
 800401e:	f8c8 2008 	str.w	r2, [r8, #8]
          if(( epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004022:	f019 0f20 	tst.w	r9, #32
 8004026:	d002      	beq.n	800402e <HAL_PCD_IRQHandler+0x3ae>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004028:	2320      	movs	r3, #32
 800402a:	f8c8 3008 	str.w	r3, [r8, #8]
        ep_intr >>= 1U;
 800402e:	9b03      	ldr	r3, [sp, #12]
        epnum++;
 8004030:	3501      	adds	r5, #1
        ep_intr >>= 1U;
 8004032:	f108 0820 	add.w	r8, r8, #32
 8004036:	361c      	adds	r6, #28
 8004038:	085b      	lsrs	r3, r3, #1
 800403a:	9303      	str	r3, [sp, #12]
 800403c:	e64e      	b.n	8003cdc <HAL_PCD_IRQHandler+0x5c>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800403e:	9b03      	ldr	r3, [sp, #12]
 8004040:	07d9      	lsls	r1, r3, #31
 8004042:	d570      	bpl.n	8004126 <HAL_PCD_IRQHandler+0x4a6>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004044:	fa5f fb85 	uxtb.w	fp, r5
 8004048:	6820      	ldr	r0, [r4, #0]
 800404a:	4659      	mov	r1, fp
 800404c:	f001 ff01 	bl	8005e52 <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004050:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004054:	4680      	mov	r8, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004056:	d022      	beq.n	800409e <HAL_PCD_IRQHandler+0x41e>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & 0xFU));
 8004058:	2001      	movs	r0, #1
 800405a:	f005 020f 	and.w	r2, r5, #15
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800405e:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004062:	4659      	mov	r1, fp
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & 0xFU));
 8004064:	fa00 f202 	lsl.w	r2, r0, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004068:	ea23 0302 	bic.w	r3, r3, r2
 800406c:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
            if (hpcd->Init.dma_enable == 1U)
 8004070:	6923      	ldr	r3, [r4, #16]
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004072:	f8c9 0008 	str.w	r0, [r9, #8]
            if (hpcd->Init.dma_enable == 1U)
 8004076:	4283      	cmp	r3, r0
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004078:	4620      	mov	r0, r4
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800407a:	bf02      	ittt	eq
 800407c:	e9d6 2311 	ldrdeq	r2, r3, [r6, #68]	; 0x44
 8004080:	189b      	addeq	r3, r3, r2
 8004082:	64b3      	streq	r3, [r6, #72]	; 0x48
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004084:	f7fe fb5b 	bl	800273e <HAL_PCD_DataInStageCallback>
            if (hpcd->Init.dma_enable == 1U)
 8004088:	6921      	ldr	r1, [r4, #16]
 800408a:	2901      	cmp	r1, #1
 800408c:	d107      	bne.n	800409e <HAL_PCD_IRQHandler+0x41e>
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800408e:	b935      	cbnz	r5, 800409e <HAL_PCD_IRQHandler+0x41e>
 8004090:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004092:	b923      	cbnz	r3, 800409e <HAL_PCD_IRQHandler+0x41e>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004094:	f504 7270 	add.w	r2, r4, #960	; 0x3c0
 8004098:	6820      	ldr	r0, [r4, #0]
 800409a:	f001 ff0b 	bl	8005eb4 <USB_EP0_OutStart>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800409e:	f018 0f08 	tst.w	r8, #8
 80040a2:	d002      	beq.n	80040aa <HAL_PCD_IRQHandler+0x42a>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80040a4:	2308      	movs	r3, #8
 80040a6:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80040aa:	f018 0f10 	tst.w	r8, #16
 80040ae:	d002      	beq.n	80040b6 <HAL_PCD_IRQHandler+0x436>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80040b0:	2310      	movs	r3, #16
 80040b2:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80040b6:	f018 0f40 	tst.w	r8, #64	; 0x40
 80040ba:	d002      	beq.n	80040c2 <HAL_PCD_IRQHandler+0x442>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80040bc:	2340      	movs	r3, #64	; 0x40
 80040be:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80040c2:	f018 0f02 	tst.w	r8, #2
 80040c6:	d002      	beq.n	80040ce <HAL_PCD_IRQHandler+0x44e>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80040c8:	2302      	movs	r3, #2
 80040ca:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80040ce:	f018 0f80 	tst.w	r8, #128	; 0x80
 80040d2:	d028      	beq.n	8004126 <HAL_PCD_IRQHandler+0x4a6>
 80040d4:	f8d4 a000 	ldr.w	sl, [r4]
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
  len = ep->xfer_len - ep->xfer_count;
 80040d8:	e9d6 3214 	ldrd	r3, r2, [r6, #80]	; 0x50
 80040dc:	eba3 0802 	sub.w	r8, r3, r2

  if (len > ep->maxpacket)
 80040e0:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80040e2:	4598      	cmp	r8, r3
 80040e4:	bf28      	it	cs
 80040e6:	4698      	movcs	r8, r3
  {
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;
 80040e8:	f108 0303 	add.w	r3, r8, #3
 80040ec:	089b      	lsrs	r3, r3, #2
 80040ee:	9304      	str	r3, [sp, #16]

  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 80040f0:	f50a 6310 	add.w	r3, sl, #2304	; 0x900
 80040f4:	eb03 1345 	add.w	r3, r3, r5, lsl #5
 80040f8:	9305      	str	r3, [sp, #20]
 80040fa:	9b05      	ldr	r3, [sp, #20]
 80040fc:	9a04      	ldr	r2, [sp, #16]
 80040fe:	699b      	ldr	r3, [r3, #24]
 8004100:	b29b      	uxth	r3, r3
 8004102:	4293      	cmp	r3, r2
 8004104:	d904      	bls.n	8004110 <HAL_PCD_IRQHandler+0x490>
          (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004106:	e9d6 3214 	ldrd	r3, r2, [r6, #80]	; 0x50
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 800410a:	4293      	cmp	r3, r2
 800410c:	d900      	bls.n	8004110 <HAL_PCD_IRQHandler+0x490>
          (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800410e:	b993      	cbnz	r3, 8004136 <HAL_PCD_IRQHandler+0x4b6>

    ep->xfer_buff  += len;
    ep->xfer_count += len;
  }

  if(len <= 0U)
 8004110:	f1b8 0f00 	cmp.w	r8, #0
 8004114:	d107      	bne.n	8004126 <HAL_PCD_IRQHandler+0x4a6>
  {
    fifoemptymsk = (uint32_t)(0x1UL << epnum);
 8004116:	2201      	movs	r2, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004118:	f8da 3834 	ldr.w	r3, [sl, #2100]	; 0x834
    fifoemptymsk = (uint32_t)(0x1UL << epnum);
 800411c:	40aa      	lsls	r2, r5
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800411e:	ea23 0302 	bic.w	r3, r3, r2
 8004122:	f8ca 3834 	str.w	r3, [sl, #2100]	; 0x834
        ep_intr >>= 1U;
 8004126:	9b03      	ldr	r3, [sp, #12]
        epnum++;
 8004128:	3501      	adds	r5, #1
        ep_intr >>= 1U;
 800412a:	361c      	adds	r6, #28
 800412c:	f109 0920 	add.w	r9, r9, #32
 8004130:	085b      	lsrs	r3, r3, #1
 8004132:	9303      	str	r3, [sp, #12]
 8004134:	e5e3      	b.n	8003cfe <HAL_PCD_IRQHandler+0x7e>
    len = ep->xfer_len - ep->xfer_count;
 8004136:	eba3 0802 	sub.w	r8, r3, r2
    if (len > ep->maxpacket)
 800413a:	6c73      	ldr	r3, [r6, #68]	; 0x44
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len, (uint8_t)hpcd->Init.dma_enable);
 800413c:	465a      	mov	r2, fp
 800413e:	4650      	mov	r0, sl
 8004140:	4598      	cmp	r8, r3
 8004142:	bf28      	it	cs
 8004144:	4698      	movcs	r8, r3
    len32b = (len + 3U) / 4U;
 8004146:	f108 0303 	add.w	r3, r8, #3
 800414a:	089b      	lsrs	r3, r3, #2
 800414c:	9304      	str	r3, [sp, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len, (uint8_t)hpcd->Init.dma_enable);
 800414e:	7c23      	ldrb	r3, [r4, #16]
 8004150:	9300      	str	r3, [sp, #0]
 8004152:	fa1f f388 	uxth.w	r3, r8
 8004156:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 8004158:	f001 fcf4 	bl	8005b44 <USB_WritePacket>
    ep->xfer_buff  += len;
 800415c:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 800415e:	4443      	add	r3, r8
 8004160:	64b3      	str	r3, [r6, #72]	; 0x48
    ep->xfer_count += len;
 8004162:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8004164:	4443      	add	r3, r8
 8004166:	6573      	str	r3, [r6, #84]	; 0x54
 8004168:	e7c7      	b.n	80040fa <HAL_PCD_IRQHandler+0x47a>
        HAL_PCD_ResumeCallback(hpcd);
 800416a:	4620      	mov	r0, r4
 800416c:	f7fe fb0a 	bl	8002784 <HAL_PCD_ResumeCallback>
 8004170:	e5df      	b.n	8003d32 <HAL_PCD_IRQHandler+0xb2>
        HAL_PCD_SuspendCallback(hpcd);
 8004172:	4620      	mov	r0, r4
 8004174:	f7fe fb02 	bl	800277c <HAL_PCD_SuspendCallback>
 8004178:	e60b      	b.n	8003d92 <HAL_PCD_IRQHandler+0x112>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800417a:	6099      	str	r1, [r3, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800417c:	3320      	adds	r3, #32
 800417e:	f853 2c20 	ldr.w	r2, [r3, #-32]
 8004182:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8004186:	f843 2c20 	str.w	r2, [r3, #-32]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800418a:	f8c3 11e8 	str.w	r1, [r3, #488]	; 0x1e8
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800418e:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 8004192:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8004196:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800419a:	9a02      	ldr	r2, [sp, #8]
 800419c:	3201      	adds	r2, #1
 800419e:	9202      	str	r2, [sp, #8]
 80041a0:	e60b      	b.n	8003dba <HAL_PCD_IRQHandler+0x13a>
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM | USB_OTG_DOEPMSK_OTEPSPRM);
 80041a2:	6973      	ldr	r3, [r6, #20]
 80041a4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80041a8:	6173      	str	r3, [r6, #20]
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 80041aa:	6933      	ldr	r3, [r6, #16]
 80041ac:	f043 030b 	orr.w	r3, r3, #11
 80041b0:	6133      	str	r3, [r6, #16]
 80041b2:	e619      	b.n	8003de8 <HAL_PCD_IRQHandler+0x168>
        hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 80041b4:	2303      	movs	r3, #3
 80041b6:	60e3      	str	r3, [r4, #12]
        hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE;
 80041b8:	2340      	movs	r3, #64	; 0x40
 80041ba:	6163      	str	r3, [r4, #20]
        hclk = HAL_RCC_GetHCLKFreq();
 80041bc:	f000 fc78 	bl	8004ab0 <HAL_RCC_GetHCLKFreq>
        if((hclk >= 14200000U) && (hclk < 15000000U))
 80041c0:	4b1f      	ldr	r3, [pc, #124]	; (8004240 <HAL_PCD_IRQHandler+0x5c0>)
 80041c2:	4a20      	ldr	r2, [pc, #128]	; (8004244 <HAL_PCD_IRQHandler+0x5c4>)
 80041c4:	4403      	add	r3, r0
 80041c6:	4293      	cmp	r3, r2
 80041c8:	6823      	ldr	r3, [r4, #0]
 80041ca:	d804      	bhi.n	80041d6 <HAL_PCD_IRQHandler+0x556>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xFU << 10) & USB_OTG_GUSBCFG_TRDT);
 80041cc:	68da      	ldr	r2, [r3, #12]
 80041ce:	f442 5270 	orr.w	r2, r2, #15360	; 0x3c00
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10) & USB_OTG_GUSBCFG_TRDT);
 80041d2:	60da      	str	r2, [r3, #12]
 80041d4:	e634      	b.n	8003e40 <HAL_PCD_IRQHandler+0x1c0>
        else if((hclk >= 15000000U) && (hclk < 16000000U))
 80041d6:	4a1c      	ldr	r2, [pc, #112]	; (8004248 <HAL_PCD_IRQHandler+0x5c8>)
 80041d8:	491c      	ldr	r1, [pc, #112]	; (800424c <HAL_PCD_IRQHandler+0x5cc>)
 80041da:	4402      	add	r2, r0
 80041dc:	428a      	cmp	r2, r1
 80041de:	d803      	bhi.n	80041e8 <HAL_PCD_IRQHandler+0x568>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xEU << 10) & USB_OTG_GUSBCFG_TRDT);
 80041e0:	68da      	ldr	r2, [r3, #12]
 80041e2:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 80041e6:	e7f4      	b.n	80041d2 <HAL_PCD_IRQHandler+0x552>
        else if((hclk >= 16000000U) && (hclk < 17200000U))
 80041e8:	f5a0 0274 	sub.w	r2, r0, #15990784	; 0xf40000
 80041ec:	4918      	ldr	r1, [pc, #96]	; (8004250 <HAL_PCD_IRQHandler+0x5d0>)
 80041ee:	f5a2 5210 	sub.w	r2, r2, #9216	; 0x2400
 80041f2:	428a      	cmp	r2, r1
 80041f4:	d803      	bhi.n	80041fe <HAL_PCD_IRQHandler+0x57e>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xDU << 10) & USB_OTG_GUSBCFG_TRDT);
 80041f6:	68da      	ldr	r2, [r3, #12]
 80041f8:	f442 5250 	orr.w	r2, r2, #13312	; 0x3400
 80041fc:	e7e9      	b.n	80041d2 <HAL_PCD_IRQHandler+0x552>
        else if((hclk >= 17200000U) && (hclk < 18500000U))
 80041fe:	f1a0 7283 	sub.w	r2, r0, #17170432	; 0x1060000
 8004202:	4914      	ldr	r1, [pc, #80]	; (8004254 <HAL_PCD_IRQHandler+0x5d4>)
 8004204:	f5a2 42e7 	sub.w	r2, r2, #29568	; 0x7380
 8004208:	428a      	cmp	r2, r1
 800420a:	d203      	bcs.n	8004214 <HAL_PCD_IRQHandler+0x594>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xCU << 10) & USB_OTG_GUSBCFG_TRDT);
 800420c:	68da      	ldr	r2, [r3, #12]
 800420e:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8004212:	e7de      	b.n	80041d2 <HAL_PCD_IRQHandler+0x552>
        else if((hclk >= 18500000U) && (hclk < 20000000U))
 8004214:	4a10      	ldr	r2, [pc, #64]	; (8004258 <HAL_PCD_IRQHandler+0x5d8>)
 8004216:	4911      	ldr	r1, [pc, #68]	; (800425c <HAL_PCD_IRQHandler+0x5dc>)
 8004218:	4402      	add	r2, r0
 800421a:	428a      	cmp	r2, r1
 800421c:	d803      	bhi.n	8004226 <HAL_PCD_IRQHandler+0x5a6>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xBU << 10) & USB_OTG_GUSBCFG_TRDT);
 800421e:	68da      	ldr	r2, [r3, #12]
 8004220:	f442 5230 	orr.w	r2, r2, #11264	; 0x2c00
 8004224:	e7d5      	b.n	80041d2 <HAL_PCD_IRQHandler+0x552>
        else if((hclk >= 20000000U) && (hclk < 21800000U))
 8004226:	4a0e      	ldr	r2, [pc, #56]	; (8004260 <HAL_PCD_IRQHandler+0x5e0>)
 8004228:	490e      	ldr	r1, [pc, #56]	; (8004264 <HAL_PCD_IRQHandler+0x5e4>)
 800422a:	4402      	add	r2, r0
 800422c:	428a      	cmp	r2, r1
 800422e:	d21b      	bcs.n	8004268 <HAL_PCD_IRQHandler+0x5e8>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xAU << 10) & USB_OTG_GUSBCFG_TRDT);
 8004230:	68da      	ldr	r2, [r3, #12]
 8004232:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 8004236:	e7cc      	b.n	80041d2 <HAL_PCD_IRQHandler+0x552>
 8004238:	4f54300a 	.word	0x4f54300a
 800423c:	4f54310a 	.word	0x4f54310a
 8004240:	ff275340 	.word	0xff275340
 8004244:	000c34ff 	.word	0x000c34ff
 8004248:	ff1b1e40 	.word	0xff1b1e40
 800424c:	000f423f 	.word	0x000f423f
 8004250:	00124f7f 	.word	0x00124f7f
 8004254:	0013d620 	.word	0x0013d620
 8004258:	fee5b660 	.word	0xfee5b660
 800425c:	0016e35f 	.word	0x0016e35f
 8004260:	feced300 	.word	0xfeced300
 8004264:	001b7740 	.word	0x001b7740
        else if((hclk >= 21800000U) && (hclk < 24000000U))
 8004268:	4a18      	ldr	r2, [pc, #96]	; (80042cc <HAL_PCD_IRQHandler+0x64c>)
 800426a:	4919      	ldr	r1, [pc, #100]	; (80042d0 <HAL_PCD_IRQHandler+0x650>)
 800426c:	4402      	add	r2, r0
 800426e:	428a      	cmp	r2, r1
 8004270:	d203      	bcs.n	800427a <HAL_PCD_IRQHandler+0x5fa>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x9U << 10) & USB_OTG_GUSBCFG_TRDT);
 8004272:	68da      	ldr	r2, [r3, #12]
 8004274:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 8004278:	e7ab      	b.n	80041d2 <HAL_PCD_IRQHandler+0x552>
        else if((hclk >= 24000000U) && (hclk < 27700000U))
 800427a:	f1a0 72b7 	sub.w	r2, r0, #23986176	; 0x16e0000
 800427e:	4915      	ldr	r1, [pc, #84]	; (80042d4 <HAL_PCD_IRQHandler+0x654>)
 8004280:	f5a2 5258 	sub.w	r2, r2, #13824	; 0x3600
 8004284:	428a      	cmp	r2, r1
 8004286:	d203      	bcs.n	8004290 <HAL_PCD_IRQHandler+0x610>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x8U << 10) & USB_OTG_GUSBCFG_TRDT);
 8004288:	68da      	ldr	r2, [r3, #12]
 800428a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800428e:	e7a0      	b.n	80041d2 <HAL_PCD_IRQHandler+0x552>
        else if((hclk >= 27700000U) && (hclk < 32000000U))
 8004290:	4a11      	ldr	r2, [pc, #68]	; (80042d8 <HAL_PCD_IRQHandler+0x658>)
 8004292:	4912      	ldr	r1, [pc, #72]	; (80042dc <HAL_PCD_IRQHandler+0x65c>)
 8004294:	4402      	add	r2, r0
 8004296:	428a      	cmp	r2, r1
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x7U << 10) & USB_OTG_GUSBCFG_TRDT);
 8004298:	68da      	ldr	r2, [r3, #12]
 800429a:	bf34      	ite	cc
 800429c:	f442 52e0 	orrcc.w	r2, r2, #7168	; 0x1c00
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10) & USB_OTG_GUSBCFG_TRDT);
 80042a0:	f442 52c0 	orrcs.w	r2, r2, #6144	; 0x1800
 80042a4:	e795      	b.n	80041d2 <HAL_PCD_IRQHandler+0x552>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80042a6:	2b06      	cmp	r3, #6
 80042a8:	f47f adff 	bne.w	8003eaa <HAL_PCD_IRQHandler+0x22a>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80042ac:	2208      	movs	r2, #8
 80042ae:	f504 7170 	add.w	r1, r4, #960	; 0x3c0
 80042b2:	4638      	mov	r0, r7
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80042b4:	f3c8 180a 	ubfx	r8, r8, #4, #11
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80042b8:	f001 fd24 	bl	8005d04 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80042bc:	231c      	movs	r3, #28
 80042be:	fb03 4606 	mla	r6, r3, r6, r4
 80042c2:	f8d6 3214 	ldr.w	r3, [r6, #532]	; 0x214
 80042c6:	4443      	add	r3, r8
 80042c8:	e5ed      	b.n	8003ea6 <HAL_PCD_IRQHandler+0x226>
 80042ca:	bf00      	nop
 80042cc:	feb35bc0 	.word	0xfeb35bc0
 80042d0:	002191c0 	.word	0x002191c0
 80042d4:	00387520 	.word	0x00387520
 80042d8:	fe5954e0 	.word	0xfe5954e0
 80042dc:	00419ce0 	.word	0x00419ce0

080042e0 <HAL_PCD_SetAddress>:
{
 80042e0:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 80042e2:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
{
 80042e6:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80042e8:	2a01      	cmp	r2, #1
 80042ea:	d00b      	beq.n	8004304 <HAL_PCD_SetAddress+0x24>
 80042ec:	2201      	movs	r2, #1
  hpcd->USB_Address = address;
 80042ee:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
  __HAL_LOCK(hpcd);
 80042f2:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80042f6:	6800      	ldr	r0, [r0, #0]
 80042f8:	f001 fd66 	bl	8005dc8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80042fc:	2000      	movs	r0, #0
 80042fe:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8004302:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8004304:	2002      	movs	r0, #2
 8004306:	e7fc      	b.n	8004302 <HAL_PCD_SetAddress+0x22>

08004308 <HAL_PCD_EP_Open>:
{
 8004308:	b570      	push	{r4, r5, r6, lr}
 800430a:	f001 060f 	and.w	r6, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 800430e:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 8004312:	4605      	mov	r5, r0
 8004314:	f04f 001c 	mov.w	r0, #28
 8004318:	ebc6 04c6 	rsb	r4, r6, r6, lsl #3
 800431c:	ea4f 0484 	mov.w	r4, r4, lsl #2
  if ((ep_addr & 0x80U) == 0x80U)
 8004320:	d01f      	beq.n	8004362 <HAL_PCD_EP_Open+0x5a>
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8004322:	f104 013c 	add.w	r1, r4, #60	; 0x3c
    ep->is_in = 1U;
 8004326:	fb00 5006 	mla	r0, r0, r6, r5
 800432a:	2401      	movs	r4, #1
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 800432c:	4429      	add	r1, r5
    ep->is_in = 1U;
 800432e:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
  ep->maxpacket = ep_mps;
 8004332:	608a      	str	r2, [r1, #8]
  if (ep->is_in != 0U)
 8004334:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & 0xFU;
 8004336:	700e      	strb	r6, [r1, #0]
  ep->type = ep_type;
 8004338:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 800433a:	b102      	cbz	r2, 800433e <HAL_PCD_EP_Open+0x36>
    ep->tx_fifo_num = ep->num;
 800433c:	80ce      	strh	r6, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 800433e:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 8004340:	bf04      	itt	eq
 8004342:	2300      	moveq	r3, #0
 8004344:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8004346:	f895 33bc 	ldrb.w	r3, [r5, #956]	; 0x3bc
 800434a:	2b01      	cmp	r3, #1
 800434c:	d012      	beq.n	8004374 <HAL_PCD_EP_Open+0x6c>
 800434e:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004350:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(hpcd);
 8004352:	f885 33bc 	strb.w	r3, [r5, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004356:	f001 fb11 	bl	800597c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800435a:	2000      	movs	r0, #0
 800435c:	f885 03bc 	strb.w	r0, [r5, #956]	; 0x3bc
}
 8004360:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8004362:	f504 71fe 	add.w	r1, r4, #508	; 0x1fc
    ep->is_in = 0U;
 8004366:	fb00 5006 	mla	r0, r0, r6, r5
 800436a:	2400      	movs	r4, #0
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 800436c:	4429      	add	r1, r5
    ep->is_in = 0U;
 800436e:	f880 41fd 	strb.w	r4, [r0, #509]	; 0x1fd
 8004372:	e7de      	b.n	8004332 <HAL_PCD_EP_Open+0x2a>
  __HAL_LOCK(hpcd);
 8004374:	2002      	movs	r0, #2
 8004376:	e7f3      	b.n	8004360 <HAL_PCD_EP_Open+0x58>

08004378 <HAL_PCD_EP_Close>:
{
 8004378:	b510      	push	{r4, lr}
 800437a:	4604      	mov	r4, r0
 800437c:	f001 000f 	and.w	r0, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 8004380:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004384:	f04f 021c 	mov.w	r2, #28
 8004388:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 800438c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8004390:	d016      	beq.n	80043c0 <HAL_PCD_EP_Close+0x48>
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8004392:	f103 013c 	add.w	r1, r3, #60	; 0x3c
    ep->is_in = 1U;
 8004396:	fb02 4200 	mla	r2, r2, r0, r4
 800439a:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 800439c:	4421      	add	r1, r4
    ep->is_in = 1U;
 800439e:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  ep->num   = ep_addr & 0xFU;
 80043a2:	7008      	strb	r0, [r1, #0]
  __HAL_LOCK(hpcd);
 80043a4:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d012      	beq.n	80043d2 <HAL_PCD_EP_Close+0x5a>
 80043ac:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance , ep);
 80043ae:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80043b0:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance , ep);
 80043b4:	f001 fb20 	bl	80059f8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80043b8:	2000      	movs	r0, #0
 80043ba:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 80043be:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 80043c0:	f503 71fe 	add.w	r1, r3, #508	; 0x1fc
    ep->is_in = 0U;
 80043c4:	fb02 4200 	mla	r2, r2, r0, r4
 80043c8:	2300      	movs	r3, #0
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 80043ca:	4421      	add	r1, r4
    ep->is_in = 0U;
 80043cc:	f882 31fd 	strb.w	r3, [r2, #509]	; 0x1fd
 80043d0:	e7e7      	b.n	80043a2 <HAL_PCD_EP_Close+0x2a>
  __HAL_LOCK(hpcd);
 80043d2:	2002      	movs	r0, #2
 80043d4:	e7f3      	b.n	80043be <HAL_PCD_EP_Close+0x46>

080043d6 <HAL_PCD_EP_Receive>:
{
 80043d6:	b538      	push	{r3, r4, r5, lr}
 80043d8:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 80043dc:	241c      	movs	r4, #28
 80043de:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;
 80043e2:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 80043e6:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
  ep->xfer_len = len;
 80043ea:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->xfer_count = 0U;
 80043ee:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 80043f0:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
  ep->xfer_count = 0U;
 80043f4:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
  ep->is_in = 0U;
 80043f8:	f884 31fd 	strb.w	r3, [r4, #509]	; 0x1fd
  ep->num = ep_addr & 0xFU;
 80043fc:	f884 51fc 	strb.w	r5, [r4, #508]	; 0x1fc
  if (hpcd->Init.dma_enable == 1U)
 8004400:	6903      	ldr	r3, [r0, #16]
 8004402:	6800      	ldr	r0, [r0, #0]
 8004404:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 8004406:	bf08      	it	eq
 8004408:	f8c4 220c 	streq.w	r2, [r4, #524]	; 0x20c
  if ((ep_addr & 0xFU) == 0U)
 800440c:	b2da      	uxtb	r2, r3
 800440e:	b91d      	cbnz	r5, 8004418 <HAL_PCD_EP_Receive+0x42>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004410:	f001 fb22 	bl	8005a58 <USB_EP0StartXfer>
}
 8004414:	2000      	movs	r0, #0
 8004416:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004418:	f001 fba8 	bl	8005b6c <USB_EPStartXfer>
 800441c:	e7fa      	b.n	8004414 <HAL_PCD_EP_Receive+0x3e>

0800441e <HAL_PCD_EP_GetRxCount>:
  return (uint16_t)hpcd->OUT_ep[ep_addr & 0xFU].xfer_count;
 800441e:	f001 010f 	and.w	r1, r1, #15
 8004422:	231c      	movs	r3, #28
 8004424:	fb03 0001 	mla	r0, r3, r1, r0
}
 8004428:	f8b0 0214 	ldrh.w	r0, [r0, #532]	; 0x214
 800442c:	4770      	bx	lr

0800442e <HAL_PCD_EP_Transmit>:
{
 800442e:	b538      	push	{r3, r4, r5, lr}
 8004430:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8004434:	241c      	movs	r4, #28
 8004436:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;
 800443a:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->IN_ep[ep_addr & 0xFU];
 800443e:	313c      	adds	r1, #60	; 0x3c
  ep->xfer_len = len;
 8004440:	6523      	str	r3, [r4, #80]	; 0x50
  ep->xfer_count = 0U;
 8004442:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 8004444:	64a2      	str	r2, [r4, #72]	; 0x48
  ep->xfer_count = 0U;
 8004446:	6563      	str	r3, [r4, #84]	; 0x54
  ep->is_in = 1U;
 8004448:	2301      	movs	r3, #1
  ep->num = ep_addr & 0xFU;
 800444a:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  ep->is_in = 1U;
 800444e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (hpcd->Init.dma_enable == 1U)
 8004452:	6903      	ldr	r3, [r0, #16]
 8004454:	6800      	ldr	r0, [r0, #0]
 8004456:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 8004458:	bf08      	it	eq
 800445a:	64e2      	streq	r2, [r4, #76]	; 0x4c
  if ((ep_addr & 0xFU) == 0U)
 800445c:	b2da      	uxtb	r2, r3
 800445e:	b91d      	cbnz	r5, 8004468 <HAL_PCD_EP_Transmit+0x3a>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004460:	f001 fafa 	bl	8005a58 <USB_EP0StartXfer>
}
 8004464:	2000      	movs	r0, #0
 8004466:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004468:	f001 fb80 	bl	8005b6c <USB_EPStartXfer>
 800446c:	e7fa      	b.n	8004464 <HAL_PCD_EP_Transmit+0x36>

0800446e <HAL_PCD_EP_SetStall>:
{
 800446e:	b538      	push	{r3, r4, r5, lr}
 8004470:	f001 050f 	and.w	r5, r1, #15
  if (((uint32_t)ep_addr & 0xFU) > hpcd->Init.dev_endpoints)
 8004474:	6843      	ldr	r3, [r0, #4]
{
 8004476:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0xFU) > hpcd->Init.dev_endpoints)
 8004478:	429d      	cmp	r5, r3
 800447a:	d82c      	bhi.n	80044d6 <HAL_PCD_EP_SetStall+0x68>
  if ((0x80U & ep_addr) == 0x80U)
 800447c:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004480:	f04f 001c 	mov.w	r0, #28
 8004484:	d01e      	beq.n	80044c4 <HAL_PCD_EP_SetStall+0x56>
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8004486:	fb00 4105 	mla	r1, r0, r5, r4
    ep->is_in = 1U;
 800448a:	2301      	movs	r3, #1
 800448c:	fb00 4205 	mla	r2, r0, r5, r4
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8004490:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 8004492:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  ep->is_stall = 1U;
 8004496:	2301      	movs	r3, #1
  ep->num = ep_addr & 0xFU;
 8004498:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 800449a:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 800449c:	f894 23bc 	ldrb.w	r2, [r4, #956]	; 0x3bc
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d01a      	beq.n	80044da <HAL_PCD_EP_SetStall+0x6c>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80044a4:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80044a6:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80044aa:	f001 fc39 	bl	8005d20 <USB_EPSetStall>
  if((ep_addr & 0xFU) == 0U)
 80044ae:	b92d      	cbnz	r5, 80044bc <HAL_PCD_EP_SetStall+0x4e>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80044b0:	f504 7270 	add.w	r2, r4, #960	; 0x3c0
 80044b4:	7c21      	ldrb	r1, [r4, #16]
 80044b6:	6820      	ldr	r0, [r4, #0]
 80044b8:	f001 fcfc 	bl	8005eb4 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 80044bc:	2000      	movs	r0, #0
 80044be:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 80044c2:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 80044c4:	fb00 4301 	mla	r3, r0, r1, r4
    ep->is_in = 0U;
 80044c8:	461a      	mov	r2, r3
    ep = &hpcd->OUT_ep[ep_addr];
 80044ca:	f503 71fe 	add.w	r1, r3, #508	; 0x1fc
    ep->is_in = 0U;
 80044ce:	2300      	movs	r3, #0
 80044d0:	f882 31fd 	strb.w	r3, [r2, #509]	; 0x1fd
 80044d4:	e7df      	b.n	8004496 <HAL_PCD_EP_SetStall+0x28>
    return HAL_ERROR;
 80044d6:	2001      	movs	r0, #1
 80044d8:	e7f3      	b.n	80044c2 <HAL_PCD_EP_SetStall+0x54>
  __HAL_LOCK(hpcd);
 80044da:	2002      	movs	r0, #2
 80044dc:	e7f1      	b.n	80044c2 <HAL_PCD_EP_SetStall+0x54>

080044de <HAL_PCD_EP_ClrStall>:
{
 80044de:	b538      	push	{r3, r4, r5, lr}
 80044e0:	f001 020f 	and.w	r2, r1, #15
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80044e4:	6843      	ldr	r3, [r0, #4]
{
 80044e6:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d82a      	bhi.n	8004542 <HAL_PCD_EP_ClrStall+0x64>
  if ((0x80U & ep_addr) == 0x80U)
 80044ec:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
 80044f0:	f011 0f80 	tst.w	r1, #128	; 0x80
 80044f4:	f04f 001c 	mov.w	r0, #28
 80044f8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80044fc:	d018      	beq.n	8004530 <HAL_PCD_EP_ClrStall+0x52>
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 80044fe:	f103 013c 	add.w	r1, r3, #60	; 0x3c
    ep->is_in = 1U;
 8004502:	fb00 4002 	mla	r0, r0, r2, r4
 8004506:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8004508:	4421      	add	r1, r4
    ep->is_in = 1U;
 800450a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  ep->is_stall = 0U;
 800450e:	2500      	movs	r5, #0
  ep->num = ep_addr & 0xFU;
 8004510:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 8004512:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8004514:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8004518:	2b01      	cmp	r3, #1
 800451a:	d014      	beq.n	8004546 <HAL_PCD_EP_ClrStall+0x68>
 800451c:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800451e:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8004520:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004524:	f001 fc27 	bl	8005d76 <USB_EPClearStall>
  return HAL_OK;
 8004528:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 800452a:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
}
 800452e:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr &0xFU];
 8004530:	f503 71fe 	add.w	r1, r3, #508	; 0x1fc
    ep->is_in = 0U;
 8004534:	fb00 4002 	mla	r0, r0, r2, r4
 8004538:	2300      	movs	r3, #0
    ep = &hpcd->OUT_ep[ep_addr &0xFU];
 800453a:	4421      	add	r1, r4
    ep->is_in = 0U;
 800453c:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
 8004540:	e7e5      	b.n	800450e <HAL_PCD_EP_ClrStall+0x30>
    return HAL_ERROR;
 8004542:	2001      	movs	r0, #1
 8004544:	e7f3      	b.n	800452e <HAL_PCD_EP_ClrStall+0x50>
  __HAL_LOCK(hpcd);
 8004546:	2002      	movs	r0, #2
 8004548:	e7f1      	b.n	800452e <HAL_PCD_EP_ClrStall+0x50>

0800454a <HAL_PCD_EP_Flush>:
{
 800454a:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 800454c:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
{
 8004550:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8004552:	2b01      	cmp	r3, #1
 8004554:	d010      	beq.n	8004578 <HAL_PCD_EP_Flush+0x2e>
 8004556:	2301      	movs	r3, #1
 8004558:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  if ((ep_addr & 0x80U) == 0x80U)
 800455c:	060b      	lsls	r3, r1, #24
 800455e:	6800      	ldr	r0, [r0, #0]
 8004560:	d507      	bpl.n	8004572 <HAL_PCD_EP_Flush+0x28>
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & 0xFU);
 8004562:	f001 010f 	and.w	r1, r1, #15
 8004566:	f001 f919 	bl	800579c <USB_FlushTxFifo>
  __HAL_UNLOCK(hpcd);
 800456a:	2000      	movs	r0, #0
 800456c:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8004570:	bd10      	pop	{r4, pc}
    (void)USB_FlushRxFifo(hpcd->Instance);
 8004572:	f001 f925 	bl	80057c0 <USB_FlushRxFifo>
 8004576:	e7f8      	b.n	800456a <HAL_PCD_EP_Flush+0x20>
  __HAL_LOCK(hpcd);
 8004578:	2002      	movs	r0, #2
 800457a:	e7f9      	b.n	8004570 <HAL_PCD_EP_Flush+0x26>

0800457c <HAL_PCDEx_SetTxFiFo>:
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800457c:	6800      	ldr	r0, [r0, #0]
 800457e:	0412      	lsls	r2, r2, #16
{
 8004580:	b570      	push	{r4, r5, r6, lr}
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004582:	6a44      	ldr	r4, [r0, #36]	; 0x24

  if(fifo == 0U)
 8004584:	b919      	cbnz	r1, 800458e <HAL_PCDEx_SetTxFiFo+0x12>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004586:	4322      	orrs	r2, r4
 8004588:	6282      	str	r2, [r0, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 800458a:	2000      	movs	r0, #0
 800458c:	bd70      	pop	{r4, r5, r6, pc}
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800458e:	6a83      	ldr	r3, [r0, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 8004590:	1e4d      	subs	r5, r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004592:	eb04 4413 	add.w	r4, r4, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8004596:	2300      	movs	r3, #0
 8004598:	1c5e      	adds	r6, r3, #1
 800459a:	b2db      	uxtb	r3, r3
 800459c:	429d      	cmp	r5, r3
 800459e:	d805      	bhi.n	80045ac <HAL_PCDEx_SetTxFiFo+0x30>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80045a0:	313f      	adds	r1, #63	; 0x3f
 80045a2:	4322      	orrs	r2, r4
 80045a4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 80045a8:	6042      	str	r2, [r0, #4]
 80045aa:	e7ee      	b.n	800458a <HAL_PCDEx_SetTxFiFo+0xe>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80045ac:	3340      	adds	r3, #64	; 0x40
 80045ae:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80045b8:	4633      	mov	r3, r6
 80045ba:	e7ed      	b.n	8004598 <HAL_PCDEx_SetTxFiFo+0x1c>

080045bc <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 80045bc:	6803      	ldr	r3, [r0, #0]

  return HAL_OK;
}
 80045be:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 80045c0:	6259      	str	r1, [r3, #36]	; 0x24
}
 80045c2:	4770      	bx	lr

080045c4 <HAL_PCDEx_ActivateLPM>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045c4:	6802      	ldr	r2, [r0, #0]

  hpcd->lpm_active = 1U;
  hpcd->LPM_State = LPM_L0;
 80045c6:	2100      	movs	r1, #0
  hpcd->lpm_active = 1U;
 80045c8:	2301      	movs	r3, #1
  hpcd->LPM_State = LPM_L0;
 80045ca:	f880 13f0 	strb.w	r1, [r0, #1008]	; 0x3f0
  hpcd->lpm_active = 1U;
 80045ce:	f8c0 33f8 	str.w	r3, [r0, #1016]	; 0x3f8
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);

  return HAL_OK;
}
 80045d2:	4608      	mov	r0, r1
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80045d4:	6993      	ldr	r3, [r2, #24]
 80045d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80045da:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80045dc:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80045de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045e2:	f043 0303 	orr.w	r3, r3, #3
 80045e6:	6553      	str	r3, [r2, #84]	; 0x54
}
 80045e8:	4770      	bx	lr

080045ea <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80045ea:	4770      	bx	lr

080045ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045ec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80045f0:	4604      	mov	r4, r0
 80045f2:	b918      	cbnz	r0, 80045fc <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80045f4:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80045f6:	b002      	add	sp, #8
 80045f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045fc:	6803      	ldr	r3, [r0, #0]
 80045fe:	07d8      	lsls	r0, r3, #31
 8004600:	d410      	bmi.n	8004624 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004602:	6823      	ldr	r3, [r4, #0]
 8004604:	0799      	lsls	r1, r3, #30
 8004606:	d461      	bmi.n	80046cc <HAL_RCC_OscConfig+0xe0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004608:	6823      	ldr	r3, [r4, #0]
 800460a:	0719      	lsls	r1, r3, #28
 800460c:	f100 80a8 	bmi.w	8004760 <HAL_RCC_OscConfig+0x174>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004610:	6823      	ldr	r3, [r4, #0]
 8004612:	075a      	lsls	r2, r3, #29
 8004614:	f100 80c9 	bmi.w	80047aa <HAL_RCC_OscConfig+0x1be>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004618:	69a2      	ldr	r2, [r4, #24]
 800461a:	2a00      	cmp	r2, #0
 800461c:	f040 8132 	bne.w	8004884 <HAL_RCC_OscConfig+0x298>
  return HAL_OK;
 8004620:	2000      	movs	r0, #0
 8004622:	e7e8      	b.n	80045f6 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004624:	4b95      	ldr	r3, [pc, #596]	; (800487c <HAL_RCC_OscConfig+0x290>)
 8004626:	689a      	ldr	r2, [r3, #8]
 8004628:	f002 020c 	and.w	r2, r2, #12
 800462c:	2a04      	cmp	r2, #4
 800462e:	d007      	beq.n	8004640 <HAL_RCC_OscConfig+0x54>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004630:	689a      	ldr	r2, [r3, #8]
 8004632:	f002 020c 	and.w	r2, r2, #12
 8004636:	2a08      	cmp	r2, #8
 8004638:	d10a      	bne.n	8004650 <HAL_RCC_OscConfig+0x64>
 800463a:	685a      	ldr	r2, [r3, #4]
 800463c:	0252      	lsls	r2, r2, #9
 800463e:	d507      	bpl.n	8004650 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004640:	4b8e      	ldr	r3, [pc, #568]	; (800487c <HAL_RCC_OscConfig+0x290>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	039b      	lsls	r3, r3, #14
 8004646:	d5dc      	bpl.n	8004602 <HAL_RCC_OscConfig+0x16>
 8004648:	6863      	ldr	r3, [r4, #4]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d1d9      	bne.n	8004602 <HAL_RCC_OscConfig+0x16>
 800464e:	e7d1      	b.n	80045f4 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004650:	6862      	ldr	r2, [r4, #4]
 8004652:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8004656:	d111      	bne.n	800467c <HAL_RCC_OscConfig+0x90>
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800465e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004660:	f7fe fb2e 	bl	8002cc0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004664:	4e85      	ldr	r6, [pc, #532]	; (800487c <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 8004666:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004668:	6833      	ldr	r3, [r6, #0]
 800466a:	039f      	lsls	r7, r3, #14
 800466c:	d4c9      	bmi.n	8004602 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800466e:	f7fe fb27 	bl	8002cc0 <HAL_GetTick>
 8004672:	1b40      	subs	r0, r0, r5
 8004674:	2864      	cmp	r0, #100	; 0x64
 8004676:	d9f7      	bls.n	8004668 <HAL_RCC_OscConfig+0x7c>
            return HAL_TIMEOUT;
 8004678:	2003      	movs	r0, #3
 800467a:	e7bc      	b.n	80045f6 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800467c:	4d7f      	ldr	r5, [pc, #508]	; (800487c <HAL_RCC_OscConfig+0x290>)
 800467e:	682b      	ldr	r3, [r5, #0]
 8004680:	b992      	cbnz	r2, 80046a8 <HAL_RCC_OscConfig+0xbc>
 8004682:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004686:	602b      	str	r3, [r5, #0]
 8004688:	682b      	ldr	r3, [r5, #0]
 800468a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800468e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004690:	f7fe fb16 	bl	8002cc0 <HAL_GetTick>
 8004694:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004696:	682b      	ldr	r3, [r5, #0]
 8004698:	0398      	lsls	r0, r3, #14
 800469a:	d5b2      	bpl.n	8004602 <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800469c:	f7fe fb10 	bl	8002cc0 <HAL_GetTick>
 80046a0:	1b80      	subs	r0, r0, r6
 80046a2:	2864      	cmp	r0, #100	; 0x64
 80046a4:	d9f7      	bls.n	8004696 <HAL_RCC_OscConfig+0xaa>
 80046a6:	e7e7      	b.n	8004678 <HAL_RCC_OscConfig+0x8c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046a8:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 80046ac:	d107      	bne.n	80046be <HAL_RCC_OscConfig+0xd2>
 80046ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046b2:	602b      	str	r3, [r5, #0]
 80046b4:	682b      	ldr	r3, [r5, #0]
 80046b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046ba:	602b      	str	r3, [r5, #0]
 80046bc:	e7d0      	b.n	8004660 <HAL_RCC_OscConfig+0x74>
 80046be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046c2:	602b      	str	r3, [r5, #0]
 80046c4:	682b      	ldr	r3, [r5, #0]
 80046c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046ca:	e7f6      	b.n	80046ba <HAL_RCC_OscConfig+0xce>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80046cc:	4b6b      	ldr	r3, [pc, #428]	; (800487c <HAL_RCC_OscConfig+0x290>)
 80046ce:	689a      	ldr	r2, [r3, #8]
 80046d0:	f012 0f0c 	tst.w	r2, #12
 80046d4:	d007      	beq.n	80046e6 <HAL_RCC_OscConfig+0xfa>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046d6:	689a      	ldr	r2, [r3, #8]
 80046d8:	f002 020c 	and.w	r2, r2, #12
 80046dc:	2a08      	cmp	r2, #8
 80046de:	d112      	bne.n	8004706 <HAL_RCC_OscConfig+0x11a>
 80046e0:	685a      	ldr	r2, [r3, #4]
 80046e2:	0251      	lsls	r1, r2, #9
 80046e4:	d40f      	bmi.n	8004706 <HAL_RCC_OscConfig+0x11a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046e6:	4b65      	ldr	r3, [pc, #404]	; (800487c <HAL_RCC_OscConfig+0x290>)
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	0792      	lsls	r2, r2, #30
 80046ec:	d503      	bpl.n	80046f6 <HAL_RCC_OscConfig+0x10a>
 80046ee:	68e2      	ldr	r2, [r4, #12]
 80046f0:	2a01      	cmp	r2, #1
 80046f2:	f47f af7f 	bne.w	80045f4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	6921      	ldr	r1, [r4, #16]
 80046fa:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80046fe:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8004702:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004704:	e780      	b.n	8004608 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004706:	68e2      	ldr	r2, [r4, #12]
 8004708:	b1c2      	cbz	r2, 800473c <HAL_RCC_OscConfig+0x150>
        __HAL_RCC_HSI_ENABLE();
 800470a:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800470c:	4d5b      	ldr	r5, [pc, #364]	; (800487c <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_ENABLE();
 800470e:	f042 0201 	orr.w	r2, r2, #1
 8004712:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004714:	f7fe fad4 	bl	8002cc0 <HAL_GetTick>
 8004718:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800471a:	682b      	ldr	r3, [r5, #0]
 800471c:	079f      	lsls	r7, r3, #30
 800471e:	d507      	bpl.n	8004730 <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004720:	682b      	ldr	r3, [r5, #0]
 8004722:	6922      	ldr	r2, [r4, #16]
 8004724:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004728:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800472c:	602b      	str	r3, [r5, #0]
 800472e:	e76b      	b.n	8004608 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004730:	f7fe fac6 	bl	8002cc0 <HAL_GetTick>
 8004734:	1b80      	subs	r0, r0, r6
 8004736:	2802      	cmp	r0, #2
 8004738:	d9ef      	bls.n	800471a <HAL_RCC_OscConfig+0x12e>
 800473a:	e79d      	b.n	8004678 <HAL_RCC_OscConfig+0x8c>
        __HAL_RCC_HSI_DISABLE();
 800473c:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800473e:	4e4f      	ldr	r6, [pc, #316]	; (800487c <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_DISABLE();
 8004740:	f022 0201 	bic.w	r2, r2, #1
 8004744:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004746:	f7fe fabb 	bl	8002cc0 <HAL_GetTick>
 800474a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800474c:	6833      	ldr	r3, [r6, #0]
 800474e:	0798      	lsls	r0, r3, #30
 8004750:	f57f af5a 	bpl.w	8004608 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004754:	f7fe fab4 	bl	8002cc0 <HAL_GetTick>
 8004758:	1b40      	subs	r0, r0, r5
 800475a:	2802      	cmp	r0, #2
 800475c:	d9f6      	bls.n	800474c <HAL_RCC_OscConfig+0x160>
 800475e:	e78b      	b.n	8004678 <HAL_RCC_OscConfig+0x8c>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004760:	6963      	ldr	r3, [r4, #20]
 8004762:	4d46      	ldr	r5, [pc, #280]	; (800487c <HAL_RCC_OscConfig+0x290>)
 8004764:	b183      	cbz	r3, 8004788 <HAL_RCC_OscConfig+0x19c>
      __HAL_RCC_LSI_ENABLE();
 8004766:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004768:	f043 0301 	orr.w	r3, r3, #1
 800476c:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800476e:	f7fe faa7 	bl	8002cc0 <HAL_GetTick>
 8004772:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004774:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004776:	079b      	lsls	r3, r3, #30
 8004778:	f53f af4a 	bmi.w	8004610 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800477c:	f7fe faa0 	bl	8002cc0 <HAL_GetTick>
 8004780:	1b80      	subs	r0, r0, r6
 8004782:	2802      	cmp	r0, #2
 8004784:	d9f6      	bls.n	8004774 <HAL_RCC_OscConfig+0x188>
 8004786:	e777      	b.n	8004678 <HAL_RCC_OscConfig+0x8c>
      __HAL_RCC_LSI_DISABLE();
 8004788:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800478a:	f023 0301 	bic.w	r3, r3, #1
 800478e:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8004790:	f7fe fa96 	bl	8002cc0 <HAL_GetTick>
 8004794:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004796:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004798:	079f      	lsls	r7, r3, #30
 800479a:	f57f af39 	bpl.w	8004610 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800479e:	f7fe fa8f 	bl	8002cc0 <HAL_GetTick>
 80047a2:	1b80      	subs	r0, r0, r6
 80047a4:	2802      	cmp	r0, #2
 80047a6:	d9f6      	bls.n	8004796 <HAL_RCC_OscConfig+0x1aa>
 80047a8:	e766      	b.n	8004678 <HAL_RCC_OscConfig+0x8c>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047aa:	4b34      	ldr	r3, [pc, #208]	; (800487c <HAL_RCC_OscConfig+0x290>)
 80047ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047ae:	00d0      	lsls	r0, r2, #3
 80047b0:	d427      	bmi.n	8004802 <HAL_RCC_OscConfig+0x216>
      __HAL_RCC_PWR_CLK_ENABLE();
 80047b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 80047b4:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80047b6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80047ba:	641a      	str	r2, [r3, #64]	; 0x40
 80047bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047c2:	9301      	str	r3, [sp, #4]
 80047c4:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047c6:	4d2e      	ldr	r5, [pc, #184]	; (8004880 <HAL_RCC_OscConfig+0x294>)
 80047c8:	682b      	ldr	r3, [r5, #0]
 80047ca:	05d9      	lsls	r1, r3, #23
 80047cc:	d51b      	bpl.n	8004806 <HAL_RCC_OscConfig+0x21a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047ce:	68a3      	ldr	r3, [r4, #8]
 80047d0:	4d2a      	ldr	r5, [pc, #168]	; (800487c <HAL_RCC_OscConfig+0x290>)
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d127      	bne.n	8004826 <HAL_RCC_OscConfig+0x23a>
 80047d6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80047d8:	f043 0301 	orr.w	r3, r3, #1
 80047dc:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047de:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80047e2:	f7fe fa6d 	bl	8002cc0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047e6:	4e25      	ldr	r6, [pc, #148]	; (800487c <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 80047e8:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047ea:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80047ec:	079b      	lsls	r3, r3, #30
 80047ee:	d53f      	bpl.n	8004870 <HAL_RCC_OscConfig+0x284>
    if(pwrclkchanged == SET)
 80047f0:	2f00      	cmp	r7, #0
 80047f2:	f43f af11 	beq.w	8004618 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80047f6:	4a21      	ldr	r2, [pc, #132]	; (800487c <HAL_RCC_OscConfig+0x290>)
 80047f8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80047fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047fe:	6413      	str	r3, [r2, #64]	; 0x40
 8004800:	e70a      	b.n	8004618 <HAL_RCC_OscConfig+0x2c>
  FlagStatus pwrclkchanged = RESET;
 8004802:	2700      	movs	r7, #0
 8004804:	e7df      	b.n	80047c6 <HAL_RCC_OscConfig+0x1da>
      PWR->CR1 |= PWR_CR1_DBP;
 8004806:	682b      	ldr	r3, [r5, #0]
 8004808:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800480c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800480e:	f7fe fa57 	bl	8002cc0 <HAL_GetTick>
 8004812:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004814:	682b      	ldr	r3, [r5, #0]
 8004816:	05da      	lsls	r2, r3, #23
 8004818:	d4d9      	bmi.n	80047ce <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800481a:	f7fe fa51 	bl	8002cc0 <HAL_GetTick>
 800481e:	1b80      	subs	r0, r0, r6
 8004820:	2864      	cmp	r0, #100	; 0x64
 8004822:	d9f7      	bls.n	8004814 <HAL_RCC_OscConfig+0x228>
 8004824:	e728      	b.n	8004678 <HAL_RCC_OscConfig+0x8c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004826:	b9ab      	cbnz	r3, 8004854 <HAL_RCC_OscConfig+0x268>
 8004828:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800482a:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800482e:	f023 0301 	bic.w	r3, r3, #1
 8004832:	672b      	str	r3, [r5, #112]	; 0x70
 8004834:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004836:	f023 0304 	bic.w	r3, r3, #4
 800483a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800483c:	f7fe fa40 	bl	8002cc0 <HAL_GetTick>
 8004840:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004842:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004844:	0798      	lsls	r0, r3, #30
 8004846:	d5d3      	bpl.n	80047f0 <HAL_RCC_OscConfig+0x204>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004848:	f7fe fa3a 	bl	8002cc0 <HAL_GetTick>
 800484c:	1b80      	subs	r0, r0, r6
 800484e:	4540      	cmp	r0, r8
 8004850:	d9f7      	bls.n	8004842 <HAL_RCC_OscConfig+0x256>
 8004852:	e711      	b.n	8004678 <HAL_RCC_OscConfig+0x8c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004854:	2b05      	cmp	r3, #5
 8004856:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004858:	d103      	bne.n	8004862 <HAL_RCC_OscConfig+0x276>
 800485a:	f043 0304 	orr.w	r3, r3, #4
 800485e:	672b      	str	r3, [r5, #112]	; 0x70
 8004860:	e7b9      	b.n	80047d6 <HAL_RCC_OscConfig+0x1ea>
 8004862:	f023 0301 	bic.w	r3, r3, #1
 8004866:	672b      	str	r3, [r5, #112]	; 0x70
 8004868:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800486a:	f023 0304 	bic.w	r3, r3, #4
 800486e:	e7b5      	b.n	80047dc <HAL_RCC_OscConfig+0x1f0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004870:	f7fe fa26 	bl	8002cc0 <HAL_GetTick>
 8004874:	1b40      	subs	r0, r0, r5
 8004876:	4540      	cmp	r0, r8
 8004878:	d9b7      	bls.n	80047ea <HAL_RCC_OscConfig+0x1fe>
 800487a:	e6fd      	b.n	8004678 <HAL_RCC_OscConfig+0x8c>
 800487c:	40023800 	.word	0x40023800
 8004880:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004884:	4d24      	ldr	r5, [pc, #144]	; (8004918 <HAL_RCC_OscConfig+0x32c>)
 8004886:	68ab      	ldr	r3, [r5, #8]
 8004888:	f003 030c 	and.w	r3, r3, #12
 800488c:	2b08      	cmp	r3, #8
 800488e:	f43f aeb1 	beq.w	80045f4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 8004892:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004894:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8004896:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800489a:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800489c:	d12f      	bne.n	80048fe <HAL_RCC_OscConfig+0x312>
        tickstart = HAL_GetTick();
 800489e:	f7fe fa0f 	bl	8002cc0 <HAL_GetTick>
 80048a2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048a4:	682b      	ldr	r3, [r5, #0]
 80048a6:	0199      	lsls	r1, r3, #6
 80048a8:	d423      	bmi.n	80048f2 <HAL_RCC_OscConfig+0x306>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048aa:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80048b2:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80048b6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80048b8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80048bc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80048be:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80048c2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80048c4:	0852      	lsrs	r2, r2, #1
 80048c6:	3a01      	subs	r2, #1
 80048c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80048cc:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80048ce:	682b      	ldr	r3, [r5, #0]
 80048d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048d4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80048d6:	f7fe f9f3 	bl	8002cc0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048da:	4d0f      	ldr	r5, [pc, #60]	; (8004918 <HAL_RCC_OscConfig+0x32c>)
        tickstart = HAL_GetTick();
 80048dc:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048de:	682b      	ldr	r3, [r5, #0]
 80048e0:	019a      	lsls	r2, r3, #6
 80048e2:	f53f ae9d 	bmi.w	8004620 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048e6:	f7fe f9eb 	bl	8002cc0 <HAL_GetTick>
 80048ea:	1b00      	subs	r0, r0, r4
 80048ec:	2802      	cmp	r0, #2
 80048ee:	d9f6      	bls.n	80048de <HAL_RCC_OscConfig+0x2f2>
 80048f0:	e6c2      	b.n	8004678 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048f2:	f7fe f9e5 	bl	8002cc0 <HAL_GetTick>
 80048f6:	1b80      	subs	r0, r0, r6
 80048f8:	2802      	cmp	r0, #2
 80048fa:	d9d3      	bls.n	80048a4 <HAL_RCC_OscConfig+0x2b8>
 80048fc:	e6bc      	b.n	8004678 <HAL_RCC_OscConfig+0x8c>
        tickstart = HAL_GetTick();
 80048fe:	f7fe f9df 	bl	8002cc0 <HAL_GetTick>
 8004902:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004904:	682b      	ldr	r3, [r5, #0]
 8004906:	019b      	lsls	r3, r3, #6
 8004908:	f57f ae8a 	bpl.w	8004620 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800490c:	f7fe f9d8 	bl	8002cc0 <HAL_GetTick>
 8004910:	1b00      	subs	r0, r0, r4
 8004912:	2802      	cmp	r0, #2
 8004914:	d9f6      	bls.n	8004904 <HAL_RCC_OscConfig+0x318>
 8004916:	e6af      	b.n	8004678 <HAL_RCC_OscConfig+0x8c>
 8004918:	40023800 	.word	0x40023800

0800491c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800491c:	4913      	ldr	r1, [pc, #76]	; (800496c <HAL_RCC_GetSysClockFreq+0x50>)
{
 800491e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004920:	688b      	ldr	r3, [r1, #8]
 8004922:	f003 030c 	and.w	r3, r3, #12
 8004926:	2b04      	cmp	r3, #4
 8004928:	d01b      	beq.n	8004962 <HAL_RCC_GetSysClockFreq+0x46>
 800492a:	2b08      	cmp	r3, #8
 800492c:	d11b      	bne.n	8004966 <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800492e:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004930:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004932:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004934:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004938:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800493c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8004940:	bf1a      	itte	ne
 8004942:	480b      	ldrne	r0, [pc, #44]	; (8004970 <HAL_RCC_GetSysClockFreq+0x54>)
 8004944:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004946:	480b      	ldreq	r0, [pc, #44]	; (8004974 <HAL_RCC_GetSysClockFreq+0x58>)
 8004948:	fba1 0100 	umull	r0, r1, r1, r0
 800494c:	f7fb fc74 	bl	8000238 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8004950:	4b06      	ldr	r3, [pc, #24]	; (800496c <HAL_RCC_GetSysClockFreq+0x50>)
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8004958:	3301      	adds	r3, #1
 800495a:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 800495c:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8004960:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004962:	4803      	ldr	r0, [pc, #12]	; (8004970 <HAL_RCC_GetSysClockFreq+0x54>)
 8004964:	e7fc      	b.n	8004960 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
 8004966:	4803      	ldr	r0, [pc, #12]	; (8004974 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8004968:	e7fa      	b.n	8004960 <HAL_RCC_GetSysClockFreq+0x44>
 800496a:	bf00      	nop
 800496c:	40023800 	.word	0x40023800
 8004970:	017d7840 	.word	0x017d7840
 8004974:	00f42400 	.word	0x00f42400

08004978 <HAL_RCC_ClockConfig>:
{
 8004978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800497c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800497e:	4604      	mov	r4, r0
 8004980:	b910      	cbnz	r0, 8004988 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8004982:	2001      	movs	r0, #1
}
 8004984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004988:	4a45      	ldr	r2, [pc, #276]	; (8004aa0 <HAL_RCC_ClockConfig+0x128>)
 800498a:	6813      	ldr	r3, [r2, #0]
 800498c:	f003 030f 	and.w	r3, r3, #15
 8004990:	428b      	cmp	r3, r1
 8004992:	d327      	bcc.n	80049e4 <HAL_RCC_ClockConfig+0x6c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004994:	6822      	ldr	r2, [r4, #0]
 8004996:	0797      	lsls	r7, r2, #30
 8004998:	d42f      	bmi.n	80049fa <HAL_RCC_ClockConfig+0x82>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800499a:	07d0      	lsls	r0, r2, #31
 800499c:	d443      	bmi.n	8004a26 <HAL_RCC_ClockConfig+0xae>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800499e:	4a40      	ldr	r2, [pc, #256]	; (8004aa0 <HAL_RCC_ClockConfig+0x128>)
 80049a0:	6813      	ldr	r3, [r2, #0]
 80049a2:	f003 030f 	and.w	r3, r3, #15
 80049a6:	42ab      	cmp	r3, r5
 80049a8:	d866      	bhi.n	8004a78 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049aa:	6822      	ldr	r2, [r4, #0]
 80049ac:	0751      	lsls	r1, r2, #29
 80049ae:	d46f      	bmi.n	8004a90 <HAL_RCC_ClockConfig+0x118>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049b0:	0713      	lsls	r3, r2, #28
 80049b2:	d507      	bpl.n	80049c4 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80049b4:	4a3b      	ldr	r2, [pc, #236]	; (8004aa4 <HAL_RCC_ClockConfig+0x12c>)
 80049b6:	6921      	ldr	r1, [r4, #16]
 80049b8:	6893      	ldr	r3, [r2, #8]
 80049ba:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80049be:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80049c2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80049c4:	f7ff ffaa 	bl	800491c <HAL_RCC_GetSysClockFreq>
 80049c8:	4b36      	ldr	r3, [pc, #216]	; (8004aa4 <HAL_RCC_ClockConfig+0x12c>)
 80049ca:	4a37      	ldr	r2, [pc, #220]	; (8004aa8 <HAL_RCC_ClockConfig+0x130>)
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80049d2:	5cd3      	ldrb	r3, [r2, r3]
 80049d4:	40d8      	lsrs	r0, r3
 80049d6:	4b35      	ldr	r3, [pc, #212]	; (8004aac <HAL_RCC_ClockConfig+0x134>)
 80049d8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80049da:	2000      	movs	r0, #0
 80049dc:	f7fe f930 	bl	8002c40 <HAL_InitTick>
  return HAL_OK;
 80049e0:	2000      	movs	r0, #0
 80049e2:	e7cf      	b.n	8004984 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049e4:	6813      	ldr	r3, [r2, #0]
 80049e6:	f023 030f 	bic.w	r3, r3, #15
 80049ea:	430b      	orrs	r3, r1
 80049ec:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ee:	6813      	ldr	r3, [r2, #0]
 80049f0:	f003 030f 	and.w	r3, r3, #15
 80049f4:	428b      	cmp	r3, r1
 80049f6:	d1c4      	bne.n	8004982 <HAL_RCC_ClockConfig+0xa>
 80049f8:	e7cc      	b.n	8004994 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049fa:	f012 0f04 	tst.w	r2, #4
 80049fe:	4b29      	ldr	r3, [pc, #164]	; (8004aa4 <HAL_RCC_ClockConfig+0x12c>)
 8004a00:	d003      	beq.n	8004a0a <HAL_RCC_ClockConfig+0x92>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a02:	6899      	ldr	r1, [r3, #8]
 8004a04:	f441 51e0 	orr.w	r1, r1, #7168	; 0x1c00
 8004a08:	6099      	str	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a0a:	0716      	lsls	r6, r2, #28
 8004a0c:	d503      	bpl.n	8004a16 <HAL_RCC_ClockConfig+0x9e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a0e:	6899      	ldr	r1, [r3, #8]
 8004a10:	f441 4160 	orr.w	r1, r1, #57344	; 0xe000
 8004a14:	6099      	str	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a16:	4923      	ldr	r1, [pc, #140]	; (8004aa4 <HAL_RCC_ClockConfig+0x12c>)
 8004a18:	68a0      	ldr	r0, [r4, #8]
 8004a1a:	688b      	ldr	r3, [r1, #8]
 8004a1c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a20:	4303      	orrs	r3, r0
 8004a22:	608b      	str	r3, [r1, #8]
 8004a24:	e7b9      	b.n	800499a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a26:	6861      	ldr	r1, [r4, #4]
 8004a28:	4b1e      	ldr	r3, [pc, #120]	; (8004aa4 <HAL_RCC_ClockConfig+0x12c>)
 8004a2a:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a2c:	681a      	ldr	r2, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a2e:	d11b      	bne.n	8004a68 <HAL_RCC_ClockConfig+0xf0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a30:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a34:	d0a5      	beq.n	8004982 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a36:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a38:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a3c:	4f19      	ldr	r7, [pc, #100]	; (8004aa4 <HAL_RCC_ClockConfig+0x12c>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a3e:	f022 0203 	bic.w	r2, r2, #3
 8004a42:	430a      	orrs	r2, r1
 8004a44:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8004a46:	f7fe f93b 	bl	8002cc0 <HAL_GetTick>
 8004a4a:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	6862      	ldr	r2, [r4, #4]
 8004a50:	f003 030c 	and.w	r3, r3, #12
 8004a54:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004a58:	d0a1      	beq.n	800499e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a5a:	f7fe f931 	bl	8002cc0 <HAL_GetTick>
 8004a5e:	1b80      	subs	r0, r0, r6
 8004a60:	4540      	cmp	r0, r8
 8004a62:	d9f3      	bls.n	8004a4c <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8004a64:	2003      	movs	r0, #3
 8004a66:	e78d      	b.n	8004984 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a68:	2902      	cmp	r1, #2
 8004a6a:	d102      	bne.n	8004a72 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a6c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8004a70:	e7e0      	b.n	8004a34 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a72:	f012 0f02 	tst.w	r2, #2
 8004a76:	e7dd      	b.n	8004a34 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a78:	6813      	ldr	r3, [r2, #0]
 8004a7a:	f023 030f 	bic.w	r3, r3, #15
 8004a7e:	432b      	orrs	r3, r5
 8004a80:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a82:	6813      	ldr	r3, [r2, #0]
 8004a84:	f003 030f 	and.w	r3, r3, #15
 8004a88:	42ab      	cmp	r3, r5
 8004a8a:	f47f af7a 	bne.w	8004982 <HAL_RCC_ClockConfig+0xa>
 8004a8e:	e78c      	b.n	80049aa <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a90:	4904      	ldr	r1, [pc, #16]	; (8004aa4 <HAL_RCC_ClockConfig+0x12c>)
 8004a92:	68e0      	ldr	r0, [r4, #12]
 8004a94:	688b      	ldr	r3, [r1, #8]
 8004a96:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8004a9a:	4303      	orrs	r3, r0
 8004a9c:	608b      	str	r3, [r1, #8]
 8004a9e:	e787      	b.n	80049b0 <HAL_RCC_ClockConfig+0x38>
 8004aa0:	40023c00 	.word	0x40023c00
 8004aa4:	40023800 	.word	0x40023800
 8004aa8:	080065f4 	.word	0x080065f4
 8004aac:	20000104 	.word	0x20000104

08004ab0 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8004ab0:	4b01      	ldr	r3, [pc, #4]	; (8004ab8 <HAL_RCC_GetHCLKFreq+0x8>)
 8004ab2:	6818      	ldr	r0, [r3, #0]
 8004ab4:	4770      	bx	lr
 8004ab6:	bf00      	nop
 8004ab8:	20000104 	.word	0x20000104

08004abc <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004abc:	6803      	ldr	r3, [r0, #0]
{
 8004abe:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004ac2:	f013 0601 	ands.w	r6, r3, #1
{
 8004ac6:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004ac8:	d00b      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004aca:	4aba      	ldr	r2, [pc, #744]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004acc:	6891      	ldr	r1, [r2, #8]
 8004ace:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8004ad2:	6091      	str	r1, [r2, #8]
 8004ad4:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8004ad6:	6891      	ldr	r1, [r2, #8]
 8004ad8:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004ada:	fab6 f686 	clz	r6, r6
 8004ade:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004ae0:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004ae2:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 8004ae6:	d012      	beq.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ae8:	49b2      	ldr	r1, [pc, #712]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004aea:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8004aec:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004af0:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004af4:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    {
      plli2sused = 1;
 8004af8:	bf08      	it	eq
 8004afa:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004afc:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004b00:	bf16      	itet	ne
 8004b02:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 8004b06:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004b08:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b0a:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004b0e:	02d9      	lsls	r1, r3, #11
 8004b10:	d510      	bpl.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004b12:	48a8      	ldr	r0, [pc, #672]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004b14:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004b16:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004b1a:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004b1e:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8004b22:	ea42 0201 	orr.w	r2, r2, r1
 8004b26:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004b2a:	f000 81a8 	beq.w	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 8004b2e:	2900      	cmp	r1, #0
 8004b30:	bf08      	it	eq
 8004b32:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8004b34:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8004b38:	bf18      	it	ne
 8004b3a:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004b3c:	069a      	lsls	r2, r3, #26
 8004b3e:	d531      	bpl.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b40:	4b9c      	ldr	r3, [pc, #624]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004b42:	4f9d      	ldr	r7, [pc, #628]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b46:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004b4a:	641a      	str	r2, [r3, #64]	; 0x40
 8004b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b52:	9301      	str	r3, [sp, #4]
 8004b54:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b5c:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b5e:	f7fe f8af 	bl	8002cc0 <HAL_GetTick>
 8004b62:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	05db      	lsls	r3, r3, #23
 8004b68:	f140 818b 	bpl.w	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b6c:	4f91      	ldr	r7, [pc, #580]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004b6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b70:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8004b74:	f040 8190 	bne.w	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b78:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004b7a:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8004b7e:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8004b82:	4a8c      	ldr	r2, [pc, #560]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004b84:	f040 81ae 	bne.w	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8004b88:	6891      	ldr	r1, [r2, #8]
 8004b8a:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8004b8e:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8004b92:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8004b96:	4301      	orrs	r1, r0
 8004b98:	6091      	str	r1, [r2, #8]
 8004b9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b9e:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8004ba0:	430b      	orrs	r3, r1
 8004ba2:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004ba4:	6823      	ldr	r3, [r4, #0]
 8004ba6:	06da      	lsls	r2, r3, #27
 8004ba8:	d50c      	bpl.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004baa:	4a82      	ldr	r2, [pc, #520]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004bac:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8004bb0:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8004bb4:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8004bb8:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8004bbc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004bbe:	4301      	orrs	r1, r0
 8004bc0:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004bc4:	045f      	lsls	r7, r3, #17
 8004bc6:	d508      	bpl.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004bc8:	497a      	ldr	r1, [pc, #488]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004bca:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8004bcc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004bd0:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8004bd4:	4302      	orrs	r2, r0
 8004bd6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004bda:	0418      	lsls	r0, r3, #16
 8004bdc:	d508      	bpl.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004bde:	4975      	ldr	r1, [pc, #468]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004be0:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8004be2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004be6:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8004bea:	4302      	orrs	r2, r0
 8004bec:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004bf0:	03d9      	lsls	r1, r3, #15
 8004bf2:	d508      	bpl.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004bf4:	496f      	ldr	r1, [pc, #444]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004bf6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8004bf8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004bfc:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8004c00:	4302      	orrs	r2, r0
 8004c02:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004c06:	039a      	lsls	r2, r3, #14
 8004c08:	d508      	bpl.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004c0a:	496a      	ldr	r1, [pc, #424]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004c0c:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8004c0e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004c12:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8004c16:	4302      	orrs	r2, r0
 8004c18:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c1c:	065f      	lsls	r7, r3, #25
 8004c1e:	d508      	bpl.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c20:	4964      	ldr	r1, [pc, #400]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004c22:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8004c24:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004c28:	f022 0203 	bic.w	r2, r2, #3
 8004c2c:	4302      	orrs	r2, r0
 8004c2e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c32:	0618      	lsls	r0, r3, #24
 8004c34:	d508      	bpl.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c36:	495f      	ldr	r1, [pc, #380]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004c38:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8004c3a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004c3e:	f022 020c 	bic.w	r2, r2, #12
 8004c42:	4302      	orrs	r2, r0
 8004c44:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c48:	05d9      	lsls	r1, r3, #23
 8004c4a:	d508      	bpl.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c4c:	4959      	ldr	r1, [pc, #356]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004c4e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8004c50:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004c54:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8004c58:	4302      	orrs	r2, r0
 8004c5a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c5e:	059a      	lsls	r2, r3, #22
 8004c60:	d508      	bpl.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c62:	4954      	ldr	r1, [pc, #336]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004c64:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8004c66:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004c6a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004c6e:	4302      	orrs	r2, r0
 8004c70:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004c74:	055f      	lsls	r7, r3, #21
 8004c76:	d508      	bpl.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004c78:	494e      	ldr	r1, [pc, #312]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004c7a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004c7c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004c80:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004c84:	4302      	orrs	r2, r0
 8004c86:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004c8a:	0518      	lsls	r0, r3, #20
 8004c8c:	d508      	bpl.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004c8e:	4949      	ldr	r1, [pc, #292]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004c90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c92:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004c96:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004c9a:	4302      	orrs	r2, r0
 8004c9c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004ca0:	04d9      	lsls	r1, r3, #19
 8004ca2:	d508      	bpl.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004ca4:	4943      	ldr	r1, [pc, #268]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004ca6:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8004ca8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004cac:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004cb0:	4302      	orrs	r2, r0
 8004cb2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004cb6:	049a      	lsls	r2, r3, #18
 8004cb8:	d508      	bpl.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004cba:	493e      	ldr	r1, [pc, #248]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004cbc:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8004cbe:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004cc2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8004cc6:	4302      	orrs	r2, r0
 8004cc8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004ccc:	025f      	lsls	r7, r3, #9
 8004cce:	d508      	bpl.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004cd0:	4938      	ldr	r1, [pc, #224]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004cd2:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8004cd4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004cd8:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8004cdc:	4302      	orrs	r2, r0
 8004cde:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004ce2:	0298      	lsls	r0, r3, #10
 8004ce4:	d50c      	bpl.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004ce6:	4833      	ldr	r0, [pc, #204]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004ce8:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8004cea:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8004cee:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004cf2:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 8004cf6:	bf08      	it	eq
 8004cf8:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8004d00:	f013 0f08 	tst.w	r3, #8
 8004d04:	bf18      	it	ne
 8004d06:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004d08:	0359      	lsls	r1, r3, #13
 8004d0a:	d508      	bpl.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d0c:	4929      	ldr	r1, [pc, #164]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004d0e:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8004d10:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004d14:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004d18:	4302      	orrs	r2, r0
 8004d1a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004d1e:	021a      	lsls	r2, r3, #8
 8004d20:	d509      	bpl.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004d22:	4924      	ldr	r1, [pc, #144]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004d24:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8004d28:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004d2c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004d30:	4302      	orrs	r2, r0
 8004d32:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004d36:	015f      	lsls	r7, r3, #5
 8004d38:	d509      	bpl.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004d3a:	491e      	ldr	r1, [pc, #120]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004d3c:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8004d40:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004d44:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8004d48:	4302      	orrs	r2, r0
 8004d4a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004d4e:	0118      	lsls	r0, r3, #4
 8004d50:	d509      	bpl.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004d52:	4918      	ldr	r1, [pc, #96]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004d54:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8004d58:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8004d5c:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8004d60:	4302      	orrs	r2, r0
 8004d62:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004d66:	00d9      	lsls	r1, r3, #3
 8004d68:	f140 813e 	bpl.w	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004d6c:	4a11      	ldr	r2, [pc, #68]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004d6e:	2e01      	cmp	r6, #1
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004d70:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8004d74:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8004d78:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004d7c:	ea43 0301 	orr.w	r3, r3, r1
 8004d80:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004d84:	f000 80b2 	beq.w	8004eec <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004d88:	2d01      	cmp	r5, #1
 8004d8a:	d176      	bne.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x3be>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004d8c:	4d09      	ldr	r5, [pc, #36]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004d8e:	682b      	ldr	r3, [r5, #0]
 8004d90:	462e      	mov	r6, r5
 8004d92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d96:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d98:	f7fd ff92 	bl	8002cc0 <HAL_GetTick>
 8004d9c:	4607      	mov	r7, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004d9e:	682b      	ldr	r3, [r5, #0]
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	f100 812e 	bmi.w	8005002 <HAL_RCCEx_PeriphCLKConfig+0x546>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004da6:	6822      	ldr	r2, [r4, #0]
 8004da8:	0315      	lsls	r5, r2, #12
 8004daa:	d507      	bpl.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x300>
 8004dac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004dae:	b14b      	cbz	r3, 8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8004db0:	e004      	b.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x300>
 8004db2:	bf00      	nop
 8004db4:	40023800 	.word	0x40023800
 8004db8:	40007000 	.word	0x40007000
 8004dbc:	02d0      	lsls	r0, r2, #11
 8004dbe:	d51c      	bpl.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x33e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004dc0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004dc2:	b9d3      	cbnz	r3, 8004dfa <HAL_RCCEx_PeriphCLKConfig+0x33e>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004dc4:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004dc8:	f8d6 1088 	ldr.w	r1, [r6, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004dcc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004dd0:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8004dd4:	430b      	orrs	r3, r1
 8004dd6:	6961      	ldr	r1, [r4, #20]
 8004dd8:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8004ddc:	69a1      	ldr	r1, [r4, #24]
 8004dde:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004de2:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004de6:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 8004dea:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004dec:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8004df0:	3901      	subs	r1, #1
 8004df2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004df6:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004dfa:	0291      	lsls	r1, r2, #10
 8004dfc:	d515      	bpl.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004dfe:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8004e00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e04:	d111      	bne.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004e06:	4986      	ldr	r1, [pc, #536]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8004e08:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004e0c:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004e10:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8004e14:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8004e18:	4303      	orrs	r3, r0
 8004e1a:	6960      	ldr	r0, [r4, #20]
 8004e1c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8004e20:	6a20      	ldr	r0, [r4, #32]
 8004e22:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004e26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004e2a:	0712      	lsls	r2, r2, #28
 8004e2c:	d519      	bpl.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004e2e:	4a7c      	ldr	r2, [pc, #496]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8004e30:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004e34:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004e38:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8004e3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e40:	430b      	orrs	r3, r1
 8004e42:	6961      	ldr	r1, [r4, #20]
 8004e44:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8004e48:	69e1      	ldr	r1, [r4, #28]
 8004e4a:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8004e4e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004e52:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8004e56:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004e58:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004e5c:	430b      	orrs	r3, r1
 8004e5e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004e62:	4c6f      	ldr	r4, [pc, #444]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8004e64:	6823      	ldr	r3, [r4, #0]
 8004e66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e6a:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e6c:	f7fd ff28 	bl	8002cc0 <HAL_GetTick>
 8004e70:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004e72:	6823      	ldr	r3, [r4, #0]
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	f140 80cb 	bpl.w	8005010 <HAL_RCCEx_PeriphCLKConfig+0x554>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8004e7a:	2000      	movs	r0, #0
 8004e7c:	e009      	b.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      plli2sused = 1;
 8004e7e:	2601      	movs	r6, #1
 8004e80:	e658      	b.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e82:	f7fd ff1d 	bl	8002cc0 <HAL_GetTick>
 8004e86:	eba0 0008 	sub.w	r0, r0, r8
 8004e8a:	2864      	cmp	r0, #100	; 0x64
 8004e8c:	f67f ae6a 	bls.w	8004b64 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 8004e90:	2003      	movs	r0, #3
}
 8004e92:	b003      	add	sp, #12
 8004e94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e98:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004e9a:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	f43f ae6a 	beq.w	8004b78 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ea4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ea6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ea8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8004eac:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004eb0:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004eb2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004eb4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004eb8:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8004eba:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004ebc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ebe:	07d8      	lsls	r0, r3, #31
 8004ec0:	f57f ae5a 	bpl.w	8004b78 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 8004ec4:	f7fd fefc 	bl	8002cc0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ec8:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8004ecc:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ece:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ed0:	0799      	lsls	r1, r3, #30
 8004ed2:	f53f ae51 	bmi.w	8004b78 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ed6:	f7fd fef3 	bl	8002cc0 <HAL_GetTick>
 8004eda:	eba0 0008 	sub.w	r0, r0, r8
 8004ede:	4548      	cmp	r0, r9
 8004ee0:	d9f5      	bls.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x412>
 8004ee2:	e7d5      	b.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ee4:	6891      	ldr	r1, [r2, #8]
 8004ee6:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8004eea:	e655      	b.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 8004eec:	4e4c      	ldr	r6, [pc, #304]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8004eee:	6833      	ldr	r3, [r6, #0]
 8004ef0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004ef4:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8004ef6:	f7fd fee3 	bl	8002cc0 <HAL_GetTick>
 8004efa:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004efc:	6833      	ldr	r3, [r6, #0]
 8004efe:	011a      	lsls	r2, r3, #4
 8004f00:	d478      	bmi.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x538>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004f02:	6822      	ldr	r2, [r4, #0]
 8004f04:	07d3      	lsls	r3, r2, #31
 8004f06:	d512      	bpl.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x472>
 8004f08:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004f0a:	b983      	cbnz	r3, 8004f2e <HAL_RCCEx_PeriphCLKConfig+0x472>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004f0c:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004f10:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004f14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004f18:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8004f1c:	430b      	orrs	r3, r1
 8004f1e:	6861      	ldr	r1, [r4, #4]
 8004f20:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8004f24:	68a1      	ldr	r1, [r4, #8]
 8004f26:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8004f2a:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004f2e:	0317      	lsls	r7, r2, #12
 8004f30:	d503      	bpl.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8004f32:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004f34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f38:	d005      	beq.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8004f3a:	02d6      	lsls	r6, r2, #11
 8004f3c:	d51e      	bpl.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x4c0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004f3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f44:	d11a      	bne.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x4c0>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004f46:	4936      	ldr	r1, [pc, #216]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8004f48:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004f4c:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004f50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004f54:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8004f58:	4303      	orrs	r3, r0
 8004f5a:	6860      	ldr	r0, [r4, #4]
 8004f5c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8004f60:	68e0      	ldr	r0, [r4, #12]
 8004f62:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8004f66:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004f6a:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8004f6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f70:	f020 001f 	bic.w	r0, r0, #31
 8004f74:	3b01      	subs	r3, #1
 8004f76:	4303      	orrs	r3, r0
 8004f78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004f7c:	01d0      	lsls	r0, r2, #7
 8004f7e:	d511      	bpl.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004f80:	4927      	ldr	r1, [pc, #156]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8004f82:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004f86:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004f8a:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8004f8e:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8004f92:	4303      	orrs	r3, r0
 8004f94:	6860      	ldr	r0, [r4, #4]
 8004f96:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8004f9a:	6920      	ldr	r0, [r4, #16]
 8004f9c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004fa0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004fa4:	0191      	lsls	r1, r2, #6
 8004fa6:	d50d      	bpl.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x508>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004fa8:	6923      	ldr	r3, [r4, #16]
 8004faa:	6862      	ldr	r2, [r4, #4]
 8004fac:	041b      	lsls	r3, r3, #16
 8004fae:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8004fb2:	68e2      	ldr	r2, [r4, #12]
 8004fb4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004fb8:	68a2      	ldr	r2, [r4, #8]
 8004fba:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8004fbe:	4a18      	ldr	r2, [pc, #96]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8004fc0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8004fc4:	4e16      	ldr	r6, [pc, #88]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8004fc6:	6833      	ldr	r3, [r6, #0]
 8004fc8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004fcc:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8004fce:	f7fd fe77 	bl	8002cc0 <HAL_GetTick>
 8004fd2:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004fd4:	6833      	ldr	r3, [r6, #0]
 8004fd6:	011a      	lsls	r2, r3, #4
 8004fd8:	f53f aed6 	bmi.w	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004fdc:	f7fd fe70 	bl	8002cc0 <HAL_GetTick>
 8004fe0:	1bc0      	subs	r0, r0, r7
 8004fe2:	2864      	cmp	r0, #100	; 0x64
 8004fe4:	d9f6      	bls.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004fe6:	e753      	b.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004fe8:	2e01      	cmp	r6, #1
 8004fea:	f43f af7f 	beq.w	8004eec <HAL_RCCEx_PeriphCLKConfig+0x430>
 8004fee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ff2:	e6c7      	b.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004ff4:	f7fd fe64 	bl	8002cc0 <HAL_GetTick>
 8004ff8:	1bc0      	subs	r0, r0, r7
 8004ffa:	2864      	cmp	r0, #100	; 0x64
 8004ffc:	f67f af7e 	bls.w	8004efc <HAL_RCCEx_PeriphCLKConfig+0x440>
 8005000:	e746      	b.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005002:	f7fd fe5d 	bl	8002cc0 <HAL_GetTick>
 8005006:	1bc0      	subs	r0, r0, r7
 8005008:	2864      	cmp	r0, #100	; 0x64
 800500a:	f67f aec8 	bls.w	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800500e:	e73f      	b.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005010:	f7fd fe56 	bl	8002cc0 <HAL_GetTick>
 8005014:	1b40      	subs	r0, r0, r5
 8005016:	2864      	cmp	r0, #100	; 0x64
 8005018:	f67f af2b 	bls.w	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800501c:	e738      	b.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
 800501e:	bf00      	nop
 8005020:	40023800 	.word	0x40023800

08005024 <HAL_RCCEx_GetPeriphCLKConfig>:
{
  uint32_t tempreg = 0;

  /* Set all possible values for the extended clock type parameter------------*/
#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 8005024:	4b5c      	ldr	r3, [pc, #368]	; (8005198 <HAL_RCCEx_GetPeriphCLKConfig+0x174>)
 8005026:	6003      	str	r3, [r0, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8005028:	4b5c      	ldr	r3, [pc, #368]	; (800519c <HAL_RCCEx_GetPeriphCLKConfig+0x178>)
 800502a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800502e:	f3c2 1288 	ubfx	r2, r2, #6, #9
 8005032:	6042      	str	r2, [r0, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005034:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005038:	f3c2 4201 	ubfx	r2, r2, #16, #2
 800503c:	6102      	str	r2, [r0, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800503e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005042:	f3c2 6203 	ubfx	r2, r2, #24, #4
 8005046:	60c2      	str	r2, [r0, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005048:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800504c:	f3c2 7202 	ubfx	r2, r2, #28, #3
 8005050:	6082      	str	r2, [r0, #8]

  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 8005052:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005056:	f3c2 1288 	ubfx	r2, r2, #6, #9
 800505a:	6142      	str	r2, [r0, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800505c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005060:	f3c2 4201 	ubfx	r2, r2, #16, #2
 8005064:	6202      	str	r2, [r0, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005066:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800506a:	f3c2 6203 	ubfx	r2, r2, #24, #4
 800506e:	6182      	str	r2, [r0, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005070:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005074:	f3c2 7202 	ubfx	r2, r2, #28, #3
 8005078:	61c2      	str	r2, [r0, #28]

  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos);
 800507a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800507e:	f002 021f 	and.w	r2, r2, #31
 8005082:	6242      	str	r2, [r0, #36]	; 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos);
 8005084:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005088:	f3c2 2204 	ubfx	r2, r2, #8, #5
 800508c:	6282      	str	r2, [r0, #40]	; 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
 800508e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005092:	f3c2 4201 	ubfx	r2, r2, #16, #2
 8005096:	62c2      	str	r2, [r0, #44]	; 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 8005098:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800509c:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 80050a0:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 80050a2:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80050a6:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 80050aa:	6402      	str	r2, [r0, #64]	; 0x40

  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 80050ac:	689a      	ldr	r2, [r3, #8]
 80050ae:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 80050b2:	6342      	str	r2, [r0, #52]	; 0x34

  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 80050b4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80050b8:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 80050bc:	6642      	str	r2, [r0, #100]	; 0x64

  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 80050be:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80050c2:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 80050c6:	6682      	str	r2, [r0, #104]	; 0x68

  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 80050c8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80050cc:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 80050d0:	66c2      	str	r2, [r0, #108]	; 0x6c

  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 80050d2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80050d6:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 80050da:	6702      	str	r2, [r0, #112]	; 0x70

  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 80050dc:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80050e0:	f002 0203 	and.w	r2, r2, #3
 80050e4:	6442      	str	r2, [r0, #68]	; 0x44

  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 80050e6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80050ea:	f002 020c 	and.w	r2, r2, #12
 80050ee:	6482      	str	r2, [r0, #72]	; 0x48

  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 80050f0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80050f4:	f002 0230 	and.w	r2, r2, #48	; 0x30
 80050f8:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 80050fa:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80050fe:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8005102:	6502      	str	r2, [r0, #80]	; 0x50

  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 8005104:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005108:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800510c:	6542      	str	r2, [r0, #84]	; 0x54

  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 800510e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005112:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8005116:	6582      	str	r2, [r0, #88]	; 0x58

  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 8005118:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800511c:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 8005120:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 8005122:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005126:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 800512a:	6602      	str	r2, [r0, #96]	; 0x60

  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 800512c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005130:	f002 7240 	and.w	r2, r2, #50331648	; 0x3000000
 8005134:	6742      	str	r2, [r0, #116]	; 0x74

  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 8005136:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800513a:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 800513e:	6782      	str	r2, [r0, #120]	; 0x78

  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 8005140:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005144:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8005148:	67c2      	str	r2, [r0, #124]	; 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 800514a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800514e:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8005152:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /* Get the SDMMC2 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc2ClockSelection = __HAL_RCC_GET_SDMMC2_SOURCE();
 8005156:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800515a:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 800515e:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84

  /* Get the DFSDM clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1ClockSelection = __HAL_RCC_GET_DFSDM1_SOURCE();
 8005162:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005166:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 800516a:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88

  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 800516e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005172:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8005176:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 800517a:	6899      	ldr	r1, [r3, #8]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 800517c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 800517e:	f401 11f8 	and.w	r1, r1, #2031616	; 0x1f0000
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8005182:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8005186:	430a      	orrs	r2, r1
 8005188:	6302      	str	r2, [r0, #48]	; 0x30

  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 800518a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 800518e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005192:	6383      	str	r3, [r0, #56]	; 0x38
  }
}
 8005194:	4770      	bx	lr
 8005196:	bf00      	nop
 8005198:	1cfffff1 	.word	0x1cfffff1
 800519c:	40023800 	.word	0x40023800

080051a0 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80051a0:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 80051a4:	d131      	bne.n	800520a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
  {
    saiclocksource = RCC->DCKCFGR1;
 80051a6:	4b35      	ldr	r3, [pc, #212]	; (800527c <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
 80051a8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 80051ac:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
    switch (saiclocksource)
 80051b0:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 80051b4:	d05f      	beq.n	8005276 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 80051b6:	d806      	bhi.n	80051c6 <HAL_RCCEx_GetPeriphCLKFreq+0x26>
 80051b8:	2a00      	cmp	r2, #0
 80051ba:	d039      	beq.n	8005230 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
 80051bc:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
  {
    saiclocksource = RCC->DCKCFGR1;
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
    switch (saiclocksource)
 80051c0:	d051      	beq.n	8005266 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
    default :
      {
        break;
      }
    }
  }
 80051c2:	2000      	movs	r0, #0
 80051c4:	4770      	bx	lr
    switch (saiclocksource)
 80051c6:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
    switch (saiclocksource)
 80051ca:	d1fa      	bne.n	80051c2 <HAL_RCCEx_GetPeriphCLKFreq+0x22>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80051cc:	685b      	ldr	r3, [r3, #4]
          frequency = HSI_VALUE;
 80051ce:	482c      	ldr	r0, [pc, #176]	; (8005280 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80051d0:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
          frequency = HSI_VALUE;
 80051d4:	4b2b      	ldr	r3, [pc, #172]	; (8005284 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
 80051d6:	bf08      	it	eq
 80051d8:	4618      	moveq	r0, r3
 80051da:	4770      	bx	lr
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80051dc:	4b28      	ldr	r3, [pc, #160]	; (8005280 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80051de:	4a27      	ldr	r2, [pc, #156]	; (800527c <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80051e0:	fbb3 f3f0 	udiv	r3, r3, r0
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80051e4:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80051e8:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
 80051ec:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80051f0:	4358      	muls	r0, r3
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80051f2:	f3c1 6303 	ubfx	r3, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80051f6:	fbb0 f0f3 	udiv	r0, r0, r3
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80051fa:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80051fe:	f003 031f 	and.w	r3, r3, #31
 8005202:	3301      	adds	r3, #1
        frequency = frequency/(tmpreg);
 8005204:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 8005208:	4770      	bx	lr
  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800520a:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
 800520e:	d1d8      	bne.n	80051c2 <HAL_RCCEx_GetPeriphCLKFreq+0x22>
    saiclocksource = RCC->DCKCFGR1;
 8005210:	4b1a      	ldr	r3, [pc, #104]	; (800527c <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
 8005212:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8005216:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
    switch (saiclocksource)
 800521a:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800521e:	d02a      	beq.n	8005276 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8005220:	d803      	bhi.n	800522a <HAL_RCCEx_GetPeriphCLKFreq+0x8a>
 8005222:	b12a      	cbz	r2, 8005230 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
 8005224:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8005228:	e7ca      	b.n	80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0x20>
 800522a:	f5b2 0f40 	cmp.w	r2, #12582912	; 0xc00000
 800522e:	e7cc      	b.n	80051ca <HAL_RCCEx_GetPeriphCLKFreq+0x2a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005230:	685a      	ldr	r2, [r3, #4]
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005232:	6858      	ldr	r0, [r3, #4]
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005234:	0252      	lsls	r2, r2, #9
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8005236:	4a11      	ldr	r2, [pc, #68]	; (800527c <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005238:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800523c:	bf54      	ite	pl
 800523e:	4b11      	ldrpl	r3, [pc, #68]	; (8005284 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005240:	4b0f      	ldrmi	r3, [pc, #60]	; (8005280 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8005242:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005246:	fbb3 f3f0 	udiv	r3, r3, r0
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800524a:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
 800524e:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8005252:	4358      	muls	r0, r3
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8005254:	f3c1 6303 	ubfx	r3, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8005258:	fbb0 f0f3 	udiv	r0, r0, r3
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800525c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8005260:	f3c3 2304 	ubfx	r3, r3, #8, #5
 8005264:	e7cd      	b.n	8005202 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005266:	685a      	ldr	r2, [r3, #4]
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005268:	6858      	ldr	r0, [r3, #4]
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800526a:	0253      	lsls	r3, r2, #9
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800526c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005270:	d4b4      	bmi.n	80051dc <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005272:	4b04      	ldr	r3, [pc, #16]	; (8005284 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
 8005274:	e7b3      	b.n	80051de <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
        frequency = EXTERNAL_CLOCK_VALUE;
 8005276:	4804      	ldr	r0, [pc, #16]	; (8005288 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>)

  return frequency;
}
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop
 800527c:	40023800 	.word	0x40023800
 8005280:	017d7840 	.word	0x017d7840
 8005284:	00f42400 	.word	0x00f42400
 8005288:	00bb8000 	.word	0x00bb8000

0800528c <SAI_InterruptFlag>:
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
  uint32_t tmpIT = SAI_IT_OVRUDR;
  
  if(mode == SAI_MODE_IT)
 800528c:	2901      	cmp	r1, #1
  {
    tmpIT|= SAI_IT_FREQ;
  }

  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800528e:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8005290:	6842      	ldr	r2, [r0, #4]
    tmpIT|= SAI_IT_FREQ;
 8005292:	bf14      	ite	ne
 8005294:	2301      	movne	r3, #1
 8005296:	2309      	moveq	r3, #9
  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005298:	2908      	cmp	r1, #8
 800529a:	d105      	bne.n	80052a8 <SAI_InterruptFlag+0x1c>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800529c:	f022 0102 	bic.w	r1, r2, #2
 80052a0:	2901      	cmp	r1, #1
  {
    tmpIT|= SAI_IT_CNRDY;
 80052a2:	bf08      	it	eq
 80052a4:	f043 0310 	orreq.w	r3, r3, #16
  }

  if((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80052a8:	3a02      	subs	r2, #2
 80052aa:	2a01      	cmp	r2, #1
  {
    tmpIT|= SAI_IT_AFSDET | SAI_IT_LFSDET;
 80052ac:	bf94      	ite	ls
 80052ae:	f043 0060 	orrls.w	r0, r3, #96	; 0x60
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT|= SAI_IT_WCKCFG;
 80052b2:	f043 0004 	orrhi.w	r0, r3, #4
  }
  return tmpIT;
}
 80052b6:	4770      	bx	lr

080052b8 <SAI_Disable>:
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 80052b8:	4b0d      	ldr	r3, [pc, #52]	; (80052f0 <SAI_Disable+0x38>)
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80052ba:	6801      	ldr	r1, [r0, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	f641 3358 	movw	r3, #7000	; 0x1b58
 80052c2:	fbb2 f2f3 	udiv	r2, r2, r3
  __HAL_SAI_DISABLE(hsai);
 80052c6:	680b      	ldr	r3, [r1, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 80052c8:	0092      	lsls	r2, r2, #2
  __HAL_SAI_DISABLE(hsai);
 80052ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052ce:	600b      	str	r3, [r1, #0]

  do 
  {
    /* Check for the Timeout */
    if (count-- == 0)
 80052d0:	3a01      	subs	r2, #1
 80052d2:	d207      	bcs.n	80052e4 <SAI_Disable+0x2c>
    {         
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80052d4:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 80052d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052dc:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
      status = HAL_TIMEOUT;
 80052e0:	2003      	movs	r0, #3
      break;
 80052e2:	4770      	bx	lr
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80052e4:	680b      	ldr	r3, [r1, #0]
 80052e6:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 80052ea:	d1f1      	bne.n	80052d0 <SAI_Disable+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 80052ec:	4618      	mov	r0, r3

  return status;
}
 80052ee:	4770      	bx	lr
 80052f0:	20000104 	.word	0x20000104

080052f4 <HAL_SAI_MspInit>:
}
 80052f4:	4770      	bx	lr
	...

080052f8 <HAL_SAI_Init>:
{
 80052f8:	b570      	push	{r4, r5, r6, lr}
  if(hsai == NULL)
 80052fa:	4604      	mov	r4, r0
 80052fc:	2800      	cmp	r0, #0
 80052fe:	f000 80c4 	beq.w	800548a <HAL_SAI_Init+0x192>
  if(hsai->State == HAL_SAI_STATE_RESET)
 8005302:	f890 307d 	ldrb.w	r3, [r0, #125]	; 0x7d
 8005306:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800530a:	b91b      	cbnz	r3, 8005314 <HAL_SAI_Init+0x1c>
    hsai->Lock = HAL_UNLOCKED;
 800530c:	f880 207c 	strb.w	r2, [r0, #124]	; 0x7c
    HAL_SAI_MspInit(hsai);
 8005310:	f7ff fff0 	bl	80052f4 <HAL_SAI_MspInit>
  hsai->State = HAL_SAI_STATE_BUSY;
 8005314:	2302      	movs	r3, #2
  SAI_Disable(hsai);
 8005316:	4620      	mov	r0, r4
  hsai->State = HAL_SAI_STATE_BUSY;
 8005318:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  SAI_Disable(hsai);
 800531c:	f7ff ffcc 	bl	80052b8 <SAI_Disable>
  switch(hsai->Init.SynchroExt)
 8005320:	68e3      	ldr	r3, [r4, #12]
 8005322:	2b01      	cmp	r3, #1
 8005324:	f000 80a0 	beq.w	8005468 <HAL_SAI_Init+0x170>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8005328:	2b02      	cmp	r3, #2
 800532a:	bf14      	ite	ne
 800532c:	2300      	movne	r3, #0
 800532e:	2320      	moveq	r3, #32
  switch(hsai->Init.Synchro)
 8005330:	68a2      	ldr	r2, [r4, #8]
 8005332:	2a02      	cmp	r2, #2
 8005334:	f000 809c 	beq.w	8005470 <HAL_SAI_Init+0x178>
 8005338:	2a03      	cmp	r2, #3
 800533a:	f000 8097 	beq.w	800546c <HAL_SAI_Init+0x174>
 800533e:	2a01      	cmp	r2, #1
 8005340:	bf14      	ite	ne
 8005342:	2500      	movne	r5, #0
 8005344:	f44f 6580 	moveq.w	r5, #1024	; 0x400
  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005348:	6822      	ldr	r2, [r4, #0]
 800534a:	4951      	ldr	r1, [pc, #324]	; (8005490 <HAL_SAI_Init+0x198>)
 800534c:	428a      	cmp	r2, r1
 800534e:	d003      	beq.n	8005358 <HAL_SAI_Init+0x60>
 8005350:	4850      	ldr	r0, [pc, #320]	; (8005494 <HAL_SAI_Init+0x19c>)
 8005352:	4282      	cmp	r2, r0
 8005354:	f040 808f 	bne.w	8005476 <HAL_SAI_Init+0x17e>
    SAI1->GCR = tmpregisterGCR;
 8005358:	484f      	ldr	r0, [pc, #316]	; (8005498 <HAL_SAI_Init+0x1a0>)
    SAI2->GCR = tmpregisterGCR;
 800535a:	6003      	str	r3, [r0, #0]
  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800535c:	69e3      	ldr	r3, [r4, #28]
 800535e:	b313      	cbz	r3, 80053a6 <HAL_SAI_Init+0xae>
    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 8005360:	428a      	cmp	r2, r1
 8005362:	d003      	beq.n	800536c <HAL_SAI_Init+0x74>
 8005364:	4b4b      	ldr	r3, [pc, #300]	; (8005494 <HAL_SAI_Init+0x19c>)
 8005366:	429a      	cmp	r2, r3
 8005368:	f040 8087 	bne.w	800547a <HAL_SAI_Init+0x182>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800536c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005370:	f7ff ff16 	bl	80051a0 <HAL_RCCEx_GetPeriphCLKFreq>
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 8005374:	6823      	ldr	r3, [r4, #0]
 8005376:	4a49      	ldr	r2, [pc, #292]	; (800549c <HAL_SAI_Init+0x1a4>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d002      	beq.n	8005382 <HAL_SAI_Init+0x8a>
 800537c:	3220      	adds	r2, #32
 800537e:	4293      	cmp	r3, r2
 8005380:	d103      	bne.n	800538a <HAL_SAI_Init+0x92>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8005382:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8005386:	f7ff ff0b 	bl	80051a0 <HAL_RCCEx_GetPeriphCLKFreq>
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800538a:	220a      	movs	r2, #10
 800538c:	69e3      	ldr	r3, [r4, #28]
 800538e:	4350      	muls	r0, r2
 8005390:	025b      	lsls	r3, r3, #9
 8005392:	fbb0 f0f3 	udiv	r0, r0, r3
    hsai->Init.Mckdiv = tmpval / 10;
 8005396:	fbb0 f3f2 	udiv	r3, r0, r2
    if((tmpval % 10) > 8)
 800539a:	fb02 0013 	mls	r0, r2, r3, r0
 800539e:	2809      	cmp	r0, #9
      hsai->Init.Mckdiv+= 1;
 80053a0:	bf08      	it	eq
 80053a2:	3301      	addeq	r3, #1
 80053a4:	6223      	str	r3, [r4, #32]
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80053a6:	6863      	ldr	r3, [r4, #4]
 80053a8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80053aa:	f033 0102 	bics.w	r1, r3, #2
 80053ae:	d166      	bne.n	800547e <HAL_SAI_Init+0x186>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 80053b0:	2a01      	cmp	r2, #1
 80053b2:	bf18      	it	ne
 80053b4:	f44f 7100 	movne.w	r1, #512	; 0x200
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80053b8:	6822      	ldr	r2, [r4, #0]
 80053ba:	4839      	ldr	r0, [pc, #228]	; (80054a0 <HAL_SAI_Init+0x1a8>)
 80053bc:	6816      	ldr	r6, [r2, #0]
 80053be:	4030      	ands	r0, r6
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80053c0:	6b26      	ldr	r6, [r4, #48]	; 0x30
 80053c2:	4333      	orrs	r3, r6
 80053c4:	6b66      	ldr	r6, [r4, #52]	; 0x34
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80053c6:	6010      	str	r0, [r2, #0]
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80053c8:	4333      	orrs	r3, r6
 80053ca:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80053cc:	6810      	ldr	r0, [r2, #0]
 80053ce:	4333      	orrs	r3, r6
 80053d0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80053d2:	4333      	orrs	r3, r6
 80053d4:	6926      	ldr	r6, [r4, #16]
 80053d6:	4333      	orrs	r3, r6
 80053d8:	6966      	ldr	r6, [r4, #20]
 80053da:	4333      	orrs	r3, r6
 80053dc:	4303      	orrs	r3, r0
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80053de:	6a20      	ldr	r0, [r4, #32]
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80053e0:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80053e4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80053e6:	432b      	orrs	r3, r5
 80053e8:	430b      	orrs	r3, r1
 80053ea:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80053ec:	6853      	ldr	r3, [r2, #4]
 80053ee:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80053f2:	f023 030f 	bic.w	r3, r3, #15
 80053f6:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80053f8:	69a3      	ldr	r3, [r4, #24]
 80053fa:	6851      	ldr	r1, [r2, #4]
 80053fc:	4303      	orrs	r3, r0
 80053fe:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8005400:	4303      	orrs	r3, r0
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8005402:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8005404:	430b      	orrs	r3, r1
 8005406:	6053      	str	r3, [r2, #4]
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8005408:	4b26      	ldr	r3, [pc, #152]	; (80054a4 <HAL_SAI_Init+0x1ac>)
 800540a:	6891      	ldr	r1, [r2, #8]
 800540c:	400b      	ands	r3, r1
 800540e:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8005410:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005412:	6891      	ldr	r1, [r2, #8]
 8005414:	4303      	orrs	r3, r0
 8005416:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8005418:	4303      	orrs	r3, r0
 800541a:	430b      	orrs	r3, r1
 800541c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800541e:	3901      	subs	r1, #1
 8005420:	430b      	orrs	r3, r1
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8005422:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005424:	3901      	subs	r1, #1
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8005426:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800542a:	6093      	str	r3, [r2, #8]
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800542c:	68d3      	ldr	r3, [r2, #12]
 800542e:	f423 637d 	bic.w	r3, r3, #4048	; 0xfd0
 8005432:	f023 030f 	bic.w	r3, r3, #15
 8005436:	041b      	lsls	r3, r3, #16
 8005438:	0c1b      	lsrs	r3, r3, #16
 800543a:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800543c:	68d1      	ldr	r1, [r2, #12]
 800543e:	e9d4 3015 	ldrd	r3, r0, [r4, #84]	; 0x54
 8005442:	4303      	orrs	r3, r0
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005444:	2000      	movs	r0, #0
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8005446:	430b      	orrs	r3, r1
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8005448:	6e21      	ldr	r1, [r4, #96]	; 0x60
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800544a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800544e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005450:	3901      	subs	r1, #1
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8005452:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005456:	60d3      	str	r3, [r2, #12]
  hsai->State= HAL_SAI_STATE_READY;
 8005458:	2301      	movs	r3, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800545a:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  __HAL_UNLOCK(hsai);
 800545e:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  hsai->State= HAL_SAI_STATE_READY;
 8005462:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
}
 8005466:	bd70      	pop	{r4, r5, r6, pc}
  switch(hsai->Init.SynchroExt)
 8005468:	2310      	movs	r3, #16
 800546a:	e761      	b.n	8005330 <HAL_SAI_Init+0x38>
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800546c:	f043 0301 	orr.w	r3, r3, #1
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8005470:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8005474:	e768      	b.n	8005348 <HAL_SAI_Init+0x50>
    SAI2->GCR = tmpregisterGCR;
 8005476:	480c      	ldr	r0, [pc, #48]	; (80054a8 <HAL_SAI_Init+0x1b0>)
 8005478:	e76f      	b.n	800535a <HAL_SAI_Init+0x62>
    uint32_t freq = 0;
 800547a:	2000      	movs	r0, #0
 800547c:	e77a      	b.n	8005374 <HAL_SAI_Init+0x7c>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800547e:	2a01      	cmp	r2, #1
 8005480:	bf14      	ite	ne
 8005482:	2100      	movne	r1, #0
 8005484:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8005488:	e796      	b.n	80053b8 <HAL_SAI_Init+0xc0>
    return HAL_ERROR;
 800548a:	2001      	movs	r0, #1
 800548c:	e7eb      	b.n	8005466 <HAL_SAI_Init+0x16e>
 800548e:	bf00      	nop
 8005490:	40015804 	.word	0x40015804
 8005494:	40015824 	.word	0x40015824
 8005498:	40015800 	.word	0x40015800
 800549c:	40015c04 	.word	0x40015c04
 80054a0:	ff05c010 	.word	0xff05c010
 80054a4:	fff88000 	.word	0xfff88000
 80054a8:	40015c00 	.word	0x40015c00

080054ac <HAL_SAI_MspDeInit>:
 80054ac:	4770      	bx	lr

080054ae <HAL_SAI_DeInit>:
{
 80054ae:	b538      	push	{r3, r4, r5, lr}
  if(hsai == NULL)
 80054b0:	4604      	mov	r4, r0
 80054b2:	b1d0      	cbz	r0, 80054ea <HAL_SAI_DeInit+0x3c>
  hsai->State = HAL_SAI_STATE_BUSY;
 80054b4:	2302      	movs	r3, #2
  hsai->Instance->IMR = 0;
 80054b6:	2500      	movs	r5, #0
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80054b8:	f04f 32ff 	mov.w	r2, #4294967295
  hsai->State = HAL_SAI_STATE_BUSY;
 80054bc:	f880 307d 	strb.w	r3, [r0, #125]	; 0x7d
  hsai->Instance->IMR = 0;
 80054c0:	6803      	ldr	r3, [r0, #0]
 80054c2:	611d      	str	r5, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80054c4:	619a      	str	r2, [r3, #24]
  SAI_Disable(hsai);
 80054c6:	f7ff fef7 	bl	80052b8 <SAI_Disable>
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80054ca:	6822      	ldr	r2, [r4, #0]
  HAL_SAI_MspDeInit(hsai);
 80054cc:	4620      	mov	r0, r4
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80054ce:	6853      	ldr	r3, [r2, #4]
 80054d0:	f043 0308 	orr.w	r3, r3, #8
 80054d4:	6053      	str	r3, [r2, #4]
  HAL_SAI_MspDeInit(hsai);
 80054d6:	f7ff ffe9 	bl	80054ac <HAL_SAI_MspDeInit>
  return HAL_OK;
 80054da:	4628      	mov	r0, r5
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80054dc:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  __HAL_UNLOCK(hsai);
 80054e0:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
  hsai->State = HAL_SAI_STATE_RESET;
 80054e4:	f884 507d 	strb.w	r5, [r4, #125]	; 0x7d
}
 80054e8:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80054ea:	2001      	movs	r0, #1
 80054ec:	e7fc      	b.n	80054e8 <HAL_SAI_DeInit+0x3a>

080054ee <HAL_SAI_DMAStop>:
{
 80054ee:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hsai);
 80054f0:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
{
 80054f4:	4604      	mov	r4, r0
  __HAL_LOCK(hsai);
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d041      	beq.n	800557e <HAL_SAI_DMAStop+0x90>
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80054fa:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(hsai);
 80054fc:	2501      	movs	r5, #1
 80054fe:	f880 507c 	strb.w	r5, [r0, #124]	; 0x7c
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005502:	6813      	ldr	r3, [r2, #0]
  if((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 8005504:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005506:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800550a:	6013      	str	r3, [r2, #0]
  if((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 800550c:	bb20      	cbnz	r0, 8005558 <HAL_SAI_DMAStop+0x6a>
  HAL_StatusTypeDef status = HAL_OK;
 800550e:	2500      	movs	r5, #0
  if((hsai->hdmarx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_RX))
 8005510:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8005512:	b188      	cbz	r0, 8005538 <HAL_SAI_DMAStop+0x4a>
 8005514:	f894 307d 	ldrb.w	r3, [r4, #125]	; 0x7d
 8005518:	2b22      	cmp	r3, #34	; 0x22
 800551a:	d10d      	bne.n	8005538 <HAL_SAI_DMAStop+0x4a>
    if(HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 800551c:	f7fd fd61 	bl	8002fe2 <HAL_DMA_Abort>
 8005520:	b150      	cbz	r0, 8005538 <HAL_SAI_DMAStop+0x4a>
      if(hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8005522:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8005524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005526:	2b80      	cmp	r3, #128	; 0x80
 8005528:	d006      	beq.n	8005538 <HAL_SAI_DMAStop+0x4a>
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800552a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        status = HAL_ERROR;
 800552e:	2501      	movs	r5, #1
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005530:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005534:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  SAI_Disable(hsai);
 8005538:	4620      	mov	r0, r4
 800553a:	f7ff febd 	bl	80052b8 <SAI_Disable>
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800553e:	6822      	ldr	r2, [r4, #0]
 8005540:	6853      	ldr	r3, [r2, #4]
 8005542:	f043 0308 	orr.w	r3, r3, #8
 8005546:	6053      	str	r3, [r2, #4]
  hsai->State = HAL_SAI_STATE_READY;
 8005548:	2301      	movs	r3, #1
 800554a:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  __HAL_UNLOCK(hsai);
 800554e:	2300      	movs	r3, #0
 8005550:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
}
 8005554:	4628      	mov	r0, r5
 8005556:	bd38      	pop	{r3, r4, r5, pc}
  if((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 8005558:	f894 307d 	ldrb.w	r3, [r4, #125]	; 0x7d
 800555c:	2b12      	cmp	r3, #18
 800555e:	d1d6      	bne.n	800550e <HAL_SAI_DMAStop+0x20>
    if(HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 8005560:	f7fd fd3f 	bl	8002fe2 <HAL_DMA_Abort>
 8005564:	2800      	cmp	r0, #0
 8005566:	d0d2      	beq.n	800550e <HAL_SAI_DMAStop+0x20>
      if(hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8005568:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800556a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800556c:	2b80      	cmp	r3, #128	; 0x80
 800556e:	d0ce      	beq.n	800550e <HAL_SAI_DMAStop+0x20>
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005570:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8005574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005578:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 800557c:	e7c8      	b.n	8005510 <HAL_SAI_DMAStop+0x22>
  __HAL_LOCK(hsai);
 800557e:	2502      	movs	r5, #2
 8005580:	e7e8      	b.n	8005554 <HAL_SAI_DMAStop+0x66>
	...

08005584 <HAL_SAI_Transmit_DMA>:
{
 8005584:	b570      	push	{r4, r5, r6, lr}
 8005586:	4613      	mov	r3, r2
 8005588:	4604      	mov	r4, r0
  if((pData == NULL) || (Size == 0))
 800558a:	2900      	cmp	r1, #0
 800558c:	d03f      	beq.n	800560e <HAL_SAI_Transmit_DMA+0x8a>
 800558e:	2b00      	cmp	r3, #0
 8005590:	d03d      	beq.n	800560e <HAL_SAI_Transmit_DMA+0x8a>
  if(hsai->State == HAL_SAI_STATE_READY)
 8005592:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
 8005596:	2801      	cmp	r0, #1
 8005598:	b2c5      	uxtb	r5, r0
 800559a:	d13a      	bne.n	8005612 <HAL_SAI_Transmit_DMA+0x8e>
    __HAL_LOCK(hsai);
 800559c:	f894 007c 	ldrb.w	r0, [r4, #124]	; 0x7c
 80055a0:	2801      	cmp	r0, #1
 80055a2:	d036      	beq.n	8005612 <HAL_SAI_Transmit_DMA+0x8e>
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80055a4:	2600      	movs	r6, #0
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 80055a6:	2212      	movs	r2, #18
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 80055a8:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80055aa:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 80055ae:	f884 207d 	strb.w	r2, [r4, #125]	; 0x7d
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 80055b2:	4a19      	ldr	r2, [pc, #100]	; (8005618 <HAL_SAI_Transmit_DMA+0x94>)
    __HAL_LOCK(hsai);
 80055b4:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
    hsai->pBuffPtr = pData;
 80055b8:	6661      	str	r1, [r4, #100]	; 0x64
    hsai->XferSize = Size;
 80055ba:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    hsai->XferCount = Size;
 80055be:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 80055c2:	6402      	str	r2, [r0, #64]	; 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 80055c4:	4a15      	ldr	r2, [pc, #84]	; (800561c <HAL_SAI_Transmit_DMA+0x98>)
 80055c6:	63c2      	str	r2, [r0, #60]	; 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 80055c8:	4a15      	ldr	r2, [pc, #84]	; (8005620 <HAL_SAI_Transmit_DMA+0x9c>)
    hsai->hdmatx->XferAbortCallback = NULL;
 80055ca:	e9c0 2613 	strd	r2, r6, [r0, #76]	; 0x4c
    if(HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 80055ce:	6822      	ldr	r2, [r4, #0]
 80055d0:	321c      	adds	r2, #28
 80055d2:	f7fd fcc9 	bl	8002f68 <HAL_DMA_Start_IT>
 80055d6:	b118      	cbz	r0, 80055e0 <HAL_SAI_Transmit_DMA+0x5c>
      __HAL_UNLOCK(hsai);
 80055d8:	f884 607c 	strb.w	r6, [r4, #124]	; 0x7c
}
 80055dc:	4628      	mov	r0, r5
 80055de:	bd70      	pop	{r4, r5, r6, pc}
    if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 80055e0:	6825      	ldr	r5, [r4, #0]
 80055e2:	682b      	ldr	r3, [r5, #0]
 80055e4:	03db      	lsls	r3, r3, #15
 80055e6:	d403      	bmi.n	80055f0 <HAL_SAI_Transmit_DMA+0x6c>
      __HAL_SAI_ENABLE(hsai);
 80055e8:	682b      	ldr	r3, [r5, #0]
 80055ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055ee:	602b      	str	r3, [r5, #0]
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80055f0:	2100      	movs	r1, #0
 80055f2:	4620      	mov	r0, r4
 80055f4:	f7ff fe4a 	bl	800528c <SAI_InterruptFlag>
 80055f8:	692b      	ldr	r3, [r5, #16]
 80055fa:	4318      	orrs	r0, r3
 80055fc:	6128      	str	r0, [r5, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80055fe:	682b      	ldr	r3, [r5, #0]
 8005600:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005604:	602b      	str	r3, [r5, #0]
    __HAL_UNLOCK(hsai);
 8005606:	2500      	movs	r5, #0
 8005608:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
    return HAL_OK;
 800560c:	e7e6      	b.n	80055dc <HAL_SAI_Transmit_DMA+0x58>
    return  HAL_ERROR;
 800560e:	2501      	movs	r5, #1
 8005610:	e7e4      	b.n	80055dc <HAL_SAI_Transmit_DMA+0x58>
    return HAL_BUSY;
 8005612:	2502      	movs	r5, #2
 8005614:	e7e2      	b.n	80055dc <HAL_SAI_Transmit_DMA+0x58>
 8005616:	bf00      	nop
 8005618:	0800565d 	.word	0x0800565d
 800561c:	08005625 	.word	0x08005625
 8005620:	08005667 	.word	0x08005667

08005624 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8005624:	b538      	push	{r3, r4, r5, lr}
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef* )hdma)->Parent;

  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 8005626:	6803      	ldr	r3, [r0, #0]
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef* )hdma)->Parent;
 8005628:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 800562a:	6819      	ldr	r1, [r3, #0]
 800562c:	f411 7180 	ands.w	r1, r1, #256	; 0x100
 8005630:	d110      	bne.n	8005654 <SAI_DMATxCplt+0x30>
  {
    hsai->XferCount = 0;
    
    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8005632:	6825      	ldr	r5, [r4, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005634:	4620      	mov	r0, r4
    hsai->XferCount = 0;
 8005636:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800563a:	682b      	ldr	r3, [r5, #0]
 800563c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005640:	602b      	str	r3, [r5, #0]
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005642:	f7ff fe23 	bl	800528c <SAI_InterruptFlag>
 8005646:	692b      	ldr	r3, [r5, #16]
 8005648:	ea23 0000 	bic.w	r0, r3, r0
    
    hsai->State= HAL_SAI_STATE_READY;
 800564c:	2301      	movs	r3, #1
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800564e:	6128      	str	r0, [r5, #16]
    hsai->State= HAL_SAI_STATE_READY;
 8005650:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  }
  HAL_SAI_TxCpltCallback(hsai);
 8005654:	4620      	mov	r0, r4
 8005656:	f7fc fb9f 	bl	8001d98 <HAL_SAI_TxCpltCallback>
}
 800565a:	bd38      	pop	{r3, r4, r5, pc}

0800565c <SAI_DMATxHalfCplt>:
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_SAI_TxHalfCpltCallback(hsai);
 800565c:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 800565e:	b508      	push	{r3, lr}
  HAL_SAI_TxHalfCpltCallback(hsai);
 8005660:	f7fc fb9e 	bl	8001da0 <HAL_SAI_TxHalfCpltCallback>
}
 8005664:	bd08      	pop	{r3, pc}

08005666 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005666:	b510      	push	{r4, lr}
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005668:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800566a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800566e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005672:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80

  if((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 8005676:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8005678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800567a:	2b01      	cmp	r3, #1
 800567c:	d003      	beq.n	8005686 <SAI_DMAError+0x20>
 800567e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8005680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005682:	2b01      	cmp	r3, #1
 8005684:	d10d      	bne.n	80056a2 <SAI_DMAError+0x3c>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005686:	6822      	ldr	r2, [r4, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 8005688:	4620      	mov	r0, r4
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800568a:	6813      	ldr	r3, [r2, #0]
 800568c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005690:	6013      	str	r3, [r2, #0]
    SAI_Disable(hsai);
 8005692:	f7ff fe11 	bl	80052b8 <SAI_Disable>
    
    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8005696:	2301      	movs	r3, #1
 8005698:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800569c:	2300      	movs	r3, #0
 800569e:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  }
  /* SAI error Callback */ 
  HAL_SAI_ErrorCallback(hsai);
 80056a2:	4620      	mov	r0, r4
 80056a4:	f7fc fd22 	bl	80020ec <HAL_SAI_ErrorCallback>
}
 80056a8:	bd10      	pop	{r4, pc}

080056aa <HAL_SAI_GetState>:
  return hsai->State;
 80056aa:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
}
 80056ae:	4770      	bx	lr

080056b0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80056b0:	4b0a      	ldr	r3, [pc, #40]	; (80056dc <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80056b2:	3b01      	subs	r3, #1
 80056b4:	d00f      	beq.n	80056d6 <USB_CoreReset+0x26>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80056b6:	6902      	ldr	r2, [r0, #16]
 80056b8:	2a00      	cmp	r2, #0
 80056ba:	dafa      	bge.n	80056b2 <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80056bc:	6903      	ldr	r3, [r0, #16]
 80056be:	4a07      	ldr	r2, [pc, #28]	; (80056dc <USB_CoreReset+0x2c>)
 80056c0:	f043 0301 	orr.w	r3, r3, #1
 80056c4:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 80056c6:	3a01      	subs	r2, #1
 80056c8:	d005      	beq.n	80056d6 <USB_CoreReset+0x26>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80056ca:	6903      	ldr	r3, [r0, #16]
 80056cc:	f013 0301 	ands.w	r3, r3, #1
 80056d0:	d1f9      	bne.n	80056c6 <USB_CoreReset+0x16>

  return HAL_OK;
 80056d2:	4618      	mov	r0, r3
 80056d4:	4770      	bx	lr
      return HAL_TIMEOUT;
 80056d6:	2003      	movs	r0, #3
}
 80056d8:	4770      	bx	lr
 80056da:	bf00      	nop
 80056dc:	00030d41 	.word	0x00030d41

080056e0 <USB_CoreInit>:
{
 80056e0:	b084      	sub	sp, #16
 80056e2:	b538      	push	{r3, r4, r5, lr}
 80056e4:	ad05      	add	r5, sp, #20
 80056e6:	4604      	mov	r4, r0
 80056e8:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80056ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d127      	bne.n	8005742 <USB_CoreInit+0x62>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80056f2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80056f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056f8:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80056fa:	68c3      	ldr	r3, [r0, #12]
 80056fc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005700:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005704:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005706:	68c3      	ldr	r3, [r0, #12]
 8005708:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800570c:	60c3      	str	r3, [r0, #12]
    if(cfg.use_external_vbus == 1U)
 800570e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005710:	2b01      	cmp	r3, #1
 8005712:	d103      	bne.n	800571c <USB_CoreInit+0x3c>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005714:	68c3      	ldr	r3, [r0, #12]
 8005716:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800571a:	60c3      	str	r3, [r0, #12]
    (void)USB_CoreReset(USBx);
 800571c:	4620      	mov	r0, r4
 800571e:	f7ff ffc7 	bl	80056b0 <USB_CoreReset>
  if(cfg.dma_enable == 1U)
 8005722:	9b08      	ldr	r3, [sp, #32]
 8005724:	2b01      	cmp	r3, #1
 8005726:	d107      	bne.n	8005738 <USB_CoreInit+0x58>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005728:	68a3      	ldr	r3, [r4, #8]
 800572a:	f043 0306 	orr.w	r3, r3, #6
 800572e:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005730:	68a3      	ldr	r3, [r4, #8]
 8005732:	f043 0320 	orr.w	r3, r3, #32
 8005736:	60a3      	str	r3, [r4, #8]
}
 8005738:	2000      	movs	r0, #0
 800573a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800573e:	b004      	add	sp, #16
 8005740:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005742:	68c3      	ldr	r3, [r0, #12]
 8005744:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005748:	60c3      	str	r3, [r0, #12]
    (void)USB_CoreReset(USBx);
 800574a:	f7ff ffb1 	bl	80056b0 <USB_CoreReset>
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 800574e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005752:	63a3      	str	r3, [r4, #56]	; 0x38
 8005754:	e7e5      	b.n	8005722 <USB_CoreInit+0x42>

08005756 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005756:	6883      	ldr	r3, [r0, #8]
 8005758:	f043 0301 	orr.w	r3, r3, #1
 800575c:	6083      	str	r3, [r0, #8]
}
 800575e:	2000      	movs	r0, #0
 8005760:	4770      	bx	lr

08005762 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005762:	6883      	ldr	r3, [r0, #8]
 8005764:	f023 0301 	bic.w	r3, r3, #1
 8005768:	6083      	str	r3, [r0, #8]
}
 800576a:	2000      	movs	r0, #0
 800576c:	4770      	bx	lr

0800576e <USB_SetCurrentMode>:
{
 800576e:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005770:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8005772:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005774:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005778:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800577a:	d108      	bne.n	800578e <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800577c:	68c3      	ldr	r3, [r0, #12]
 800577e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005782:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 8005784:	2032      	movs	r0, #50	; 0x32
 8005786:	f7fd faa1 	bl	8002ccc <HAL_Delay>
  return HAL_OK;
 800578a:	2000      	movs	r0, #0
}
 800578c:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 800578e:	b919      	cbnz	r1, 8005798 <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005790:	68c3      	ldr	r3, [r0, #12]
 8005792:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005796:	e7f4      	b.n	8005782 <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 8005798:	2001      	movs	r0, #1
 800579a:	e7f7      	b.n	800578c <USB_SetCurrentMode+0x1e>

0800579c <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800579c:	0189      	lsls	r1, r1, #6
 800579e:	4a07      	ldr	r2, [pc, #28]	; (80057bc <USB_FlushTxFifo+0x20>)
 80057a0:	f041 0120 	orr.w	r1, r1, #32
 80057a4:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 80057a6:	3a01      	subs	r2, #1
 80057a8:	d005      	beq.n	80057b6 <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80057aa:	6903      	ldr	r3, [r0, #16]
 80057ac:	f013 0320 	ands.w	r3, r3, #32
 80057b0:	d1f9      	bne.n	80057a6 <USB_FlushTxFifo+0xa>
  return HAL_OK;
 80057b2:	4618      	mov	r0, r3
 80057b4:	4770      	bx	lr
      return HAL_TIMEOUT;
 80057b6:	2003      	movs	r0, #3
}
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop
 80057bc:	00030d41 	.word	0x00030d41

080057c0 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80057c0:	2310      	movs	r3, #16
 80057c2:	4a06      	ldr	r2, [pc, #24]	; (80057dc <USB_FlushRxFifo+0x1c>)
 80057c4:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 80057c6:	3a01      	subs	r2, #1
 80057c8:	d005      	beq.n	80057d6 <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80057ca:	6903      	ldr	r3, [r0, #16]
 80057cc:	f013 0310 	ands.w	r3, r3, #16
 80057d0:	d1f9      	bne.n	80057c6 <USB_FlushRxFifo+0x6>
  return HAL_OK;
 80057d2:	4618      	mov	r0, r3
 80057d4:	4770      	bx	lr
      return HAL_TIMEOUT;
 80057d6:	2003      	movs	r0, #3
}
 80057d8:	4770      	bx	lr
 80057da:	bf00      	nop
 80057dc:	00030d41 	.word	0x00030d41

080057e0 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 80057e0:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80057e4:	4319      	orrs	r1, r3
 80057e6:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 80057ea:	2000      	movs	r0, #0
 80057ec:	4770      	bx	lr
	...

080057f0 <USB_DevInit>:
{
 80057f0:	b084      	sub	sp, #16
 80057f2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057f6:	4604      	mov	r4, r0
 80057f8:	a809      	add	r0, sp, #36	; 0x24
 80057fa:	4688      	mov	r8, r1
 80057fc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 8005800:	2300      	movs	r3, #0
 8005802:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005804:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    USBx->DIEPTXF[i] = 0U;
 8005806:	461d      	mov	r5, r3
 8005808:	e9dd 270b 	ldrd	r2, r7, [sp, #44]	; 0x2c
 800580c:	f103 0040 	add.w	r0, r3, #64	; 0x40
  for (i = 0U; i < 15U; i++)
 8005810:	3301      	adds	r3, #1
    USBx->DIEPTXF[i] = 0U;
 8005812:	eb04 0080 	add.w	r0, r4, r0, lsl #2
  for (i = 0U; i < 15U; i++)
 8005816:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 8005818:	6045      	str	r5, [r0, #4]
  for (i = 0U; i < 15U; i++)
 800581a:	d1f7      	bne.n	800580c <USB_DevInit+0x1c>
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800581c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800581e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005822:	63a3      	str	r3, [r4, #56]	; 0x38
  if (cfg.vbus_sensing_enable == 0U)
 8005824:	b95e      	cbnz	r6, 800583e <USB_DevInit+0x4e>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005826:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005828:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800582c:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800582e:	6823      	ldr	r3, [r4, #0]
 8005830:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005834:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005836:	6823      	ldr	r3, [r4, #0]
 8005838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800583c:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 800583e:	2300      	movs	r3, #0
  if(cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005840:	2901      	cmp	r1, #1
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005842:	f504 6500 	add.w	r5, r4, #2048	; 0x800
  USBx_PCGCCTL = 0U;
 8005846:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800584a:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 800584e:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if(cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005852:	d158      	bne.n	8005906 <USB_DevInit+0x116>
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 8005854:	2a00      	cmp	r2, #0
 8005856:	d154      	bne.n	8005902 <USB_DevInit+0x112>
      (void)USB_SetDevSpeed (USBx, USB_OTG_SPEED_HIGH);
 8005858:	2100      	movs	r1, #0
    (void)USB_SetDevSpeed (USBx, USB_OTG_SPEED_FULL);
 800585a:	4620      	mov	r0, r4
 800585c:	f7ff ffc0 	bl	80057e0 <USB_SetDevSpeed>
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005860:	2110      	movs	r1, #16
 8005862:	4620      	mov	r0, r4
 8005864:	f7ff ff9a 	bl	800579c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005868:	4620      	mov	r0, r4
 800586a:	f7ff ffa9 	bl	80057c0 <USB_FlushRxFifo>
  USBx_DEVICE->DIEPMSK = 0U;
 800586e:	2300      	movs	r3, #0
 8005870:	f504 6210 	add.w	r2, r4, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005874:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
      USBx_INEP(i)->DIEPCTL = 0U;
 8005878:	4619      	mov	r1, r3
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800587a:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800587e:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
  USBx_DEVICE->DIEPMSK = 0U;
 8005882:	612b      	str	r3, [r5, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005884:	616b      	str	r3, [r5, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005886:	61eb      	str	r3, [r5, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005888:	4543      	cmp	r3, r8
 800588a:	d140      	bne.n	800590e <USB_DevInit+0x11e>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800588c:	2200      	movs	r2, #0
 800588e:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005892:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005896:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800589a:	4611      	mov	r1, r2
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800589c:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058a0:	4542      	cmp	r2, r8
 80058a2:	d146      	bne.n	8005932 <USB_DevInit+0x142>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80058a4:	692b      	ldr	r3, [r5, #16]
  if (cfg.dma_enable == 1U)
 80058a6:	2f01      	cmp	r7, #1
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80058a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058ac:	612b      	str	r3, [r5, #16]
  if (cfg.dma_enable == 1U)
 80058ae:	d107      	bne.n	80058c0 <USB_DevInit+0xd0>
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 80058b0:	4b29      	ldr	r3, [pc, #164]	; (8005958 <USB_DevInit+0x168>)
 80058b2:	632b      	str	r3, [r5, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 80058b4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80058b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058ba:	f043 0303 	orr.w	r3, r3, #3
 80058be:	632b      	str	r3, [r5, #48]	; 0x30
  USBx->GINTMSK = 0U;
 80058c0:	2300      	movs	r3, #0
 80058c2:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 80058c4:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 80058c8:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 80058ca:	b91f      	cbnz	r7, 80058d4 <USB_DevInit+0xe4>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80058cc:	69a3      	ldr	r3, [r4, #24]
 80058ce:	f043 0310 	orr.w	r3, r3, #16
 80058d2:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80058d4:	69a2      	ldr	r2, [r4, #24]
 80058d6:	4b21      	ldr	r3, [pc, #132]	; (800595c <USB_DevInit+0x16c>)
 80058d8:	4313      	orrs	r3, r2
 80058da:	61a3      	str	r3, [r4, #24]
  if(cfg.Sof_enable != 0U)
 80058dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80058de:	b11b      	cbz	r3, 80058e8 <USB_DevInit+0xf8>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80058e0:	69a3      	ldr	r3, [r4, #24]
 80058e2:	f043 0308 	orr.w	r3, r3, #8
 80058e6:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 80058e8:	2e01      	cmp	r6, #1
 80058ea:	d105      	bne.n	80058f8 <USB_DevInit+0x108>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80058ec:	69a3      	ldr	r3, [r4, #24]
 80058ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058f2:	f043 0304 	orr.w	r3, r3, #4
 80058f6:	61a3      	str	r3, [r4, #24]
}
 80058f8:	2000      	movs	r0, #0
 80058fa:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058fe:	b004      	add	sp, #16
 8005900:	4770      	bx	lr
      (void)USB_SetDevSpeed (USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005902:	2101      	movs	r1, #1
 8005904:	e7a9      	b.n	800585a <USB_DevInit+0x6a>
  else if(cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8005906:	2903      	cmp	r1, #3
 8005908:	d0a4      	beq.n	8005854 <USB_DevInit+0x64>
    (void)USB_SetDevSpeed (USBx, USB_OTG_SPEED_FULL);
 800590a:	2103      	movs	r1, #3
 800590c:	e7a5      	b.n	800585a <USB_DevInit+0x6a>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800590e:	f8d2 9000 	ldr.w	r9, [r2]
 8005912:	f1b9 0f00 	cmp.w	r9, #0
 8005916:	da0a      	bge.n	800592e <USB_DevInit+0x13e>
      if (i == 0U)
 8005918:	b93b      	cbnz	r3, 800592a <USB_DevInit+0x13a>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800591a:	f8c2 c000 	str.w	ip, [r2]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 800591e:	6111      	str	r1, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005920:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005922:	f8c2 e008 	str.w	lr, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005926:	3220      	adds	r2, #32
 8005928:	e7ae      	b.n	8005888 <USB_DevInit+0x98>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800592a:	6010      	str	r0, [r2, #0]
 800592c:	e7f7      	b.n	800591e <USB_DevInit+0x12e>
      USBx_INEP(i)->DIEPCTL = 0U;
 800592e:	6011      	str	r1, [r2, #0]
 8005930:	e7f5      	b.n	800591e <USB_DevInit+0x12e>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005932:	f8d3 9000 	ldr.w	r9, [r3]
 8005936:	f1b9 0f00 	cmp.w	r9, #0
 800593a:	da0a      	bge.n	8005952 <USB_DevInit+0x162>
      if (i == 0U)
 800593c:	b93a      	cbnz	r2, 800594e <USB_DevInit+0x15e>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800593e:	f8c3 c000 	str.w	ip, [r3]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005942:	6119      	str	r1, [r3, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005944:	3201      	adds	r2, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005946:	f8c3 e008 	str.w	lr, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800594a:	3320      	adds	r3, #32
 800594c:	e7a8      	b.n	80058a0 <USB_DevInit+0xb0>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800594e:	6018      	str	r0, [r3, #0]
 8005950:	e7f7      	b.n	8005942 <USB_DevInit+0x152>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005952:	6019      	str	r1, [r3, #0]
 8005954:	e7f5      	b.n	8005942 <USB_DevInit+0x152>
 8005956:	bf00      	nop
 8005958:	00800100 	.word	0x00800100
 800595c:	803c3800 	.word	0x803c3800

08005960 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005960:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if(DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005964:	f013 0006 	ands.w	r0, r3, #6
 8005968:	d007      	beq.n	800597a <USB_GetDevSpeed+0x1a>
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800596a:	079b      	lsls	r3, r3, #30
 800596c:	d404      	bmi.n	8005978 <USB_GetDevSpeed+0x18>
  else if (DevEnumSpeed == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800596e:	2804      	cmp	r0, #4
    speed = USB_OTG_SPEED_LOW;
 8005970:	bf14      	ite	ne
 8005972:	2000      	movne	r0, #0
 8005974:	2002      	moveq	r0, #2
 8005976:	4770      	bx	lr
    speed = USB_OTG_SPEED_FULL;
 8005978:	2003      	movs	r0, #3
}
 800597a:	4770      	bx	lr

0800597c <USB_ActivateEndpoint>:
{
 800597c:	b530      	push	{r4, r5, lr}
  uint32_t epnum = (uint32_t)ep->num;
 800597e:	780d      	ldrb	r5, [r1, #0]
  if (ep->is_in == 1U)
 8005980:	2401      	movs	r4, #1
 8005982:	f500 6200 	add.w	r2, r0, #2048	; 0x800
 8005986:	f005 030f 	and.w	r3, r5, #15
 800598a:	eb00 1045 	add.w	r0, r0, r5, lsl #5
 800598e:	409c      	lsls	r4, r3
 8005990:	784b      	ldrb	r3, [r1, #1]
 8005992:	2b01      	cmp	r3, #1
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU));
 8005994:	69d3      	ldr	r3, [r2, #28]
  if (ep->is_in == 1U)
 8005996:	d118      	bne.n	80059ca <USB_ActivateEndpoint+0x4e>
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU));
 8005998:	431c      	orrs	r4, r3
 800599a:	61d4      	str	r4, [r2, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800599c:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80059a0:	041a      	lsls	r2, r3, #16
 80059a2:	d410      	bmi.n	80059c6 <USB_ActivateEndpoint+0x4a>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80059a4:	688a      	ldr	r2, [r1, #8]
 80059a6:	f8d0 4900 	ldr.w	r4, [r0, #2304]	; 0x900
 80059aa:	f3c2 030a 	ubfx	r3, r2, #0, #11
                                    ((uint32_t)ep->type << 18) | (epnum << 22) |
 80059ae:	78ca      	ldrb	r2, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80059b0:	4323      	orrs	r3, r4
 80059b2:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 80059b6:	ea43 5385 	orr.w	r3, r3, r5, lsl #22
 80059ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059c2:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 80059c6:	2000      	movs	r0, #0
 80059c8:	bd30      	pop	{r4, r5, pc}
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & 0xFU)) << 16);
 80059ca:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80059ce:	61d4      	str	r4, [r2, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80059d0:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80059d4:	041b      	lsls	r3, r3, #16
 80059d6:	d4f6      	bmi.n	80059c6 <USB_ActivateEndpoint+0x4a>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80059d8:	688b      	ldr	r3, [r1, #8]
 80059da:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 80059de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80059e2:	4313      	orrs	r3, r2
                                    ((uint32_t)ep->type << 18) |
 80059e4:	78ca      	ldrb	r2, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80059e6:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 80059ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059f2:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 80059f6:	e7e6      	b.n	80059c6 <USB_ActivateEndpoint+0x4a>

080059f8 <USB_DeactivateEndpoint>:
{
 80059f8:	b530      	push	{r4, r5, lr}
  uint32_t epnum = (uint32_t)ep->num;
 80059fa:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 80059fc:	f500 6200 	add.w	r2, r0, #2048	; 0x800
 8005a00:	7849      	ldrb	r1, [r1, #1]
 8005a02:	2301      	movs	r3, #1
 8005a04:	f004 050f 	and.w	r5, r4, #15
 8005a08:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 8005a0c:	2901      	cmp	r1, #1
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU)));
 8005a0e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8005a10:	fa03 f305 	lsl.w	r3, r3, r5
  if (ep->is_in == 1U)
 8005a14:	d10e      	bne.n	8005a34 <USB_DeactivateEndpoint+0x3c>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU)));
 8005a16:	ea21 0103 	bic.w	r1, r1, r3
 8005a1a:	63d1      	str	r1, [r2, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU)));
 8005a1c:	69d1      	ldr	r1, [r2, #28]
 8005a1e:	ea21 0303 	bic.w	r3, r1, r3
 8005a22:	61d3      	str	r3, [r2, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005a24:	4b0a      	ldr	r3, [pc, #40]	; (8005a50 <USB_DeactivateEndpoint+0x58>)
 8005a26:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8005a2a:	4013      	ands	r3, r2
 8005a2c:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8005a30:	2000      	movs	r0, #0
 8005a32:	bd30      	pop	{r4, r5, pc}
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & 0xFU)) << 16));
 8005a34:	ea21 4103 	bic.w	r1, r1, r3, lsl #16
 8005a38:	63d1      	str	r1, [r2, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & 0xFU)) << 16));
 8005a3a:	69d1      	ldr	r1, [r2, #28]
 8005a3c:	ea21 4303 	bic.w	r3, r1, r3, lsl #16
 8005a40:	61d3      	str	r3, [r2, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005a42:	4b04      	ldr	r3, [pc, #16]	; (8005a54 <USB_DeactivateEndpoint+0x5c>)
 8005a44:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8005a48:	4013      	ands	r3, r2
 8005a4a:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8005a4e:	e7ef      	b.n	8005a30 <USB_DeactivateEndpoint+0x38>
 8005a50:	ec337800 	.word	0xec337800
 8005a54:	eff37800 	.word	0xeff37800

08005a58 <USB_EP0StartXfer>:
  if (ep->is_in == 1U)
 8005a58:	784b      	ldrb	r3, [r1, #1]
 8005a5a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005b40 <USB_EP0StartXfer+0xe8>
 8005a5e:	2b01      	cmp	r3, #1
{
 8005a60:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t epnum = (uint32_t)ep->num;
 8005a62:	780d      	ldrb	r5, [r1, #0]
  if (ep->is_in == 1U)
 8005a64:	694e      	ldr	r6, [r1, #20]
 8005a66:	eb00 1445 	add.w	r4, r0, r5, lsl #5
 8005a6a:	4f34      	ldr	r7, [pc, #208]	; (8005b3c <USB_EP0StartXfer+0xe4>)
 8005a6c:	d143      	bne.n	8005af6 <USB_EP0StartXfer+0x9e>
    if (ep->xfer_len == 0U)
 8005a6e:	f504 6310 	add.w	r3, r4, #2304	; 0x900
 8005a72:	b9be      	cbnz	r6, 8005aa4 <USB_EP0StartXfer+0x4c>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005a74:	6918      	ldr	r0, [r3, #16]
    if (dma == 1U)
 8005a76:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005a78:	ea00 0007 	and.w	r0, r0, r7
 8005a7c:	6118      	str	r0, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005a7e:	6918      	ldr	r0, [r3, #16]
 8005a80:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
 8005a84:	6118      	str	r0, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005a86:	6918      	ldr	r0, [r3, #16]
 8005a88:	ea00 000c 	and.w	r0, r0, ip
 8005a8c:	6118      	str	r0, [r3, #16]
    if (dma == 1U)
 8005a8e:	d101      	bne.n	8005a94 <USB_EP0StartXfer+0x3c>
      USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005a90:	690a      	ldr	r2, [r1, #16]
 8005a92:	615a      	str	r2, [r3, #20]
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005a94:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 8005a98:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005a9c:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
}
 8005aa0:	2000      	movs	r0, #0
 8005aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005aa4:	f8d3 e010 	ldr.w	lr, [r3, #16]
 8005aa8:	ea0e 0c0c 	and.w	ip, lr, ip
 8005aac:	f8c3 c010 	str.w	ip, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005ab0:	f8d3 c010 	ldr.w	ip, [r3, #16]
 8005ab4:	ea0c 0707 	and.w	r7, ip, r7
 8005ab8:	611f      	str	r7, [r3, #16]
      if(ep->xfer_len > ep->maxpacket)
 8005aba:	688f      	ldr	r7, [r1, #8]
 8005abc:	42b7      	cmp	r7, r6
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005abe:	691e      	ldr	r6, [r3, #16]
        ep->xfer_len = ep->maxpacket;
 8005ac0:	bf38      	it	cc
 8005ac2:	614f      	strcc	r7, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005ac4:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005ac8:	694f      	ldr	r7, [r1, #20]
    if (dma == 1U)
 8005aca:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005acc:	611e      	str	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005ace:	f3c7 0612 	ubfx	r6, r7, #0, #19
 8005ad2:	f8d3 c010 	ldr.w	ip, [r3, #16]
 8005ad6:	ea46 060c 	orr.w	r6, r6, ip
 8005ada:	611e      	str	r6, [r3, #16]
    if (dma == 1U)
 8005adc:	d0d8      	beq.n	8005a90 <USB_EP0StartXfer+0x38>
      if (ep->xfer_len > 0U)
 8005ade:	2f00      	cmp	r7, #0
 8005ae0:	d0d8      	beq.n	8005a94 <USB_EP0StartXfer+0x3c>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & 0xFU);
 8005ae2:	f005 050f 	and.w	r5, r5, #15
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 8005aec:	40ab      	lsls	r3, r5
 8005aee:	4313      	orrs	r3, r2
 8005af0:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 8005af4:	e7ce      	b.n	8005a94 <USB_EP0StartXfer+0x3c>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005af6:	f8d4 0b10 	ldr.w	r0, [r4, #2832]	; 0xb10
 8005afa:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
 8005afe:	ea00 000c 	and.w	r0, r0, ip
 8005b02:	6118      	str	r0, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005b04:	6918      	ldr	r0, [r3, #16]
 8005b06:	4038      	ands	r0, r7
 8005b08:	6118      	str	r0, [r3, #16]
    if (ep->xfer_len > 0U)
 8005b0a:	6888      	ldr	r0, [r1, #8]
 8005b0c:	b106      	cbz	r6, 8005b10 <USB_EP0StartXfer+0xb8>
      ep->xfer_len = ep->maxpacket;
 8005b0e:	6148      	str	r0, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005b10:	691d      	ldr	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005b12:	f3c0 0012 	ubfx	r0, r0, #0, #19
    if (dma == 1U)
 8005b16:	2a01      	cmp	r2, #1
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005b18:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8005b1c:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005b1e:	691d      	ldr	r5, [r3, #16]
 8005b20:	ea40 0005 	orr.w	r0, r0, r5
 8005b24:	6118      	str	r0, [r3, #16]
    if (dma == 1U)
 8005b26:	d101      	bne.n	8005b2c <USB_EP0StartXfer+0xd4>
      USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005b28:	68ca      	ldr	r2, [r1, #12]
 8005b2a:	615a      	str	r2, [r3, #20]
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005b2c:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 8005b30:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b34:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
 8005b38:	e7b2      	b.n	8005aa0 <USB_EP0StartXfer+0x48>
 8005b3a:	bf00      	nop
 8005b3c:	e007ffff 	.word	0xe007ffff
 8005b40:	fff80000 	.word	0xfff80000

08005b44 <USB_WritePacket>:
{
 8005b44:	b510      	push	{r4, lr}
 8005b46:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 8005b4a:	b944      	cbnz	r4, 8005b5e <USB_WritePacket+0x1a>
    count32b =  ((uint32_t)len + 3U) / 4U;
 8005b4c:	3303      	adds	r3, #3
      USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 8005b4e:	3201      	adds	r2, #1
    count32b =  ((uint32_t)len + 3U) / 4U;
 8005b50:	089b      	lsrs	r3, r3, #2
      USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 8005b52:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 8005b56:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    for (i = 0U; i < count32b; i++)
 8005b5a:	428b      	cmp	r3, r1
 8005b5c:	d101      	bne.n	8005b62 <USB_WritePacket+0x1e>
}
 8005b5e:	2000      	movs	r0, #0
 8005b60:	bd10      	pop	{r4, pc}
      USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 8005b62:	f851 2b04 	ldr.w	r2, [r1], #4
 8005b66:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 8005b68:	e7f7      	b.n	8005b5a <USB_WritePacket+0x16>
	...

08005b6c <USB_EPStartXfer>:
{
 8005b6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if (ep->is_in == 1U)
 8005b70:	f891 8001 	ldrb.w	r8, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8005b74:	f891 c000 	ldrb.w	ip, [r1]
  if (ep->is_in == 1U)
 8005b78:	f1b8 0f01 	cmp.w	r8, #1
 8005b7c:	694b      	ldr	r3, [r1, #20]
 8005b7e:	eb00 154c 	add.w	r5, r0, ip, lsl #5
 8005b82:	78ce      	ldrb	r6, [r1, #3]
 8005b84:	f8df e174 	ldr.w	lr, [pc, #372]	; 8005cfc <USB_EPStartXfer+0x190>
 8005b88:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8005d00 <USB_EPStartXfer+0x194>
 8005b8c:	d15e      	bne.n	8005c4c <USB_EPStartXfer+0xe0>
    if (ep->xfer_len == 0U)
 8005b8e:	f505 6410 	add.w	r4, r5, #2304	; 0x900
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b92:	6927      	ldr	r7, [r4, #16]
    if (ep->xfer_len == 0U)
 8005b94:	bb13      	cbnz	r3, 8005bdc <USB_EPStartXfer+0x70>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b96:	ea07 070e 	and.w	r7, r7, lr
    if (dma == 1U)
 8005b9a:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b9c:	6127      	str	r7, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005b9e:	6927      	ldr	r7, [r4, #16]
 8005ba0:	f447 2700 	orr.w	r7, r7, #524288	; 0x80000
 8005ba4:	6127      	str	r7, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005ba6:	6927      	ldr	r7, [r4, #16]
 8005ba8:	ea07 0709 	and.w	r7, r7, r9
 8005bac:	6127      	str	r7, [r4, #16]
    if (dma == 1U)
 8005bae:	d101      	bne.n	8005bb4 <USB_EPStartXfer+0x48>
      USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005bb0:	690f      	ldr	r7, [r1, #16]
 8005bb2:	6167      	str	r7, [r4, #20]
    if (ep->type == EP_TYPE_ISOC)
 8005bb4:	2e01      	cmp	r6, #1
 8005bb6:	d03b      	beq.n	8005c30 <USB_EPStartXfer+0xc4>
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005bb8:	f8d5 4900 	ldr.w	r4, [r5, #2304]	; 0x900
    if (ep->type == EP_TYPE_ISOC)
 8005bbc:	2e01      	cmp	r6, #1
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005bbe:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8005bc2:	f8c5 4900 	str.w	r4, [r5, #2304]	; 0x900
    if (ep->type == EP_TYPE_ISOC)
 8005bc6:	d105      	bne.n	8005bd4 <USB_EPStartXfer+0x68>
      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005bc8:	9200      	str	r2, [sp, #0]
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	4662      	mov	r2, ip
 8005bce:	68c9      	ldr	r1, [r1, #12]
 8005bd0:	f7ff ffb8 	bl	8005b44 <USB_WritePacket>
}
 8005bd4:	2000      	movs	r0, #0
 8005bd6:	b003      	add	sp, #12
 8005bd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005bdc:	ea07 0709 	and.w	r7, r7, r9
      if (ep->type == EP_TYPE_ISOC)
 8005be0:	2e01      	cmp	r6, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005be2:	6127      	str	r7, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005be4:	6927      	ldr	r7, [r4, #16]
 8005be6:	ea07 070e 	and.w	r7, r7, lr
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005bea:	f8d1 e008 	ldr.w	lr, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005bee:	6127      	str	r7, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005bf0:	eb0e 0703 	add.w	r7, lr, r3
 8005bf4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005bf8:	f107 37ff 	add.w	r7, r7, #4294967295
 8005bfc:	fbb7 fefe 	udiv	lr, r7, lr
 8005c00:	4f3d      	ldr	r7, [pc, #244]	; (8005cf8 <USB_EPStartXfer+0x18c>)
 8005c02:	ea07 47ce 	and.w	r7, r7, lr, lsl #19
 8005c06:	ea47 0709 	orr.w	r7, r7, r9
 8005c0a:	6127      	str	r7, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005c0c:	f3c3 0712 	ubfx	r7, r3, #0, #19
 8005c10:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8005c14:	ea47 070e 	orr.w	r7, r7, lr
 8005c18:	6127      	str	r7, [r4, #16]
      if (ep->type == EP_TYPE_ISOC)
 8005c1a:	d15f      	bne.n	8005cdc <USB_EPStartXfer+0x170>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005c1c:	6927      	ldr	r7, [r4, #16]
    if (dma == 1U)
 8005c1e:	2a01      	cmp	r2, #1
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005c20:	f027 47c0 	bic.w	r7, r7, #1610612736	; 0x60000000
 8005c24:	6127      	str	r7, [r4, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005c26:	6927      	ldr	r7, [r4, #16]
 8005c28:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
 8005c2c:	6127      	str	r7, [r4, #16]
    if (dma == 1U)
 8005c2e:	d0bf      	beq.n	8005bb0 <USB_EPStartXfer+0x44>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005c30:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 8005c34:	f414 7f80 	tst.w	r4, #256	; 0x100
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005c38:	f8d5 4900 	ldr.w	r4, [r5, #2304]	; 0x900
 8005c3c:	bf0c      	ite	eq
 8005c3e:	f044 5400 	orreq.w	r4, r4, #536870912	; 0x20000000
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005c42:	f044 5480 	orrne.w	r4, r4, #268435456	; 0x10000000
 8005c46:	f8c5 4900 	str.w	r4, [r5, #2304]	; 0x900
 8005c4a:	e7b5      	b.n	8005bb8 <USB_EPStartXfer+0x4c>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005c4c:	f8d5 4b10 	ldr.w	r4, [r5, #2832]	; 0xb10
 8005c50:	f505 6730 	add.w	r7, r5, #2816	; 0xb00
 8005c54:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8005c58:	ea04 0409 	and.w	r4, r4, r9
 8005c5c:	613c      	str	r4, [r7, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005c5e:	693c      	ldr	r4, [r7, #16]
 8005c60:	ea04 040e 	and.w	r4, r4, lr
 8005c64:	613c      	str	r4, [r7, #16]
    if (ep->xfer_len == 0U)
 8005c66:	bb13      	cbnz	r3, 8005cae <USB_EPStartXfer+0x142>
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005c68:	693c      	ldr	r4, [r7, #16]
 8005c6a:	f3cc 0312 	ubfx	r3, ip, #0, #19
 8005c6e:	4323      	orrs	r3, r4
 8005c70:	613b      	str	r3, [r7, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    if (dma == 1U)
 8005c78:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005c7a:	613b      	str	r3, [r7, #16]
    if (dma == 1U)
 8005c7c:	d101      	bne.n	8005c82 <USB_EPStartXfer+0x116>
      USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)ep->xfer_buff;
 8005c7e:	68cb      	ldr	r3, [r1, #12]
 8005c80:	617b      	str	r3, [r7, #20]
    if (ep->type == EP_TYPE_ISOC)
 8005c82:	2e01      	cmp	r6, #1
 8005c84:	d10c      	bne.n	8005ca0 <USB_EPStartXfer+0x134>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005c86:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8005c8a:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005c8e:	f8d5 3b00 	ldr.w	r3, [r5, #2816]	; 0xb00
 8005c92:	bf0c      	ite	eq
 8005c94:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005c98:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8005c9c:	f8c5 3b00 	str.w	r3, [r5, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005ca0:	f8d5 3b00 	ldr.w	r3, [r5, #2816]	; 0xb00
 8005ca4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ca8:	f8c5 3b00 	str.w	r3, [r5, #2816]	; 0xb00
  return HAL_OK;
 8005cac:	e792      	b.n	8005bd4 <USB_EPStartXfer+0x68>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005cae:	eb0c 0403 	add.w	r4, ip, r3
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005cb2:	4b11      	ldr	r3, [pc, #68]	; (8005cf8 <USB_EPStartXfer+0x18c>)
 8005cb4:	f8d7 e010 	ldr.w	lr, [r7, #16]
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005cb8:	3c01      	subs	r4, #1
 8005cba:	fbb4 f4fc 	udiv	r4, r4, ip
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005cbe:	ea03 43c4 	and.w	r3, r3, r4, lsl #19
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005cc2:	b2a4      	uxth	r4, r4
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005cc4:	ea43 030e 	orr.w	r3, r3, lr
 8005cc8:	613b      	str	r3, [r7, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005cca:	fb0c f304 	mul.w	r3, ip, r4
 8005cce:	f8d7 e010 	ldr.w	lr, [r7, #16]
 8005cd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cd6:	ea43 030e 	orr.w	r3, r3, lr
 8005cda:	e7cd      	b.n	8005c78 <USB_EPStartXfer+0x10c>
    if (dma == 1U)
 8005cdc:	2a01      	cmp	r2, #1
 8005cde:	f43f af67 	beq.w	8005bb0 <USB_EPStartXfer+0x44>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & 0xFU);
 8005ce2:	f00c 040f 	and.w	r4, ip, #15
 8005ce6:	f8d0 e834 	ldr.w	lr, [r0, #2100]	; 0x834
 8005cea:	fa08 f404 	lsl.w	r4, r8, r4
 8005cee:	ea44 040e 	orr.w	r4, r4, lr
 8005cf2:	f8c0 4834 	str.w	r4, [r0, #2100]	; 0x834
 8005cf6:	e75d      	b.n	8005bb4 <USB_EPStartXfer+0x48>
 8005cf8:	1ff80000 	.word	0x1ff80000
 8005cfc:	e007ffff 	.word	0xe007ffff
 8005d00:	fff80000 	.word	0xfff80000

08005d04 <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005d04:	3203      	adds	r2, #3
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 8005d06:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005d0a:	0892      	lsrs	r2, r2, #2
 8005d0c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  for (i = 0U; i < count32b; i++)
 8005d10:	4291      	cmp	r1, r2
 8005d12:	d101      	bne.n	8005d18 <USB_ReadPacket+0x14>
}
 8005d14:	4608      	mov	r0, r1
 8005d16:	4770      	bx	lr
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 8005d18:	6803      	ldr	r3, [r0, #0]
 8005d1a:	f841 3b04 	str.w	r3, [r1], #4
  for (i = 0U; i < count32b; i++)
 8005d1e:	e7f7      	b.n	8005d10 <USB_ReadPacket+0xc>

08005d20 <USB_EPSetStall>:
  if (ep->is_in == 1U)
 8005d20:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8005d22:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8005d24:	2a01      	cmp	r2, #1
 8005d26:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8005d2a:	d112      	bne.n	8005d52 <USB_EPSetStall+0x32>
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005d2c:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8005d30:	2a00      	cmp	r2, #0
 8005d32:	db06      	blt.n	8005d42 <USB_EPSetStall+0x22>
 8005d34:	b12b      	cbz	r3, 8005d42 <USB_EPSetStall+0x22>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005d36:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8005d3a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005d3e:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005d42:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8005d46:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005d4a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8005d4e:	2000      	movs	r0, #0
 8005d50:	4770      	bx	lr
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005d52:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8005d56:	2a00      	cmp	r2, #0
 8005d58:	db06      	blt.n	8005d68 <USB_EPSetStall+0x48>
 8005d5a:	b12b      	cbz	r3, 8005d68 <USB_EPSetStall+0x48>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005d5c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8005d60:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005d64:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005d68:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8005d6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005d70:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8005d74:	e7eb      	b.n	8005d4e <USB_EPSetStall+0x2e>

08005d76 <USB_EPClearStall>:
  if (ep->is_in == 1U)
 8005d76:	780b      	ldrb	r3, [r1, #0]
 8005d78:	784a      	ldrb	r2, [r1, #1]
 8005d7a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8005d7e:	78cb      	ldrb	r3, [r1, #3]
 8005d80:	2a01      	cmp	r2, #1
 8005d82:	f1a3 0302 	sub.w	r3, r3, #2
 8005d86:	b2db      	uxtb	r3, r3
 8005d88:	d10f      	bne.n	8005daa <USB_EPClearStall+0x34>
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005d8a:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005d8e:	2b01      	cmp	r3, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005d90:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8005d94:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005d98:	d805      	bhi.n	8005da6 <USB_EPClearStall+0x30>
       USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005d9a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8005d9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005da2:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8005da6:	2000      	movs	r0, #0
 8005da8:	4770      	bx	lr
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005daa:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005dae:	2b01      	cmp	r3, #1
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005db0:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8005db4:	f8c0 2b00 	str.w	r2, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005db8:	d8f5      	bhi.n	8005da6 <USB_EPClearStall+0x30>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005dba:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8005dbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dc2:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8005dc6:	e7ee      	b.n	8005da6 <USB_EPClearStall+0x30>

08005dc8 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 8005dc8:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005dcc:	0109      	lsls	r1, r1, #4
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 8005dce:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005dd2:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 8005dd6:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005dda:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8005dde:	4319      	orrs	r1, r3
 8005de0:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8005de4:	2000      	movs	r0, #0
 8005de6:	4770      	bx	lr

08005de8 <USB_DevConnect>:
{
 8005de8:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005dea:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8005dee:	f023 0302 	bic.w	r3, r3, #2
 8005df2:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8005df6:	2003      	movs	r0, #3
 8005df8:	f7fc ff68 	bl	8002ccc <HAL_Delay>
}
 8005dfc:	2000      	movs	r0, #0
 8005dfe:	bd08      	pop	{r3, pc}

08005e00 <USB_DevDisconnect>:
{
 8005e00:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005e02:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8005e06:	f043 0302 	orr.w	r3, r3, #2
 8005e0a:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8005e0e:	2003      	movs	r0, #3
 8005e10:	f7fc ff5c 	bl	8002ccc <HAL_Delay>
}
 8005e14:	2000      	movs	r0, #0
 8005e16:	bd08      	pop	{r3, pc}

08005e18 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8005e18:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8005e1a:	6980      	ldr	r0, [r0, #24]
}
 8005e1c:	4010      	ands	r0, r2
 8005e1e:	4770      	bx	lr

08005e20 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8005e20:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8005e24:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005e28:	69c0      	ldr	r0, [r0, #28]
 8005e2a:	4018      	ands	r0, r3
}
 8005e2c:	0c00      	lsrs	r0, r0, #16
 8005e2e:	4770      	bx	lr

08005e30 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8005e30:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8005e34:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005e38:	69c0      	ldr	r0, [r0, #28]
 8005e3a:	4018      	ands	r0, r3
}
 8005e3c:	b280      	uxth	r0, r0
 8005e3e:	4770      	bx	lr

08005e40 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005e40:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005e44:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005e48:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005e4c:	6940      	ldr	r0, [r0, #20]
}
 8005e4e:	4010      	ands	r0, r2
 8005e50:	4770      	bx	lr

08005e52 <USB_ReadDevInEPInterrupt>:
{
 8005e52:	b510      	push	{r4, lr}
  msk = USBx_DEVICE->DIEPMSK;
 8005e54:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005e58:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005e5c:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & 0xFU)) & 0x1U) << 7;
 8005e60:	f001 010f 	and.w	r1, r1, #15
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005e64:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> (epnum & 0xFU)) & 0x1U) << 7;
 8005e68:	40cb      	lsrs	r3, r1
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005e6a:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> (epnum & 0xFU)) & 0x1U) << 7;
 8005e6c:	01db      	lsls	r3, r3, #7
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	4323      	orrs	r3, r4
}
 8005e72:	4018      	ands	r0, r3
 8005e74:	bd10      	pop	{r4, pc}

08005e76 <USB_GetMode>:
  return ((USBx->GINTSTS ) & 0x1U);
 8005e76:	6940      	ldr	r0, [r0, #20]
}
 8005e78:	f000 0001 	and.w	r0, r0, #1
 8005e7c:	4770      	bx	lr

08005e7e <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005e7e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8005e82:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005e86:	f023 0307 	bic.w	r3, r3, #7
 8005e8a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8005e8e:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 8005e92:	689a      	ldr	r2, [r3, #8]
 8005e94:	f002 0206 	and.w	r2, r2, #6
 8005e98:	2a04      	cmp	r2, #4
 8005e9a:	d105      	bne.n	8005ea8 <USB_ActivateSetup+0x2a>
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8005e9c:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8005ea0:	f042 0203 	orr.w	r2, r2, #3
 8005ea4:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005ea8:	685a      	ldr	r2, [r3, #4]
}
 8005eaa:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005eac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005eb0:	605a      	str	r2, [r3, #4]
}
 8005eb2:	4770      	bx	lr

08005eb4 <USB_EP0_OutStart>:
{
 8005eb4:	b510      	push	{r4, lr}
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005eb6:	2400      	movs	r4, #0
  if (dma == 1U)
 8005eb8:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005eba:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005ebe:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8005ec2:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8005ec6:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005eca:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8005ece:	f044 0418 	orr.w	r4, r4, #24
 8005ed2:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005ed6:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8005eda:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
 8005ede:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  if (dma == 1U)
 8005ee2:	d105      	bne.n	8005ef0 <USB_EP0_OutStart+0x3c>
    USBx_OUTEP(0U)->DOEPCTL = 0x80008000U;
 8005ee4:	f04f 2380 	mov.w	r3, #2147516416	; 0x80008000
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005ee8:	f8c0 2b14 	str.w	r2, [r0, #2836]	; 0xb14
    USBx_OUTEP(0U)->DOEPCTL = 0x80008000U;
 8005eec:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8005ef0:	2000      	movs	r0, #0
 8005ef2:	bd10      	pop	{r4, pc}

08005ef4 <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8005ef4:	b510      	push	{r4, lr}
 8005ef6:	4604      	mov	r4, r0
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80U);
 8005ef8:	2180      	movs	r1, #128	; 0x80
 8005efa:	f7fc fcc8 	bl	800288e <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8005efe:	2100      	movs	r1, #0
 8005f00:	4620      	mov	r0, r4
}
 8005f02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0U);
 8005f06:	f7fc bcc2 	b.w	800288e <USBD_LL_StallEP>
	...

08005f0c <USBD_StdDevReq>:
{
 8005f0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005f0e:	780b      	ldrb	r3, [r1, #0]
 8005f10:	4604      	mov	r4, r0
 8005f12:	460d      	mov	r5, r1
 8005f14:	f003 0360 	and.w	r3, r3, #96	; 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f18:	2b20      	cmp	r3, #32
 8005f1a:	d014      	beq.n	8005f46 <USBD_StdDevReq+0x3a>
 8005f1c:	2b40      	cmp	r3, #64	; 0x40
 8005f1e:	d012      	beq.n	8005f46 <USBD_StdDevReq+0x3a>
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	f040 808e 	bne.w	8006042 <USBD_StdDevReq+0x136>
    switch (req->bRequest)
 8005f26:	784b      	ldrb	r3, [r1, #1]
 8005f28:	2b09      	cmp	r3, #9
 8005f2a:	f200 808a 	bhi.w	8006042 <USBD_StdDevReq+0x136>
 8005f2e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005f32:	00e3      	.short	0x00e3
 8005f34:	008800fd 	.word	0x008800fd
 8005f38:	008800f6 	.word	0x008800f6
 8005f3c:	0013007d 	.word	0x0013007d
 8005f40:	00ce0088 	.word	0x00ce0088
 8005f44:	009b      	.short	0x009b
    pdev->pClass->Setup(pdev, req);
 8005f46:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8005f4a:	4629      	mov	r1, r5
 8005f4c:	4620      	mov	r0, r4
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	4798      	blx	r3
}
 8005f52:	2000      	movs	r0, #0
 8005f54:	b003      	add	sp, #12
 8005f56:	bd30      	pop	{r4, r5, pc}
  switch (req->wValue >> 8)
 8005f58:	884b      	ldrh	r3, [r1, #2]
 8005f5a:	0a1a      	lsrs	r2, r3, #8
 8005f5c:	3a01      	subs	r2, #1
 8005f5e:	2a06      	cmp	r2, #6
 8005f60:	d86f      	bhi.n	8006042 <USBD_StdDevReq+0x136>
 8005f62:	e8df f002 	tbb	[pc, r2]
 8005f66:	1604      	.short	0x1604
 8005f68:	436e6e23 	.word	0x436e6e23
 8005f6c:	4c          	.byte	0x4c
 8005f6d:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005f6e:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8005f72:	681b      	ldr	r3, [r3, #0]
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005f74:	f10d 0106 	add.w	r1, sp, #6
 8005f78:	7c20      	ldrb	r0, [r4, #16]
 8005f7a:	4798      	blx	r3
  if((len != 0U) && (req->wLength != 0U))
 8005f7c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8005f80:	2a00      	cmp	r2, #0
 8005f82:	d04f      	beq.n	8006024 <USBD_StdDevReq+0x118>
 8005f84:	88eb      	ldrh	r3, [r5, #6]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d143      	bne.n	8006012 <USBD_StdDevReq+0x106>
      USBD_CtlSendStatus(pdev);
 8005f8a:	4620      	mov	r0, r4
 8005f8c:	f000 f9ef 	bl	800636e <USBD_CtlSendStatus>
 8005f90:	e7df      	b.n	8005f52 <USBD_StdDevReq+0x46>
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8005f92:	7c02      	ldrb	r2, [r0, #16]
 8005f94:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8005f98:	b932      	cbnz	r2, 8005fa8 <USBD_StdDevReq+0x9c>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8005f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005f9c:	f10d 0006 	add.w	r0, sp, #6
 8005fa0:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005fa2:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005fa4:	7043      	strb	r3, [r0, #1]
      break;
 8005fa6:	e7e9      	b.n	8005f7c <USBD_StdDevReq+0x70>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005faa:	e7f7      	b.n	8005f9c <USBD_StdDevReq+0x90>
    switch ((uint8_t)(req->wValue))
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	2b05      	cmp	r3, #5
 8005fb0:	d847      	bhi.n	8006042 <USBD_StdDevReq+0x136>
 8005fb2:	e8df f003 	tbb	[pc, r3]
 8005fb6:	0703      	.short	0x0703
 8005fb8:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005fbc:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	e7d7      	b.n	8005f74 <USBD_StdDevReq+0x68>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005fc4:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	e7d3      	b.n	8005f74 <USBD_StdDevReq+0x68>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005fcc:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8005fd0:	68db      	ldr	r3, [r3, #12]
 8005fd2:	e7cf      	b.n	8005f74 <USBD_StdDevReq+0x68>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005fd4:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8005fd8:	691b      	ldr	r3, [r3, #16]
 8005fda:	e7cb      	b.n	8005f74 <USBD_StdDevReq+0x68>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005fdc:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8005fe0:	695b      	ldr	r3, [r3, #20]
 8005fe2:	e7c7      	b.n	8005f74 <USBD_StdDevReq+0x68>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005fe4:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8005fe8:	699b      	ldr	r3, [r3, #24]
 8005fea:	e7c3      	b.n	8005f74 <USBD_StdDevReq+0x68>
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8005fec:	7c03      	ldrb	r3, [r0, #16]
 8005fee:	bb43      	cbnz	r3, 8006042 <USBD_StdDevReq+0x136>
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005ff0:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8005ff4:	f10d 0006 	add.w	r0, sp, #6
 8005ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ffa:	4798      	blx	r3
      break;
 8005ffc:	e7be      	b.n	8005f7c <USBD_StdDevReq+0x70>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8005ffe:	7c03      	ldrb	r3, [r0, #16]
 8006000:	b9fb      	cbnz	r3, 8006042 <USBD_StdDevReq+0x136>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006002:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8006006:	f10d 0006 	add.w	r0, sp, #6
 800600a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800600c:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800600e:	2307      	movs	r3, #7
 8006010:	e7c8      	b.n	8005fa4 <USBD_StdDevReq+0x98>
    len = MIN(len, req->wLength);
 8006012:	429a      	cmp	r2, r3
    USBD_CtlSendData (pdev, pbuf, len);
 8006014:	4601      	mov	r1, r0
 8006016:	4620      	mov	r0, r4
    len = MIN(len, req->wLength);
 8006018:	bf28      	it	cs
 800601a:	461a      	movcs	r2, r3
 800601c:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, pbuf, len);
 8006020:	f000 f97b 	bl	800631a <USBD_CtlSendData>
  if(req->wLength == 0U)
 8006024:	88eb      	ldrh	r3, [r5, #6]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d193      	bne.n	8005f52 <USBD_StdDevReq+0x46>
 800602a:	e7ae      	b.n	8005f8a <USBD_StdDevReq+0x7e>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800602c:	888b      	ldrh	r3, [r1, #4]
 800602e:	b943      	cbnz	r3, 8006042 <USBD_StdDevReq+0x136>
 8006030:	88cb      	ldrh	r3, [r1, #6]
 8006032:	b933      	cbnz	r3, 8006042 <USBD_StdDevReq+0x136>
 8006034:	884d      	ldrh	r5, [r1, #2]
 8006036:	2d7f      	cmp	r5, #127	; 0x7f
 8006038:	d803      	bhi.n	8006042 <USBD_StdDevReq+0x136>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800603a:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800603e:	2b03      	cmp	r3, #3
 8006040:	d103      	bne.n	800604a <USBD_StdDevReq+0x13e>
      USBD_CtlError(pdev , req);
 8006042:	4620      	mov	r0, r4
 8006044:	f7ff ff56 	bl	8005ef4 <USBD_CtlError.constprop.0>
      break;
 8006048:	e783      	b.n	8005f52 <USBD_StdDevReq+0x46>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800604a:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 800604c:	f880 1276 	strb.w	r1, [r0, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006050:	f7fc fc3e 	bl	80028d0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006054:	4620      	mov	r0, r4
 8006056:	f000 f98a 	bl	800636e <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800605a:	b11d      	cbz	r5, 8006064 <USBD_StdDevReq+0x158>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800605c:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 800605e:	f884 3274 	strb.w	r3, [r4, #628]	; 0x274
 8006062:	e776      	b.n	8005f52 <USBD_StdDevReq+0x46>
 8006064:	2301      	movs	r3, #1
 8006066:	e7fa      	b.n	800605e <USBD_StdDevReq+0x152>
  cfgidx = (uint8_t)(req->wValue);
 8006068:	7889      	ldrb	r1, [r1, #2]
 800606a:	4d36      	ldr	r5, [pc, #216]	; (8006144 <USBD_StdDevReq+0x238>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800606c:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 800606e:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006070:	d8e7      	bhi.n	8006042 <USBD_StdDevReq+0x136>
    switch (pdev->dev_state)
 8006072:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8006076:	2b02      	cmp	r3, #2
 8006078:	d008      	beq.n	800608c <USBD_StdDevReq+0x180>
 800607a:	2b03      	cmp	r3, #3
 800607c:	d015      	beq.n	80060aa <USBD_StdDevReq+0x19e>
      USBD_CtlError(pdev, req);
 800607e:	f7ff ff39 	bl	8005ef4 <USBD_CtlError.constprop.0>
      USBD_ClrClassConfig(pdev, cfgidx);
 8006082:	7829      	ldrb	r1, [r5, #0]
 8006084:	4620      	mov	r0, r4
 8006086:	f7fa fdab 	bl	8000be0 <USBD_ClrClassConfig>
      break;
 800608a:	e762      	b.n	8005f52 <USBD_StdDevReq+0x46>
      if (cfgidx)
 800608c:	2900      	cmp	r1, #0
 800608e:	f43f af7c 	beq.w	8005f8a <USBD_StdDevReq+0x7e>
        pdev->dev_config = cfgidx;
 8006092:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8006094:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 8006096:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8006098:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800609c:	4620      	mov	r0, r4
 800609e:	f7fa fd94 	bl	8000bca <USBD_SetClassConfig>
 80060a2:	2802      	cmp	r0, #2
 80060a4:	f47f af71 	bne.w	8005f8a <USBD_StdDevReq+0x7e>
 80060a8:	e7cb      	b.n	8006042 <USBD_StdDevReq+0x136>
      if (cfgidx == 0U)
 80060aa:	b931      	cbnz	r1, 80060ba <USBD_StdDevReq+0x1ae>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80060ac:	2302      	movs	r3, #2
        pdev->dev_config = cfgidx;
 80060ae:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80060b0:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        USBD_ClrClassConfig(pdev, cfgidx);
 80060b4:	f7fa fd94 	bl	8000be0 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 80060b8:	e767      	b.n	8005f8a <USBD_StdDevReq+0x7e>
      else if (cfgidx != pdev->dev_config)
 80060ba:	6841      	ldr	r1, [r0, #4]
 80060bc:	2901      	cmp	r1, #1
 80060be:	f43f af64 	beq.w	8005f8a <USBD_StdDevReq+0x7e>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80060c2:	b2c9      	uxtb	r1, r1
 80060c4:	f7fa fd8c 	bl	8000be0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80060c8:	7829      	ldrb	r1, [r5, #0]
 80060ca:	6061      	str	r1, [r4, #4]
 80060cc:	e7e6      	b.n	800609c <USBD_StdDevReq+0x190>
  if (req->wLength != 1U)
 80060ce:	88ca      	ldrh	r2, [r1, #6]
 80060d0:	2a01      	cmp	r2, #1
 80060d2:	d1b6      	bne.n	8006042 <USBD_StdDevReq+0x136>
    switch (pdev->dev_state)
 80060d4:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80060d8:	2b02      	cmp	r3, #2
 80060da:	d809      	bhi.n	80060f0 <USBD_StdDevReq+0x1e4>
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d0b0      	beq.n	8006042 <USBD_StdDevReq+0x136>
      pdev->dev_default_config = 0U;
 80060e0:	4601      	mov	r1, r0
 80060e2:	2300      	movs	r3, #0
 80060e4:	f841 3f08 	str.w	r3, [r1, #8]!
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80060e8:	4620      	mov	r0, r4
 80060ea:	f000 f916 	bl	800631a <USBD_CtlSendData>
    break;
 80060ee:	e730      	b.n	8005f52 <USBD_StdDevReq+0x46>
    switch (pdev->dev_state)
 80060f0:	2b03      	cmp	r3, #3
 80060f2:	d1a6      	bne.n	8006042 <USBD_StdDevReq+0x136>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80060f4:	1d01      	adds	r1, r0, #4
 80060f6:	e7f7      	b.n	80060e8 <USBD_StdDevReq+0x1dc>
  switch (pdev->dev_state)
 80060f8:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80060fc:	3b01      	subs	r3, #1
 80060fe:	2b02      	cmp	r3, #2
 8006100:	d89f      	bhi.n	8006042 <USBD_StdDevReq+0x136>
    if(req->wLength != 0x2U)
 8006102:	88cb      	ldrh	r3, [r1, #6]
 8006104:	2b02      	cmp	r3, #2
 8006106:	d19c      	bne.n	8006042 <USBD_StdDevReq+0x136>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006108:	2301      	movs	r3, #1
 800610a:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup)
 800610c:	f8d0 327c 	ldr.w	r3, [r0, #636]	; 0x27c
 8006110:	b10b      	cbz	r3, 8006116 <USBD_StdDevReq+0x20a>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006112:	2303      	movs	r3, #3
 8006114:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006116:	2202      	movs	r2, #2
 8006118:	f104 010c 	add.w	r1, r4, #12
 800611c:	e7e4      	b.n	80060e8 <USBD_StdDevReq+0x1dc>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800611e:	884b      	ldrh	r3, [r1, #2]
 8006120:	2b01      	cmp	r3, #1
 8006122:	f47f af16 	bne.w	8005f52 <USBD_StdDevReq+0x46>
      pdev->dev_remote_wakeup = 0U;
 8006126:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
 800612a:	e72e      	b.n	8005f8a <USBD_StdDevReq+0x7e>
  switch (pdev->dev_state)
 800612c:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8006130:	3b01      	subs	r3, #1
 8006132:	2b02      	cmp	r3, #2
 8006134:	d885      	bhi.n	8006042 <USBD_StdDevReq+0x136>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006136:	884b      	ldrh	r3, [r1, #2]
 8006138:	2b01      	cmp	r3, #1
 800613a:	f47f af0a 	bne.w	8005f52 <USBD_StdDevReq+0x46>
      pdev->dev_remote_wakeup = 0U;
 800613e:	2300      	movs	r3, #0
 8006140:	e7f1      	b.n	8006126 <USBD_StdDevReq+0x21a>
 8006142:	bf00      	nop
 8006144:	20000484 	.word	0x20000484

08006148 <USBD_StdItfReq>:
{
 8006148:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800614a:	780b      	ldrb	r3, [r1, #0]
{
 800614c:	4604      	mov	r4, r0
 800614e:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006150:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8006154:	2a40      	cmp	r2, #64	; 0x40
 8006156:	d001      	beq.n	800615c <USBD_StdItfReq+0x14>
 8006158:	065b      	lsls	r3, r3, #25
 800615a:	d415      	bmi.n	8006188 <USBD_StdItfReq+0x40>
    switch (pdev->dev_state)
 800615c:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 8006160:	3b01      	subs	r3, #1
 8006162:	2b02      	cmp	r3, #2
 8006164:	d810      	bhi.n	8006188 <USBD_StdItfReq+0x40>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006166:	792b      	ldrb	r3, [r5, #4]
 8006168:	2b02      	cmp	r3, #2
 800616a:	d80d      	bhi.n	8006188 <USBD_StdItfReq+0x40>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800616c:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8006170:	4629      	mov	r1, r5
 8006172:	4620      	mov	r0, r4
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	4798      	blx	r3
        if ((req->wLength == 0U) && (ret == USBD_OK))
 8006178:	88eb      	ldrh	r3, [r5, #6]
 800617a:	b91b      	cbnz	r3, 8006184 <USBD_StdItfReq+0x3c>
 800617c:	b910      	cbnz	r0, 8006184 <USBD_StdItfReq+0x3c>
          USBD_CtlSendStatus(pdev);
 800617e:	4620      	mov	r0, r4
 8006180:	f000 f8f5 	bl	800636e <USBD_CtlSendStatus>
}
 8006184:	2000      	movs	r0, #0
 8006186:	bd38      	pop	{r3, r4, r5, pc}
      USBD_CtlError(pdev, req);
 8006188:	4620      	mov	r0, r4
 800618a:	f7ff feb3 	bl	8005ef4 <USBD_CtlError.constprop.0>
      break;
 800618e:	e7f9      	b.n	8006184 <USBD_StdItfReq+0x3c>

08006190 <USBD_StdEPReq>:
{
 8006190:	b538      	push	{r3, r4, r5, lr}
 8006192:	780a      	ldrb	r2, [r1, #0]
 8006194:	4604      	mov	r4, r0
 8006196:	460b      	mov	r3, r1
 8006198:	f002 0260 	and.w	r2, r2, #96	; 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800619c:	2a20      	cmp	r2, #32
 800619e:	d027      	beq.n	80061f0 <USBD_StdEPReq+0x60>
 80061a0:	2a40      	cmp	r2, #64	; 0x40
 80061a2:	d025      	beq.n	80061f0 <USBD_StdEPReq+0x60>
 80061a4:	bb92      	cbnz	r2, 800620c <USBD_StdEPReq+0x7c>
    switch (req->bRequest)
 80061a6:	785a      	ldrb	r2, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 80061a8:	888d      	ldrh	r5, [r1, #4]
 80061aa:	2a01      	cmp	r2, #1
 80061ac:	7909      	ldrb	r1, [r1, #4]
    switch (req->bRequest)
 80061ae:	d03d      	beq.n	800622c <USBD_StdEPReq+0x9c>
 80061b0:	2a03      	cmp	r2, #3
 80061b2:	d025      	beq.n	8006200 <USBD_StdEPReq+0x70>
 80061b4:	bb52      	cbnz	r2, 800620c <USBD_StdEPReq+0x7c>
      switch (pdev->dev_state)
 80061b6:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80061ba:	2b02      	cmp	r3, #2
 80061bc:	d04d      	beq.n	800625a <USBD_StdEPReq+0xca>
 80061be:	2b03      	cmp	r3, #3
 80061c0:	d124      	bne.n	800620c <USBD_StdEPReq+0x7c>
        if((ep_addr & 0x80U) == 0x80U)
 80061c2:	f001 030f 	and.w	r3, r1, #15
 80061c6:	2214      	movs	r2, #20
 80061c8:	f015 0f80 	tst.w	r5, #128	; 0x80
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80061cc:	fb02 0303 	mla	r3, r2, r3, r0
        if((ep_addr & 0x80U) == 0x80U)
 80061d0:	d054      	beq.n	800627c <USBD_StdEPReq+0xec>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80061d2:	699b      	ldr	r3, [r3, #24]
 80061d4:	b1d3      	cbz	r3, 800620c <USBD_StdEPReq+0x7c>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80061d6:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 80061da:	2314      	movs	r3, #20
 80061dc:	fb05 3303 	mla	r3, r5, r3, r3
 80061e0:	18c5      	adds	r5, r0, r3
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80061e2:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 80061e6:	d155      	bne.n	8006294 <USBD_StdEPReq+0x104>
            pep->status = 0x0001U;
 80061e8:	602b      	str	r3, [r5, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80061ea:	2202      	movs	r2, #2
 80061ec:	4629      	mov	r1, r5
 80061ee:	e041      	b.n	8006274 <USBD_StdEPReq+0xe4>
    pdev->pClass->Setup (pdev, req);
 80061f0:	f8d4 228c 	ldr.w	r2, [r4, #652]	; 0x28c
 80061f4:	4619      	mov	r1, r3
 80061f6:	4620      	mov	r0, r4
 80061f8:	6892      	ldr	r2, [r2, #8]
 80061fa:	4790      	blx	r2
}
 80061fc:	2000      	movs	r0, #0
 80061fe:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 8006200:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8006204:	2a02      	cmp	r2, #2
 8006206:	d01f      	beq.n	8006248 <USBD_StdEPReq+0xb8>
 8006208:	2a03      	cmp	r2, #3
 800620a:	d003      	beq.n	8006214 <USBD_StdEPReq+0x84>
        USBD_CtlError(pdev, req);
 800620c:	4620      	mov	r0, r4
 800620e:	f7ff fe71 	bl	8005ef4 <USBD_CtlError.constprop.0>
        break;
 8006212:	e7f3      	b.n	80061fc <USBD_StdEPReq+0x6c>
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006214:	885a      	ldrh	r2, [r3, #2]
 8006216:	b92a      	cbnz	r2, 8006224 <USBD_StdEPReq+0x94>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006218:	064a      	lsls	r2, r1, #25
 800621a:	d003      	beq.n	8006224 <USBD_StdEPReq+0x94>
 800621c:	88db      	ldrh	r3, [r3, #6]
 800621e:	b90b      	cbnz	r3, 8006224 <USBD_StdEPReq+0x94>
            USBD_LL_StallEP(pdev, ep_addr);
 8006220:	f7fc fb35 	bl	800288e <USBD_LL_StallEP>
        USBD_CtlSendStatus(pdev);
 8006224:	4620      	mov	r0, r4
 8006226:	f000 f8a2 	bl	800636e <USBD_CtlSendStatus>
        break;
 800622a:	e7e7      	b.n	80061fc <USBD_StdEPReq+0x6c>
      switch (pdev->dev_state)
 800622c:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8006230:	2a02      	cmp	r2, #2
 8006232:	d009      	beq.n	8006248 <USBD_StdEPReq+0xb8>
 8006234:	2a03      	cmp	r2, #3
 8006236:	d1e9      	bne.n	800620c <USBD_StdEPReq+0x7c>
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006238:	885b      	ldrh	r3, [r3, #2]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d1de      	bne.n	80061fc <USBD_StdEPReq+0x6c>
          if ((ep_addr & 0x7FU) != 0x00U)
 800623e:	064d      	lsls	r5, r1, #25
 8006240:	d0f0      	beq.n	8006224 <USBD_StdEPReq+0x94>
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8006242:	f7fc fb2b 	bl	800289c <USBD_LL_ClearStallEP>
 8006246:	e7ed      	b.n	8006224 <USBD_StdEPReq+0x94>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006248:	064b      	lsls	r3, r1, #25
 800624a:	d0df      	beq.n	800620c <USBD_StdEPReq+0x7c>
          USBD_LL_StallEP(pdev, ep_addr);
 800624c:	f7fc fb1f 	bl	800288e <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8006250:	2180      	movs	r1, #128	; 0x80
 8006252:	4620      	mov	r0, r4
 8006254:	f7fc fb1b 	bl	800288e <USBD_LL_StallEP>
 8006258:	e7d0      	b.n	80061fc <USBD_StdEPReq+0x6c>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800625a:	064a      	lsls	r2, r1, #25
 800625c:	d1d6      	bne.n	800620c <USBD_StdEPReq+0x7c>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800625e:	062b      	lsls	r3, r5, #24
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006260:	f04f 0202 	mov.w	r2, #2
          pep->status = 0x0000U;
 8006264:	f04f 0300 	mov.w	r3, #0
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8006268:	bf4c      	ite	mi
 800626a:	f100 0114 	addmi.w	r1, r0, #20
 800626e:	f500 71a0 	addpl.w	r1, r0, #320	; 0x140
          pep->status = 0x0000U;
 8006272:	600b      	str	r3, [r1, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006274:	4620      	mov	r0, r4
 8006276:	f000 f850 	bl	800631a <USBD_CtlSendData>
          break;
 800627a:	e7bf      	b.n	80061fc <USBD_StdEPReq+0x6c>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800627c:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8006280:	2b00      	cmp	r3, #0
 8006282:	d0c3      	beq.n	800620c <USBD_StdEPReq+0x7c>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8006284:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8006288:	2314      	movs	r3, #20
 800628a:	fb03 0505 	mla	r5, r3, r5, r0
 800628e:	f505 75a0 	add.w	r5, r5, #320	; 0x140
 8006292:	e7a6      	b.n	80061e2 <USBD_StdEPReq+0x52>
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8006294:	4620      	mov	r0, r4
 8006296:	f7fc fb08 	bl	80028aa <USBD_LL_IsStallEP>
 800629a:	b108      	cbz	r0, 80062a0 <USBD_StdEPReq+0x110>
            pep->status = 0x0001U;
 800629c:	2301      	movs	r3, #1
 800629e:	e7a3      	b.n	80061e8 <USBD_StdEPReq+0x58>
            pep->status = 0x0000U;
 80062a0:	6028      	str	r0, [r5, #0]
 80062a2:	e7a2      	b.n	80061ea <USBD_StdEPReq+0x5a>

080062a4 <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 80062a4:	780b      	ldrb	r3, [r1, #0]
 80062a6:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80062a8:	784b      	ldrb	r3, [r1, #1]
 80062aa:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80062ac:	78ca      	ldrb	r2, [r1, #3]
 80062ae:	788b      	ldrb	r3, [r1, #2]
 80062b0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80062b4:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80062b6:	794a      	ldrb	r2, [r1, #5]
 80062b8:	790b      	ldrb	r3, [r1, #4]
 80062ba:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80062be:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80062c0:	79ca      	ldrb	r2, [r1, #7]
 80062c2:	798b      	ldrb	r3, [r1, #6]
 80062c4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80062c8:	80c3      	strh	r3, [r0, #6]
}
 80062ca:	4770      	bx	lr

080062cc <USBD_CtlError>:
{
 80062cc:	b510      	push	{r4, lr}
 80062ce:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80U);
 80062d0:	2180      	movs	r1, #128	; 0x80
 80062d2:	f7fc fadc 	bl	800288e <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 80062d6:	2100      	movs	r1, #0
 80062d8:	4620      	mov	r0, r4
}
 80062da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0U);
 80062de:	f7fc bad6 	b.w	800288e <USBD_LL_StallEP>

080062e2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80062e2:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 80062e4:	b188      	cbz	r0, 800630a <USBD_GetString+0x28>
 80062e6:	2500      	movs	r5, #0
 80062e8:	3801      	subs	r0, #1
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0U;

    while (*buf != '\0')
 80062ea:	462b      	mov	r3, r5
 80062ec:	3501      	adds	r5, #1
 80062ee:	5d44      	ldrb	r4, [r0, r5]
 80062f0:	2c00      	cmp	r4, #0
 80062f2:	d1fa      	bne.n	80062ea <USBD_GetString+0x8>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80062f4:	b2db      	uxtb	r3, r3
 80062f6:	3301      	adds	r3, #1
 80062f8:	005b      	lsls	r3, r3, #1
 80062fa:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80062fc:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80062fe:	2303      	movs	r3, #3
 8006300:	704b      	strb	r3, [r1, #1]
 8006302:	2302      	movs	r3, #2
    while (*desc != '\0')
 8006304:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8006308:	b905      	cbnz	r5, 800630c <USBD_GetString+0x2a>
}
 800630a:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 800630c:	1c5a      	adds	r2, r3, #1
 800630e:	54cd      	strb	r5, [r1, r3]
      unicode[idx++] =  0U;
 8006310:	3302      	adds	r3, #2
      unicode[idx++] = *desc++;
 8006312:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 8006314:	b2db      	uxtb	r3, r3
 8006316:	548c      	strb	r4, [r1, r2]
 8006318:	e7f4      	b.n	8006304 <USBD_GetString+0x22>

0800631a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800631a:	b510      	push	{r4, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800631c:	2402      	movs	r4, #2
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800631e:	4613      	mov	r3, r2
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006320:	f8c0 426c 	str.w	r4, [r0, #620]	; 0x26c
  pdev->ep_in[0].rem_length   = len;
 8006324:	e9c0 2207 	strd	r2, r2, [r0, #28]
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8006328:	460a      	mov	r2, r1
 800632a:	2100      	movs	r1, #0
 800632c:	f7fc fad7 	bl	80028de <USBD_LL_Transmit>

  return USBD_OK;
}
 8006330:	2000      	movs	r0, #0
 8006332:	bd10      	pop	{r4, pc}

08006334 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8006334:	b508      	push	{r3, lr}
 8006336:	4613      	mov	r3, r2
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8006338:	460a      	mov	r2, r1
 800633a:	2100      	movs	r1, #0
 800633c:	f7fc facf 	bl	80028de <USBD_LL_Transmit>

  return USBD_OK;
}
 8006340:	2000      	movs	r0, #0
 8006342:	bd08      	pop	{r3, pc}

08006344 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8006344:	b510      	push	{r4, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006346:	2403      	movs	r4, #3
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8006348:	4613      	mov	r3, r2
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800634a:	f8c0 426c 	str.w	r4, [r0, #620]	; 0x26c
  pdev->ep_out[0].rem_length   = len;
 800634e:	e9c0 2252 	strd	r2, r2, [r0, #328]	; 0x148
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8006352:	460a      	mov	r2, r1
 8006354:	2100      	movs	r1, #0
 8006356:	f7fc fac9 	bl	80028ec <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800635a:	2000      	movs	r0, #0
 800635c:	bd10      	pop	{r4, pc}

0800635e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800635e:	b508      	push	{r3, lr}
 8006360:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006362:	460a      	mov	r2, r1
 8006364:	2100      	movs	r1, #0
 8006366:	f7fc fac1 	bl	80028ec <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800636a:	2000      	movs	r0, #0
 800636c:	bd08      	pop	{r3, pc}

0800636e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800636e:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006370:	2304      	movs	r3, #4
 8006372:	f8c0 326c 	str.w	r3, [r0, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006376:	2300      	movs	r3, #0
 8006378:	461a      	mov	r2, r3
 800637a:	4619      	mov	r1, r3
 800637c:	f7fc faaf 	bl	80028de <USBD_LL_Transmit>

  return USBD_OK;
}
 8006380:	2000      	movs	r0, #0
 8006382:	bd08      	pop	{r3, pc}

08006384 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8006384:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006386:	2305      	movs	r3, #5
 8006388:	f8c0 326c 	str.w	r3, [r0, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800638c:	2300      	movs	r3, #0
 800638e:	461a      	mov	r2, r3
 8006390:	4619      	mov	r1, r3
 8006392:	f7fc faab 	bl	80028ec <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8006396:	2000      	movs	r0, #0
 8006398:	bd08      	pop	{r3, pc}
	...

0800639c <__libc_init_array>:
 800639c:	b570      	push	{r4, r5, r6, lr}
 800639e:	4d0d      	ldr	r5, [pc, #52]	; (80063d4 <__libc_init_array+0x38>)
 80063a0:	4c0d      	ldr	r4, [pc, #52]	; (80063d8 <__libc_init_array+0x3c>)
 80063a2:	1b64      	subs	r4, r4, r5
 80063a4:	10a4      	asrs	r4, r4, #2
 80063a6:	2600      	movs	r6, #0
 80063a8:	42a6      	cmp	r6, r4
 80063aa:	d109      	bne.n	80063c0 <__libc_init_array+0x24>
 80063ac:	4d0b      	ldr	r5, [pc, #44]	; (80063dc <__libc_init_array+0x40>)
 80063ae:	4c0c      	ldr	r4, [pc, #48]	; (80063e0 <__libc_init_array+0x44>)
 80063b0:	f000 f914 	bl	80065dc <_init>
 80063b4:	1b64      	subs	r4, r4, r5
 80063b6:	10a4      	asrs	r4, r4, #2
 80063b8:	2600      	movs	r6, #0
 80063ba:	42a6      	cmp	r6, r4
 80063bc:	d105      	bne.n	80063ca <__libc_init_array+0x2e>
 80063be:	bd70      	pop	{r4, r5, r6, pc}
 80063c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80063c4:	4798      	blx	r3
 80063c6:	3601      	adds	r6, #1
 80063c8:	e7ee      	b.n	80063a8 <__libc_init_array+0xc>
 80063ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80063ce:	4798      	blx	r3
 80063d0:	3601      	adds	r6, #1
 80063d2:	e7f2      	b.n	80063ba <__libc_init_array+0x1e>
 80063d4:	08006690 	.word	0x08006690
 80063d8:	08006690 	.word	0x08006690
 80063dc:	08006690 	.word	0x08006690
 80063e0:	08006694 	.word	0x08006694

080063e4 <malloc>:
 80063e4:	4b02      	ldr	r3, [pc, #8]	; (80063f0 <malloc+0xc>)
 80063e6:	4601      	mov	r1, r0
 80063e8:	6818      	ldr	r0, [r3, #0]
 80063ea:	f000 b871 	b.w	80064d0 <_malloc_r>
 80063ee:	bf00      	nop
 80063f0:	20000160 	.word	0x20000160

080063f4 <free>:
 80063f4:	4b02      	ldr	r3, [pc, #8]	; (8006400 <free+0xc>)
 80063f6:	4601      	mov	r1, r0
 80063f8:	6818      	ldr	r0, [r3, #0]
 80063fa:	f000 b819 	b.w	8006430 <_free_r>
 80063fe:	bf00      	nop
 8006400:	20000160 	.word	0x20000160

08006404 <memcpy>:
 8006404:	440a      	add	r2, r1
 8006406:	4291      	cmp	r1, r2
 8006408:	f100 33ff 	add.w	r3, r0, #4294967295
 800640c:	d100      	bne.n	8006410 <memcpy+0xc>
 800640e:	4770      	bx	lr
 8006410:	b510      	push	{r4, lr}
 8006412:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006416:	f803 4f01 	strb.w	r4, [r3, #1]!
 800641a:	4291      	cmp	r1, r2
 800641c:	d1f9      	bne.n	8006412 <memcpy+0xe>
 800641e:	bd10      	pop	{r4, pc}

08006420 <memset>:
 8006420:	4402      	add	r2, r0
 8006422:	4603      	mov	r3, r0
 8006424:	4293      	cmp	r3, r2
 8006426:	d100      	bne.n	800642a <memset+0xa>
 8006428:	4770      	bx	lr
 800642a:	f803 1b01 	strb.w	r1, [r3], #1
 800642e:	e7f9      	b.n	8006424 <memset+0x4>

08006430 <_free_r>:
 8006430:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006432:	2900      	cmp	r1, #0
 8006434:	d048      	beq.n	80064c8 <_free_r+0x98>
 8006436:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800643a:	9001      	str	r0, [sp, #4]
 800643c:	2b00      	cmp	r3, #0
 800643e:	f1a1 0404 	sub.w	r4, r1, #4
 8006442:	bfb8      	it	lt
 8006444:	18e4      	addlt	r4, r4, r3
 8006446:	f000 f8ad 	bl	80065a4 <__malloc_lock>
 800644a:	4a20      	ldr	r2, [pc, #128]	; (80064cc <_free_r+0x9c>)
 800644c:	9801      	ldr	r0, [sp, #4]
 800644e:	6813      	ldr	r3, [r2, #0]
 8006450:	4615      	mov	r5, r2
 8006452:	b933      	cbnz	r3, 8006462 <_free_r+0x32>
 8006454:	6063      	str	r3, [r4, #4]
 8006456:	6014      	str	r4, [r2, #0]
 8006458:	b003      	add	sp, #12
 800645a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800645e:	f000 b8a7 	b.w	80065b0 <__malloc_unlock>
 8006462:	42a3      	cmp	r3, r4
 8006464:	d90b      	bls.n	800647e <_free_r+0x4e>
 8006466:	6821      	ldr	r1, [r4, #0]
 8006468:	1862      	adds	r2, r4, r1
 800646a:	4293      	cmp	r3, r2
 800646c:	bf04      	itt	eq
 800646e:	681a      	ldreq	r2, [r3, #0]
 8006470:	685b      	ldreq	r3, [r3, #4]
 8006472:	6063      	str	r3, [r4, #4]
 8006474:	bf04      	itt	eq
 8006476:	1852      	addeq	r2, r2, r1
 8006478:	6022      	streq	r2, [r4, #0]
 800647a:	602c      	str	r4, [r5, #0]
 800647c:	e7ec      	b.n	8006458 <_free_r+0x28>
 800647e:	461a      	mov	r2, r3
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	b10b      	cbz	r3, 8006488 <_free_r+0x58>
 8006484:	42a3      	cmp	r3, r4
 8006486:	d9fa      	bls.n	800647e <_free_r+0x4e>
 8006488:	6811      	ldr	r1, [r2, #0]
 800648a:	1855      	adds	r5, r2, r1
 800648c:	42a5      	cmp	r5, r4
 800648e:	d10b      	bne.n	80064a8 <_free_r+0x78>
 8006490:	6824      	ldr	r4, [r4, #0]
 8006492:	4421      	add	r1, r4
 8006494:	1854      	adds	r4, r2, r1
 8006496:	42a3      	cmp	r3, r4
 8006498:	6011      	str	r1, [r2, #0]
 800649a:	d1dd      	bne.n	8006458 <_free_r+0x28>
 800649c:	681c      	ldr	r4, [r3, #0]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	6053      	str	r3, [r2, #4]
 80064a2:	4421      	add	r1, r4
 80064a4:	6011      	str	r1, [r2, #0]
 80064a6:	e7d7      	b.n	8006458 <_free_r+0x28>
 80064a8:	d902      	bls.n	80064b0 <_free_r+0x80>
 80064aa:	230c      	movs	r3, #12
 80064ac:	6003      	str	r3, [r0, #0]
 80064ae:	e7d3      	b.n	8006458 <_free_r+0x28>
 80064b0:	6825      	ldr	r5, [r4, #0]
 80064b2:	1961      	adds	r1, r4, r5
 80064b4:	428b      	cmp	r3, r1
 80064b6:	bf04      	itt	eq
 80064b8:	6819      	ldreq	r1, [r3, #0]
 80064ba:	685b      	ldreq	r3, [r3, #4]
 80064bc:	6063      	str	r3, [r4, #4]
 80064be:	bf04      	itt	eq
 80064c0:	1949      	addeq	r1, r1, r5
 80064c2:	6021      	streq	r1, [r4, #0]
 80064c4:	6054      	str	r4, [r2, #4]
 80064c6:	e7c7      	b.n	8006458 <_free_r+0x28>
 80064c8:	b003      	add	sp, #12
 80064ca:	bd30      	pop	{r4, r5, pc}
 80064cc:	20000488 	.word	0x20000488

080064d0 <_malloc_r>:
 80064d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064d2:	1ccd      	adds	r5, r1, #3
 80064d4:	f025 0503 	bic.w	r5, r5, #3
 80064d8:	3508      	adds	r5, #8
 80064da:	2d0c      	cmp	r5, #12
 80064dc:	bf38      	it	cc
 80064de:	250c      	movcc	r5, #12
 80064e0:	2d00      	cmp	r5, #0
 80064e2:	4606      	mov	r6, r0
 80064e4:	db01      	blt.n	80064ea <_malloc_r+0x1a>
 80064e6:	42a9      	cmp	r1, r5
 80064e8:	d903      	bls.n	80064f2 <_malloc_r+0x22>
 80064ea:	230c      	movs	r3, #12
 80064ec:	6033      	str	r3, [r6, #0]
 80064ee:	2000      	movs	r0, #0
 80064f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064f2:	f000 f857 	bl	80065a4 <__malloc_lock>
 80064f6:	4921      	ldr	r1, [pc, #132]	; (800657c <_malloc_r+0xac>)
 80064f8:	680a      	ldr	r2, [r1, #0]
 80064fa:	4614      	mov	r4, r2
 80064fc:	b99c      	cbnz	r4, 8006526 <_malloc_r+0x56>
 80064fe:	4f20      	ldr	r7, [pc, #128]	; (8006580 <_malloc_r+0xb0>)
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	b923      	cbnz	r3, 800650e <_malloc_r+0x3e>
 8006504:	4621      	mov	r1, r4
 8006506:	4630      	mov	r0, r6
 8006508:	f000 f83c 	bl	8006584 <_sbrk_r>
 800650c:	6038      	str	r0, [r7, #0]
 800650e:	4629      	mov	r1, r5
 8006510:	4630      	mov	r0, r6
 8006512:	f000 f837 	bl	8006584 <_sbrk_r>
 8006516:	1c43      	adds	r3, r0, #1
 8006518:	d123      	bne.n	8006562 <_malloc_r+0x92>
 800651a:	230c      	movs	r3, #12
 800651c:	6033      	str	r3, [r6, #0]
 800651e:	4630      	mov	r0, r6
 8006520:	f000 f846 	bl	80065b0 <__malloc_unlock>
 8006524:	e7e3      	b.n	80064ee <_malloc_r+0x1e>
 8006526:	6823      	ldr	r3, [r4, #0]
 8006528:	1b5b      	subs	r3, r3, r5
 800652a:	d417      	bmi.n	800655c <_malloc_r+0x8c>
 800652c:	2b0b      	cmp	r3, #11
 800652e:	d903      	bls.n	8006538 <_malloc_r+0x68>
 8006530:	6023      	str	r3, [r4, #0]
 8006532:	441c      	add	r4, r3
 8006534:	6025      	str	r5, [r4, #0]
 8006536:	e004      	b.n	8006542 <_malloc_r+0x72>
 8006538:	6863      	ldr	r3, [r4, #4]
 800653a:	42a2      	cmp	r2, r4
 800653c:	bf0c      	ite	eq
 800653e:	600b      	streq	r3, [r1, #0]
 8006540:	6053      	strne	r3, [r2, #4]
 8006542:	4630      	mov	r0, r6
 8006544:	f000 f834 	bl	80065b0 <__malloc_unlock>
 8006548:	f104 000b 	add.w	r0, r4, #11
 800654c:	1d23      	adds	r3, r4, #4
 800654e:	f020 0007 	bic.w	r0, r0, #7
 8006552:	1ac2      	subs	r2, r0, r3
 8006554:	d0cc      	beq.n	80064f0 <_malloc_r+0x20>
 8006556:	1a1b      	subs	r3, r3, r0
 8006558:	50a3      	str	r3, [r4, r2]
 800655a:	e7c9      	b.n	80064f0 <_malloc_r+0x20>
 800655c:	4622      	mov	r2, r4
 800655e:	6864      	ldr	r4, [r4, #4]
 8006560:	e7cc      	b.n	80064fc <_malloc_r+0x2c>
 8006562:	1cc4      	adds	r4, r0, #3
 8006564:	f024 0403 	bic.w	r4, r4, #3
 8006568:	42a0      	cmp	r0, r4
 800656a:	d0e3      	beq.n	8006534 <_malloc_r+0x64>
 800656c:	1a21      	subs	r1, r4, r0
 800656e:	4630      	mov	r0, r6
 8006570:	f000 f808 	bl	8006584 <_sbrk_r>
 8006574:	3001      	adds	r0, #1
 8006576:	d1dd      	bne.n	8006534 <_malloc_r+0x64>
 8006578:	e7cf      	b.n	800651a <_malloc_r+0x4a>
 800657a:	bf00      	nop
 800657c:	20000488 	.word	0x20000488
 8006580:	2000048c 	.word	0x2000048c

08006584 <_sbrk_r>:
 8006584:	b538      	push	{r3, r4, r5, lr}
 8006586:	4d06      	ldr	r5, [pc, #24]	; (80065a0 <_sbrk_r+0x1c>)
 8006588:	2300      	movs	r3, #0
 800658a:	4604      	mov	r4, r0
 800658c:	4608      	mov	r0, r1
 800658e:	602b      	str	r3, [r5, #0]
 8006590:	f000 f816 	bl	80065c0 <_sbrk>
 8006594:	1c43      	adds	r3, r0, #1
 8006596:	d102      	bne.n	800659e <_sbrk_r+0x1a>
 8006598:	682b      	ldr	r3, [r5, #0]
 800659a:	b103      	cbz	r3, 800659e <_sbrk_r+0x1a>
 800659c:	6023      	str	r3, [r4, #0]
 800659e:	bd38      	pop	{r3, r4, r5, pc}
 80065a0:	20001110 	.word	0x20001110

080065a4 <__malloc_lock>:
 80065a4:	4801      	ldr	r0, [pc, #4]	; (80065ac <__malloc_lock+0x8>)
 80065a6:	f000 b809 	b.w	80065bc <__retarget_lock_acquire_recursive>
 80065aa:	bf00      	nop
 80065ac:	20001118 	.word	0x20001118

080065b0 <__malloc_unlock>:
 80065b0:	4801      	ldr	r0, [pc, #4]	; (80065b8 <__malloc_unlock+0x8>)
 80065b2:	f000 b804 	b.w	80065be <__retarget_lock_release_recursive>
 80065b6:	bf00      	nop
 80065b8:	20001118 	.word	0x20001118

080065bc <__retarget_lock_acquire_recursive>:
 80065bc:	4770      	bx	lr

080065be <__retarget_lock_release_recursive>:
 80065be:	4770      	bx	lr

080065c0 <_sbrk>:
 80065c0:	4b04      	ldr	r3, [pc, #16]	; (80065d4 <_sbrk+0x14>)
 80065c2:	6819      	ldr	r1, [r3, #0]
 80065c4:	4602      	mov	r2, r0
 80065c6:	b909      	cbnz	r1, 80065cc <_sbrk+0xc>
 80065c8:	4903      	ldr	r1, [pc, #12]	; (80065d8 <_sbrk+0x18>)
 80065ca:	6019      	str	r1, [r3, #0]
 80065cc:	6818      	ldr	r0, [r3, #0]
 80065ce:	4402      	add	r2, r0
 80065d0:	601a      	str	r2, [r3, #0]
 80065d2:	4770      	bx	lr
 80065d4:	20000490 	.word	0x20000490
 80065d8:	20001120 	.word	0x20001120

080065dc <_init>:
 80065dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065de:	bf00      	nop
 80065e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065e2:	bc08      	pop	{r3}
 80065e4:	469e      	mov	lr, r3
 80065e6:	4770      	bx	lr

080065e8 <_fini>:
 80065e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ea:	bf00      	nop
 80065ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065ee:	bc08      	pop	{r3}
 80065f0:	469e      	mov	lr, r3
 80065f2:	4770      	bx	lr
